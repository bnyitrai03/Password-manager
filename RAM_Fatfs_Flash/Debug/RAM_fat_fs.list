
RAM_fat_fs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c94  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08005e1c  08005e1c  00015e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f78  08005f78  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08005f78  08005f78  00015f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f80  08005f80  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f80  08005f80  00015f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f84  08005f84  00015f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08005f88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
 10 .bss          000004dc  20000028  20000028  00020028  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000504  20000504  00020028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007dba  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d84  00000000  00000000  00027e55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000878  00000000  00000000  00029be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000066f  00000000  00000000  0002a458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002132c  00000000  00000000  0002aac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000c7fc  00000000  00000000  0004bdf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c1d3a  00000000  00000000  000585ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000020e8  00000000  00000000  0011a32c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  0011c414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005e04 	.word	0x08005e04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	08005e04 	.word	0x08005e04

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d6:	f6ad 0d04 	subw	sp, sp, #2052	; 0x804
 80004da:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004dc:	f000 fadc 	bl	8000a98 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004e0:	f000 f87e 	bl	80005e0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004e4:	f000 f8e6 	bl	80006b4 <MX_GPIO_Init>
	MX_FATFS_Init();
 80004e8:	f001 fd20 	bl	8001f2c <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */

	uint8_t wtext[512] = "Neptun.txt_QEM0OR_TAB_1234_ENTER";
 80004ec:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 80004f0:	f5a3 7c00 	sub.w	ip, r3, #512	; 0x200
 80004f4:	4b36      	ldr	r3, [pc, #216]	; (80005d0 <main+0xfc>)
 80004f6:	461c      	mov	r4, r3
 80004f8:	4666      	mov	r6, ip
 80004fa:	f104 0e20 	add.w	lr, r4, #32
 80004fe:	4635      	mov	r5, r6
 8000500:	4623      	mov	r3, r4
 8000502:	6818      	ldr	r0, [r3, #0]
 8000504:	6859      	ldr	r1, [r3, #4]
 8000506:	689a      	ldr	r2, [r3, #8]
 8000508:	68db      	ldr	r3, [r3, #12]
 800050a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800050c:	3410      	adds	r4, #16
 800050e:	3610      	adds	r6, #16
 8000510:	4574      	cmp	r4, lr
 8000512:	d1f4      	bne.n	80004fe <main+0x2a>
 8000514:	4633      	mov	r3, r6
 8000516:	4622      	mov	r2, r4
 8000518:	7812      	ldrb	r2, [r2, #0]
 800051a:	701a      	strb	r2, [r3, #0]
 800051c:	f10c 0321 	add.w	r3, ip, #33	; 0x21
 8000520:	f240 12df 	movw	r2, #479	; 0x1df
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f005 fc31 	bl	8005d8e <memset>
	uint8_t wtext2[512] = "Neptun2.txt_R1RDBL_TAB_0000_ENTER";
 800052c:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8000530:	f5a3 6c80 	sub.w	ip, r3, #1024	; 0x400
 8000534:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <main+0x100>)
 8000536:	461c      	mov	r4, r3
 8000538:	4666      	mov	r6, ip
 800053a:	f104 0e20 	add.w	lr, r4, #32
 800053e:	4635      	mov	r5, r6
 8000540:	4623      	mov	r3, r4
 8000542:	6818      	ldr	r0, [r3, #0]
 8000544:	6859      	ldr	r1, [r3, #4]
 8000546:	689a      	ldr	r2, [r3, #8]
 8000548:	68db      	ldr	r3, [r3, #12]
 800054a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800054c:	3410      	adds	r4, #16
 800054e:	3610      	adds	r6, #16
 8000550:	4574      	cmp	r4, lr
 8000552:	d1f4      	bne.n	800053e <main+0x6a>
 8000554:	4632      	mov	r2, r6
 8000556:	4623      	mov	r3, r4
 8000558:	881b      	ldrh	r3, [r3, #0]
 800055a:	8013      	strh	r3, [r2, #0]
 800055c:	f10c 0322 	add.w	r3, ip, #34	; 0x22
 8000560:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f005 fc11 	bl	8005d8e <memset>
	uint8_t rtext[512] = { 0 };
 800056c:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8000570:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	3304      	adds	r3, #4
 800057a:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f005 fc04 	bl	8005d8e <memset>
	uint8_t rtext2[512] = { 0 };
 8000586:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800058a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	3304      	adds	r3, #4
 8000594:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f005 fbf7 	bl	8005d8e <memset>
	Fat_Write("Neptun.txt", wtext);
 80005a0:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80005a4:	4619      	mov	r1, r3
 80005a6:	480c      	ldr	r0, [pc, #48]	; (80005d8 <main+0x104>)
 80005a8:	f001 fcfa 	bl	8001fa0 <Fat_Write>
	Fat_Write("Neptun2.txt", wtext2);
 80005ac:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80005b0:	4619      	mov	r1, r3
 80005b2:	480a      	ldr	r0, [pc, #40]	; (80005dc <main+0x108>)
 80005b4:	f001 fcf4 	bl	8001fa0 <Fat_Write>
	Fat_Read("Neptun.txt", rtext);
 80005b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80005bc:	4619      	mov	r1, r3
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <main+0x104>)
 80005c0:	f001 fd3e 	bl	8002040 <Fat_Read>
	Fat_Read("Neptun2.txt", rtext2);
 80005c4:	463b      	mov	r3, r7
 80005c6:	4619      	mov	r1, r3
 80005c8:	4804      	ldr	r0, [pc, #16]	; (80005dc <main+0x108>)
 80005ca:	f001 fd39 	bl	8002040 <Fat_Read>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80005ce:	e7fe      	b.n	80005ce <main+0xfa>
 80005d0:	08005e34 	.word	0x08005e34
 80005d4:	08005e58 	.word	0x08005e58
 80005d8:	08005e1c 	.word	0x08005e1c
 80005dc:	08005e28 	.word	0x08005e28

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	; 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2230      	movs	r2, #48	; 0x30
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f005 fbcd 	bl	8005d8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	4b28      	ldr	r3, [pc, #160]	; (80006ac <SystemClock_Config+0xcc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	4a27      	ldr	r2, [pc, #156]	; (80006ac <SystemClock_Config+0xcc>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	; 0x40
 8000614:	4b25      	ldr	r3, [pc, #148]	; (80006ac <SystemClock_Config+0xcc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <SystemClock_Config+0xd0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a21      	ldr	r2, [pc, #132]	; (80006b0 <SystemClock_Config+0xd0>)
 800062a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <SystemClock_Config+0xd0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063c:	2302      	movs	r3, #2
 800063e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000640:	2301      	movs	r3, #1
 8000642:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000644:	2310      	movs	r3, #16
 8000646:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000648:	2302      	movs	r3, #2
 800064a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064c:	2300      	movs	r3, #0
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000650:	2308      	movs	r3, #8
 8000652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000654:	23a8      	movs	r3, #168	; 0xa8
 8000656:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800065c:	2307      	movs	r3, #7
 800065e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 0320 	add.w	r3, r7, #32
 8000664:	4618      	mov	r0, r3
 8000666:	f000 fffd 	bl	8001664 <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000670:	f000 f97e 	bl	8000970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	230f      	movs	r3, #15
 8000676:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000678:	2302      	movs	r3, #2
 800067a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000680:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000684:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2105      	movs	r1, #5
 8000692:	4618      	mov	r0, r3
 8000694:	f001 fa5e 	bl	8001b54 <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800069e:	f000 f967 	bl	8000970 <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3750      	adds	r7, #80	; 0x50
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
//  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08c      	sub	sp, #48	; 0x30
 80006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
 80006ce:	4ba2      	ldr	r3, [pc, #648]	; (8000958 <MX_GPIO_Init+0x2a4>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4aa1      	ldr	r2, [pc, #644]	; (8000958 <MX_GPIO_Init+0x2a4>)
 80006d4:	f043 0310 	orr.w	r3, r3, #16
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b9f      	ldr	r3, [pc, #636]	; (8000958 <MX_GPIO_Init+0x2a4>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0310 	and.w	r3, r3, #16
 80006e2:	61bb      	str	r3, [r7, #24]
 80006e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
 80006ea:	4b9b      	ldr	r3, [pc, #620]	; (8000958 <MX_GPIO_Init+0x2a4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a9a      	ldr	r2, [pc, #616]	; (8000958 <MX_GPIO_Init+0x2a4>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b98      	ldr	r3, [pc, #608]	; (8000958 <MX_GPIO_Init+0x2a4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	4b94      	ldr	r3, [pc, #592]	; (8000958 <MX_GPIO_Init+0x2a4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a93      	ldr	r2, [pc, #588]	; (8000958 <MX_GPIO_Init+0x2a4>)
 800070c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b91      	ldr	r3, [pc, #580]	; (8000958 <MX_GPIO_Init+0x2a4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	4b8d      	ldr	r3, [pc, #564]	; (8000958 <MX_GPIO_Init+0x2a4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a8c      	ldr	r2, [pc, #560]	; (8000958 <MX_GPIO_Init+0x2a4>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b8a      	ldr	r3, [pc, #552]	; (8000958 <MX_GPIO_Init+0x2a4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	4b86      	ldr	r3, [pc, #536]	; (8000958 <MX_GPIO_Init+0x2a4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a85      	ldr	r2, [pc, #532]	; (8000958 <MX_GPIO_Init+0x2a4>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b83      	ldr	r3, [pc, #524]	; (8000958 <MX_GPIO_Init+0x2a4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b7f      	ldr	r3, [pc, #508]	; (8000958 <MX_GPIO_Init+0x2a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a7e      	ldr	r2, [pc, #504]	; (8000958 <MX_GPIO_Init+0x2a4>)
 8000760:	f043 0308 	orr.w	r3, r3, #8
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b7c      	ldr	r3, [pc, #496]	; (8000958 <MX_GPIO_Init+0x2a4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0308 	and.w	r3, r3, #8
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2108      	movs	r1, #8
 8000776:	4879      	ldr	r0, [pc, #484]	; (800095c <MX_GPIO_Init+0x2a8>)
 8000778:	f000 ff5a 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	2101      	movs	r1, #1
 8000780:	4877      	ldr	r0, [pc, #476]	; (8000960 <MX_GPIO_Init+0x2ac>)
 8000782:	f000 ff55 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000786:	2200      	movs	r2, #0
 8000788:	f24f 0110 	movw	r1, #61456	; 0xf010
 800078c:	4875      	ldr	r0, [pc, #468]	; (8000964 <MX_GPIO_Init+0x2b0>)
 800078e:	f000 ff4f 	bl	8001630 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000792:	2308      	movs	r3, #8
 8000794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	4619      	mov	r1, r3
 80007a8:	486c      	ldr	r0, [pc, #432]	; (800095c <MX_GPIO_Init+0x2a8>)
 80007aa:	f000 fda5 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007ae:	2301      	movs	r3, #1
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b2:	2301      	movs	r3, #1
 80007b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	4619      	mov	r1, r3
 80007c4:	4866      	ldr	r0, [pc, #408]	; (8000960 <MX_GPIO_Init+0x2ac>)
 80007c6:	f000 fd97 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007ca:	2308      	movs	r3, #8
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ce:	2302      	movs	r3, #2
 80007d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007da:	2305      	movs	r3, #5
 80007dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	4619      	mov	r1, r3
 80007e4:	485e      	ldr	r0, [pc, #376]	; (8000960 <MX_GPIO_Init+0x2ac>)
 80007e6:	f000 fd87 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ea:	2301      	movs	r3, #1
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4619      	mov	r1, r3
 80007fe:	485a      	ldr	r0, [pc, #360]	; (8000968 <MX_GPIO_Init+0x2b4>)
 8000800:	f000 fd7a 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000804:	2310      	movs	r3, #16
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000814:	2306      	movs	r3, #6
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	4852      	ldr	r0, [pc, #328]	; (8000968 <MX_GPIO_Init+0x2b4>)
 8000820:	f000 fd6a 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000824:	23e0      	movs	r3, #224	; 0xe0
 8000826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	2302      	movs	r3, #2
 800082a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000834:	2305      	movs	r3, #5
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	484a      	ldr	r0, [pc, #296]	; (8000968 <MX_GPIO_Init+0x2b4>)
 8000840:	f000 fd5a 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000844:	2304      	movs	r3, #4
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	4845      	ldr	r0, [pc, #276]	; (800096c <MX_GPIO_Init+0x2b8>)
 8000858:	f000 fd4e 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800085c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800086e:	2305      	movs	r3, #5
 8000870:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	483c      	ldr	r0, [pc, #240]	; (800096c <MX_GPIO_Init+0x2b8>)
 800087a:	f000 fd3d 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800087e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000882:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	2301      	movs	r3, #1
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	4833      	ldr	r0, [pc, #204]	; (8000964 <MX_GPIO_Init+0x2b0>)
 8000898:	f000 fd2e 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800089c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008ae:	2306      	movs	r3, #6
 80008b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	4829      	ldr	r0, [pc, #164]	; (8000960 <MX_GPIO_Init+0x2ac>)
 80008ba:	f000 fd1d 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4825      	ldr	r0, [pc, #148]	; (8000968 <MX_GPIO_Init+0x2b4>)
 80008d4:	f000 fd10 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80008d8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008ea:	230a      	movs	r3, #10
 80008ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	481c      	ldr	r0, [pc, #112]	; (8000968 <MX_GPIO_Init+0x2b4>)
 80008f6:	f000 fcff 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008fa:	2320      	movs	r3, #32
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4815      	ldr	r0, [pc, #84]	; (8000964 <MX_GPIO_Init+0x2b0>)
 800090e:	f000 fcf3 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000912:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000918:	2312      	movs	r3, #18
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000924:	2304      	movs	r3, #4
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	480f      	ldr	r0, [pc, #60]	; (800096c <MX_GPIO_Init+0x2b8>)
 8000930:	f000 fce2 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000934:	2302      	movs	r3, #2
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000938:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_GPIO_Init+0x2a8>)
 800094a:	f000 fcd5 	bl	80012f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800094e:	bf00      	nop
 8000950:	3730      	adds	r7, #48	; 0x30
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800
 800095c:	40021000 	.word	0x40021000
 8000960:	40020800 	.word	0x40020800
 8000964:	40020c00 	.word	0x40020c00
 8000968:	40020000 	.word	0x40020000
 800096c:	40020400 	.word	0x40020400

08000970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000974:	b672      	cpsid	i
}
 8000976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000978:	e7fe      	b.n	8000978 <Error_Handler+0x8>
	...

0800097c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <HAL_MspInit+0x4c>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	4a0f      	ldr	r2, [pc, #60]	; (80009c8 <HAL_MspInit+0x4c>)
 800098c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000990:	6453      	str	r3, [r2, #68]	; 0x44
 8000992:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <HAL_MspInit+0x4c>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <HAL_MspInit+0x4c>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	4a08      	ldr	r2, [pc, #32]	; (80009c8 <HAL_MspInit+0x4c>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ac:	6413      	str	r3, [r2, #64]	; 0x40
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_MspInit+0x4c>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ba:	2007      	movs	r0, #7
 80009bc:	f000 f990 	bl	8000ce0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40023800 	.word	0x40023800

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d0:	e7fe      	b.n	80009d0 <NMI_Handler+0x4>

080009d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <HardFault_Handler+0x4>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <MemManage_Handler+0x4>

080009de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a18:	f000 f890 	bl	8000b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <SystemInit+0x20>)
 8000a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <SystemInit+0x20>)
 8000a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a48:	f7ff ffea 	bl	8000a20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a4c:	480c      	ldr	r0, [pc, #48]	; (8000a80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a4e:	490d      	ldr	r1, [pc, #52]	; (8000a84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a50:	4a0d      	ldr	r2, [pc, #52]	; (8000a88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a54:	e002      	b.n	8000a5c <LoopCopyDataInit>

08000a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5a:	3304      	adds	r3, #4

08000a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a60:	d3f9      	bcc.n	8000a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a64:	4c0a      	ldr	r4, [pc, #40]	; (8000a90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a68:	e001      	b.n	8000a6e <LoopFillZerobss>

08000a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a6c:	3204      	adds	r2, #4

08000a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a70:	d3fb      	bcc.n	8000a6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a72:	f005 f995 	bl	8005da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a76:	f7ff fd2d 	bl	80004d4 <main>
  bx  lr    
 8000a7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a84:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000a88:	08005f88 	.word	0x08005f88
  ldr r2, =_sbss
 8000a8c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000a90:	20000504 	.word	0x20000504

08000a94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC_IRQHandler>
	...

08000a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_Init+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <HAL_Init+0x40>)
 8000aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <HAL_Init+0x40>)
 8000aae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_Init+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_Init+0x40>)
 8000aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f000 f90d 	bl	8000ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f000 f808 	bl	8000adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000acc:	f7ff ff56 	bl	800097c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023c00 	.word	0x40023c00

08000adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_InitTick+0x54>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_InitTick+0x58>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4619      	mov	r1, r3
 8000aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 f917 	bl	8000d2e <HAL_SYSTICK_Config>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e00e      	b.n	8000b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	d80a      	bhi.n	8000b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b10:	2200      	movs	r2, #0
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	f000 f8ed 	bl	8000cf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b1c:	4a06      	ldr	r2, [pc, #24]	; (8000b38 <HAL_InitTick+0x5c>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	e000      	b.n	8000b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000000 	.word	0x20000000
 8000b34:	20000008 	.word	0x20000008
 8000b38:	20000004 	.word	0x20000004

08000b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_IncTick+0x20>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_IncTick+0x24>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <HAL_IncTick+0x24>)
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	20000044 	.word	0x20000044

08000b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <HAL_GetTick+0x14>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000044 	.word	0x20000044

08000b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bae:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	60d3      	str	r3, [r2, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <__NVIC_GetPriorityGrouping+0x18>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	0a1b      	lsrs	r3, r3, #8
 8000bce:	f003 0307 	and.w	r3, r3, #7
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db0a      	blt.n	8000c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	490c      	ldr	r1, [pc, #48]	; (8000c2c <__NVIC_SetPriority+0x4c>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	0112      	lsls	r2, r2, #4
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	440b      	add	r3, r1
 8000c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c08:	e00a      	b.n	8000c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4908      	ldr	r1, [pc, #32]	; (8000c30 <__NVIC_SetPriority+0x50>)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	f003 030f 	and.w	r3, r3, #15
 8000c16:	3b04      	subs	r3, #4
 8000c18:	0112      	lsls	r2, r2, #4
 8000c1a:	b2d2      	uxtb	r2, r2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	761a      	strb	r2, [r3, #24]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000e100 	.word	0xe000e100
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	; 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f1c3 0307 	rsb	r3, r3, #7
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	bf28      	it	cs
 8000c52:	2304      	movcs	r3, #4
 8000c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	2b06      	cmp	r3, #6
 8000c5c:	d902      	bls.n	8000c64 <NVIC_EncodePriority+0x30>
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3b03      	subs	r3, #3
 8000c62:	e000      	b.n	8000c66 <NVIC_EncodePriority+0x32>
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43da      	mvns	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa01 f303 	lsl.w	r3, r1, r3
 8000c86:	43d9      	mvns	r1, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	4313      	orrs	r3, r2
         );
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3724      	adds	r7, #36	; 0x24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cac:	d301      	bcc.n	8000cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00f      	b.n	8000cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <SysTick_Config+0x40>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cba:	210f      	movs	r1, #15
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	f7ff ff8e 	bl	8000be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <SysTick_Config+0x40>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cca:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <SysTick_Config+0x40>)
 8000ccc:	2207      	movs	r2, #7
 8000cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	e000e010 	.word	0xe000e010

08000ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff ff47 	bl	8000b7c <__NVIC_SetPriorityGrouping>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b086      	sub	sp, #24
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
 8000d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d08:	f7ff ff5c 	bl	8000bc4 <__NVIC_GetPriorityGrouping>
 8000d0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	68b9      	ldr	r1, [r7, #8]
 8000d12:	6978      	ldr	r0, [r7, #20]
 8000d14:	f7ff ff8e 	bl	8000c34 <NVIC_EncodePriority>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1e:	4611      	mov	r1, r2
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff5d 	bl	8000be0 <__NVIC_SetPriority>
}
 8000d26:	bf00      	nop
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff ffb0 	bl	8000c9c <SysTick_Config>
 8000d3c:	4603      	mov	r3, r0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000d5a:	4b23      	ldr	r3, [pc, #140]	; (8000de8 <HAL_FLASH_Program+0xa0>)
 8000d5c:	7e1b      	ldrb	r3, [r3, #24]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d101      	bne.n	8000d66 <HAL_FLASH_Program+0x1e>
 8000d62:	2302      	movs	r3, #2
 8000d64:	e03b      	b.n	8000dde <HAL_FLASH_Program+0x96>
 8000d66:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <HAL_FLASH_Program+0xa0>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000d6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d70:	f000 f870 	bl	8000e54 <FLASH_WaitForLastOperation>
 8000d74:	4603      	mov	r3, r0
 8000d76:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000d78:	7dfb      	ldrb	r3, [r7, #23]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d12b      	bne.n	8000dd6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d105      	bne.n	8000d90 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000d84:	783b      	ldrb	r3, [r7, #0]
 8000d86:	4619      	mov	r1, r3
 8000d88:	68b8      	ldr	r0, [r7, #8]
 8000d8a:	f000 f91b 	bl	8000fc4 <FLASH_Program_Byte>
 8000d8e:	e016      	b.n	8000dbe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d105      	bne.n	8000da2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000d96:	883b      	ldrh	r3, [r7, #0]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	68b8      	ldr	r0, [r7, #8]
 8000d9c:	f000 f8ee 	bl	8000f7c <FLASH_Program_HalfWord>
 8000da0:	e00d      	b.n	8000dbe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d105      	bne.n	8000db4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	4619      	mov	r1, r3
 8000dac:	68b8      	ldr	r0, [r7, #8]
 8000dae:	f000 f8c3 	bl	8000f38 <FLASH_Program_Word>
 8000db2:	e004      	b.n	8000dbe <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8000db4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000db8:	68b8      	ldr	r0, [r7, #8]
 8000dba:	f000 f88b 	bl	8000ed4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000dbe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000dc2:	f000 f847 	bl	8000e54 <FLASH_WaitForLastOperation>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <HAL_FLASH_Program+0xa4>)
 8000dcc:	691b      	ldr	r3, [r3, #16]
 8000dce:	4a07      	ldr	r2, [pc, #28]	; (8000dec <HAL_FLASH_Program+0xa4>)
 8000dd0:	f023 0301 	bic.w	r3, r3, #1
 8000dd4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000dd6:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <HAL_FLASH_Program+0xa0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	761a      	strb	r2, [r3, #24]
  
  return status;
 8000ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000048 	.word	0x20000048
 8000dec:	40023c00 	.word	0x40023c00

08000df0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_FLASH_Unlock+0x38>)
 8000dfc:	691b      	ldr	r3, [r3, #16]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	da0b      	bge.n	8000e1a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <HAL_FLASH_Unlock+0x38>)
 8000e04:	4a09      	ldr	r2, [pc, #36]	; (8000e2c <HAL_FLASH_Unlock+0x3c>)
 8000e06:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000e08:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <HAL_FLASH_Unlock+0x38>)
 8000e0a:	4a09      	ldr	r2, [pc, #36]	; (8000e30 <HAL_FLASH_Unlock+0x40>)
 8000e0c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_FLASH_Unlock+0x38>)
 8000e10:	691b      	ldr	r3, [r3, #16]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	da01      	bge.n	8000e1a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	40023c00 	.word	0x40023c00
 8000e2c:	45670123 	.word	0x45670123
 8000e30:	cdef89ab 	.word	0xcdef89ab

08000e34 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_FLASH_Lock+0x1c>)
 8000e3a:	691b      	ldr	r3, [r3, #16]
 8000e3c:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <HAL_FLASH_Lock+0x1c>)
 8000e3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e42:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	40023c00 	.word	0x40023c00

08000e54 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e60:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <FLASH_WaitForLastOperation+0x78>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8000e66:	f7ff fe7d 	bl	8000b64 <HAL_GetTick>
 8000e6a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000e6c:	e010      	b.n	8000e90 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e74:	d00c      	beq.n	8000e90 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d007      	beq.n	8000e8c <FLASH_WaitForLastOperation+0x38>
 8000e7c:	f7ff fe72 	bl	8000b64 <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d201      	bcs.n	8000e90 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	e019      	b.n	8000ec4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <FLASH_WaitForLastOperation+0x7c>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d1e8      	bne.n	8000e6e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <FLASH_WaitForLastOperation+0x7c>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d002      	beq.n	8000eae <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000ea8:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <FLASH_WaitForLastOperation+0x7c>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <FLASH_WaitForLastOperation+0x7c>)
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000eba:	f000 f8a5 	bl	8001008 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e000      	b.n	8000ec4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
  
}  
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000048 	.word	0x20000048
 8000ed0:	40023c00 	.word	0x40023c00

08000ed4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <FLASH_Program_DoubleWord+0x60>)
 8000ee2:	691b      	ldr	r3, [r3, #16]
 8000ee4:	4a13      	ldr	r2, [pc, #76]	; (8000f34 <FLASH_Program_DoubleWord+0x60>)
 8000ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000eea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <FLASH_Program_DoubleWord+0x60>)
 8000eee:	691b      	ldr	r3, [r3, #16]
 8000ef0:	4a10      	ldr	r2, [pc, #64]	; (8000f34 <FLASH_Program_DoubleWord+0x60>)
 8000ef2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000ef6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <FLASH_Program_DoubleWord+0x60>)
 8000efa:	691b      	ldr	r3, [r3, #16]
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <FLASH_Program_DoubleWord+0x60>)
 8000efe:	f043 0301 	orr.w	r3, r3, #1
 8000f02:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	683a      	ldr	r2, [r7, #0]
 8000f08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8000f0a:	f3bf 8f6f 	isb	sy
}
 8000f0e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8000f10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f14:	f04f 0200 	mov.w	r2, #0
 8000f18:	f04f 0300 	mov.w	r3, #0
 8000f1c:	000a      	movs	r2, r1
 8000f1e:	2300      	movs	r3, #0
 8000f20:	68f9      	ldr	r1, [r7, #12]
 8000f22:	3104      	adds	r1, #4
 8000f24:	4613      	mov	r3, r2
 8000f26:	600b      	str	r3, [r1, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	40023c00 	.word	0x40023c00

08000f38 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000f42:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <FLASH_Program_Word+0x40>)
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	4a0c      	ldr	r2, [pc, #48]	; (8000f78 <FLASH_Program_Word+0x40>)
 8000f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f4c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <FLASH_Program_Word+0x40>)
 8000f50:	691b      	ldr	r3, [r3, #16]
 8000f52:	4a09      	ldr	r2, [pc, #36]	; (8000f78 <FLASH_Program_Word+0x40>)
 8000f54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f58:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000f5a:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <FLASH_Program_Word+0x40>)
 8000f5c:	691b      	ldr	r3, [r3, #16]
 8000f5e:	4a06      	ldr	r2, [pc, #24]	; (8000f78 <FLASH_Program_Word+0x40>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	683a      	ldr	r2, [r7, #0]
 8000f6a:	601a      	str	r2, [r3, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	40023c00 	.word	0x40023c00

08000f7c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000f88:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <FLASH_Program_HalfWord+0x44>)
 8000f8a:	691b      	ldr	r3, [r3, #16]
 8000f8c:	4a0c      	ldr	r2, [pc, #48]	; (8000fc0 <FLASH_Program_HalfWord+0x44>)
 8000f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <FLASH_Program_HalfWord+0x44>)
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	4a09      	ldr	r2, [pc, #36]	; (8000fc0 <FLASH_Program_HalfWord+0x44>)
 8000f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000fa0:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <FLASH_Program_HalfWord+0x44>)
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	4a06      	ldr	r2, [pc, #24]	; (8000fc0 <FLASH_Program_HalfWord+0x44>)
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	887a      	ldrh	r2, [r7, #2]
 8000fb0:	801a      	strh	r2, [r3, #0]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40023c00 	.word	0x40023c00

08000fc4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <FLASH_Program_Byte+0x40>)
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <FLASH_Program_Byte+0x40>)
 8000fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000fda:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000fdc:	4b09      	ldr	r3, [pc, #36]	; (8001004 <FLASH_Program_Byte+0x40>)
 8000fde:	4a09      	ldr	r2, [pc, #36]	; (8001004 <FLASH_Program_Byte+0x40>)
 8000fe0:	691b      	ldr	r3, [r3, #16]
 8000fe2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000fe4:	4b07      	ldr	r3, [pc, #28]	; (8001004 <FLASH_Program_Byte+0x40>)
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	4a06      	ldr	r2, [pc, #24]	; (8001004 <FLASH_Program_Byte+0x40>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	78fa      	ldrb	r2, [r7, #3]
 8000ff4:	701a      	strb	r2, [r3, #0]
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40023c00 	.word	0x40023c00

08001008 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800100c:	4b27      	ldr	r3, [pc, #156]	; (80010ac <FLASH_SetErrorCode+0xa4>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	f003 0310 	and.w	r3, r3, #16
 8001014:	2b00      	cmp	r3, #0
 8001016:	d008      	beq.n	800102a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001018:	4b25      	ldr	r3, [pc, #148]	; (80010b0 <FLASH_SetErrorCode+0xa8>)
 800101a:	69db      	ldr	r3, [r3, #28]
 800101c:	f043 0310 	orr.w	r3, r3, #16
 8001020:	4a23      	ldr	r2, [pc, #140]	; (80010b0 <FLASH_SetErrorCode+0xa8>)
 8001022:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001024:	4b21      	ldr	r3, [pc, #132]	; (80010ac <FLASH_SetErrorCode+0xa4>)
 8001026:	2210      	movs	r2, #16
 8001028:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800102a:	4b20      	ldr	r3, [pc, #128]	; (80010ac <FLASH_SetErrorCode+0xa4>)
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	f003 0320 	and.w	r3, r3, #32
 8001032:	2b00      	cmp	r3, #0
 8001034:	d008      	beq.n	8001048 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001036:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <FLASH_SetErrorCode+0xa8>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	f043 0308 	orr.w	r3, r3, #8
 800103e:	4a1c      	ldr	r2, [pc, #112]	; (80010b0 <FLASH_SetErrorCode+0xa8>)
 8001040:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001042:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <FLASH_SetErrorCode+0xa4>)
 8001044:	2220      	movs	r2, #32
 8001046:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001048:	4b18      	ldr	r3, [pc, #96]	; (80010ac <FLASH_SetErrorCode+0xa4>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001050:	2b00      	cmp	r3, #0
 8001052:	d008      	beq.n	8001066 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001054:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <FLASH_SetErrorCode+0xa8>)
 8001056:	69db      	ldr	r3, [r3, #28]
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	4a14      	ldr	r2, [pc, #80]	; (80010b0 <FLASH_SetErrorCode+0xa8>)
 800105e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <FLASH_SetErrorCode+0xa4>)
 8001062:	2240      	movs	r2, #64	; 0x40
 8001064:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <FLASH_SetErrorCode+0xa4>)
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800106e:	2b00      	cmp	r3, #0
 8001070:	d008      	beq.n	8001084 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <FLASH_SetErrorCode+0xa8>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	f043 0302 	orr.w	r3, r3, #2
 800107a:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <FLASH_SetErrorCode+0xa8>)
 800107c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <FLASH_SetErrorCode+0xa4>)
 8001080:	2280      	movs	r2, #128	; 0x80
 8001082:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <FLASH_SetErrorCode+0xa4>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d008      	beq.n	80010a2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <FLASH_SetErrorCode+0xa8>)
 8001092:	69db      	ldr	r3, [r3, #28]
 8001094:	f043 0320 	orr.w	r3, r3, #32
 8001098:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <FLASH_SetErrorCode+0xa8>)
 800109a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <FLASH_SetErrorCode+0xa4>)
 800109e:	2202      	movs	r2, #2
 80010a0:	60da      	str	r2, [r3, #12]
  }
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	40023c00 	.word	0x40023c00
 80010b0:	20000048 	.word	0x20000048

080010b4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80010c6:	4b31      	ldr	r3, [pc, #196]	; (800118c <HAL_FLASHEx_Erase+0xd8>)
 80010c8:	7e1b      	ldrb	r3, [r3, #24]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d101      	bne.n	80010d2 <HAL_FLASHEx_Erase+0x1e>
 80010ce:	2302      	movs	r3, #2
 80010d0:	e058      	b.n	8001184 <HAL_FLASHEx_Erase+0xd0>
 80010d2:	4b2e      	ldr	r3, [pc, #184]	; (800118c <HAL_FLASHEx_Erase+0xd8>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010dc:	f7ff feba 	bl	8000e54 <FLASH_WaitForLastOperation>
 80010e0:	4603      	mov	r3, r0
 80010e2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d148      	bne.n	800117c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	f04f 32ff 	mov.w	r2, #4294967295
 80010f0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d115      	bne.n	8001126 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	4619      	mov	r1, r3
 8001106:	4610      	mov	r0, r2
 8001108:	f000 f844 	bl	8001194 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800110c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001110:	f7ff fea0 	bl	8000e54 <FLASH_WaitForLastOperation>
 8001114:	4603      	mov	r3, r0
 8001116:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <HAL_FLASHEx_Erase+0xdc>)
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	4a1c      	ldr	r2, [pc, #112]	; (8001190 <HAL_FLASHEx_Erase+0xdc>)
 800111e:	f023 0304 	bic.w	r3, r3, #4
 8001122:	6113      	str	r3, [r2, #16]
 8001124:	e028      	b.n	8001178 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	e01c      	b.n	8001168 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	691b      	ldr	r3, [r3, #16]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	4619      	mov	r1, r3
 8001136:	68b8      	ldr	r0, [r7, #8]
 8001138:	f000 f850 	bl	80011dc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800113c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001140:	f7ff fe88 	bl	8000e54 <FLASH_WaitForLastOperation>
 8001144:	4603      	mov	r3, r0
 8001146:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <HAL_FLASHEx_Erase+0xdc>)
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	4a10      	ldr	r2, [pc, #64]	; (8001190 <HAL_FLASHEx_Erase+0xdc>)
 800114e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001152:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	68ba      	ldr	r2, [r7, #8]
 800115e:	601a      	str	r2, [r3, #0]
          break;
 8001160:	e00a      	b.n	8001178 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	3301      	adds	r3, #1
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68da      	ldr	r2, [r3, #12]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	4413      	add	r3, r2
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	429a      	cmp	r2, r3
 8001176:	d3da      	bcc.n	800112e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001178:	f000 f878 	bl	800126c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <HAL_FLASHEx_Erase+0xd8>)
 800117e:	2200      	movs	r2, #0
 8001180:	761a      	strb	r2, [r3, #24]

  return status;
 8001182:	7bfb      	ldrb	r3, [r7, #15]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000048 	.word	0x20000048
 8001190:	40023c00 	.word	0x40023c00

08001194 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	6039      	str	r1, [r7, #0]
 800119e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <FLASH_MassErase+0x44>)
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	4a0c      	ldr	r2, [pc, #48]	; (80011d8 <FLASH_MassErase+0x44>)
 80011a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <FLASH_MassErase+0x44>)
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	4a09      	ldr	r2, [pc, #36]	; (80011d8 <FLASH_MassErase+0x44>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80011b8:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <FLASH_MassErase+0x44>)
 80011ba:	691a      	ldr	r2, [r3, #16]
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	4313      	orrs	r3, r2
 80011c2:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <FLASH_MassErase+0x44>)
 80011c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c8:	6113      	str	r3, [r2, #16]
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40023c00 	.word	0x40023c00

080011dc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d102      	bne.n	80011f8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	e010      	b.n	800121a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80011f8:	78fb      	ldrb	r3, [r7, #3]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d103      	bne.n	8001206 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80011fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	e009      	b.n	800121a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001206:	78fb      	ldrb	r3, [r7, #3]
 8001208:	2b02      	cmp	r3, #2
 800120a:	d103      	bne.n	8001214 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800120c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	e002      	b.n	800121a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001214:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001218:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <FLASH_Erase_Sector+0x8c>)
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	4a12      	ldr	r2, [pc, #72]	; (8001268 <FLASH_Erase_Sector+0x8c>)
 8001220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001224:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <FLASH_Erase_Sector+0x8c>)
 8001228:	691a      	ldr	r2, [r3, #16]
 800122a:	490f      	ldr	r1, [pc, #60]	; (8001268 <FLASH_Erase_Sector+0x8c>)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <FLASH_Erase_Sector+0x8c>)
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	4a0c      	ldr	r2, [pc, #48]	; (8001268 <FLASH_Erase_Sector+0x8c>)
 8001238:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800123c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800123e:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <FLASH_Erase_Sector+0x8c>)
 8001240:	691a      	ldr	r2, [r3, #16]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	4313      	orrs	r3, r2
 8001248:	4a07      	ldr	r2, [pc, #28]	; (8001268 <FLASH_Erase_Sector+0x8c>)
 800124a:	f043 0302 	orr.w	r3, r3, #2
 800124e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <FLASH_Erase_Sector+0x8c>)
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	4a04      	ldr	r2, [pc, #16]	; (8001268 <FLASH_Erase_Sector+0x8c>)
 8001256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125a:	6113      	str	r3, [r2, #16]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	40023c00 	.word	0x40023c00

0800126c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001270:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <FLASH_FlushCaches+0x88>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001278:	2b00      	cmp	r3, #0
 800127a:	d017      	beq.n	80012ac <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800127c:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <FLASH_FlushCaches+0x88>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a1c      	ldr	r2, [pc, #112]	; (80012f4 <FLASH_FlushCaches+0x88>)
 8001282:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001286:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001288:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <FLASH_FlushCaches+0x88>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a19      	ldr	r2, [pc, #100]	; (80012f4 <FLASH_FlushCaches+0x88>)
 800128e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <FLASH_FlushCaches+0x88>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a16      	ldr	r2, [pc, #88]	; (80012f4 <FLASH_FlushCaches+0x88>)
 800129a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800129e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <FLASH_FlushCaches+0x88>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a13      	ldr	r2, [pc, #76]	; (80012f4 <FLASH_FlushCaches+0x88>)
 80012a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012aa:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <FLASH_FlushCaches+0x88>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d017      	beq.n	80012e8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <FLASH_FlushCaches+0x88>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0d      	ldr	r2, [pc, #52]	; (80012f4 <FLASH_FlushCaches+0x88>)
 80012be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012c2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <FLASH_FlushCaches+0x88>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <FLASH_FlushCaches+0x88>)
 80012ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <FLASH_FlushCaches+0x88>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <FLASH_FlushCaches+0x88>)
 80012d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012da:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <FLASH_FlushCaches+0x88>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <FLASH_FlushCaches+0x88>)
 80012e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012e6:	6013      	str	r3, [r2, #0]
  }
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40023c00 	.word	0x40023c00

080012f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	; 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
 8001312:	e16b      	b.n	80015ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001314:	2201      	movs	r2, #1
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	429a      	cmp	r2, r3
 800132e:	f040 815a 	bne.w	80015e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	2b01      	cmp	r3, #1
 800133c:	d005      	beq.n	800134a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001346:	2b02      	cmp	r3, #2
 8001348:	d130      	bne.n	80013ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	2203      	movs	r2, #3
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	68da      	ldr	r2, [r3, #12]
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001380:	2201      	movs	r2, #1
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	091b      	lsrs	r3, r3, #4
 8001396:	f003 0201 	and.w	r2, r3, #1
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b03      	cmp	r3, #3
 80013b6:	d017      	beq.n	80013e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	2203      	movs	r2, #3
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d123      	bne.n	800143c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	08da      	lsrs	r2, r3, #3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3208      	adds	r2, #8
 80013fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	220f      	movs	r2, #15
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	691a      	ldr	r2, [r3, #16]
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	08da      	lsrs	r2, r3, #3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3208      	adds	r2, #8
 8001436:	69b9      	ldr	r1, [r7, #24]
 8001438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	2203      	movs	r2, #3
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0203 	and.w	r2, r3, #3
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001478:	2b00      	cmp	r3, #0
 800147a:	f000 80b4 	beq.w	80015e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b60      	ldr	r3, [pc, #384]	; (8001604 <HAL_GPIO_Init+0x30c>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	4a5f      	ldr	r2, [pc, #380]	; (8001604 <HAL_GPIO_Init+0x30c>)
 8001488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148c:	6453      	str	r3, [r2, #68]	; 0x44
 800148e:	4b5d      	ldr	r3, [pc, #372]	; (8001604 <HAL_GPIO_Init+0x30c>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800149a:	4a5b      	ldr	r2, [pc, #364]	; (8001608 <HAL_GPIO_Init+0x310>)
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	089b      	lsrs	r3, r3, #2
 80014a0:	3302      	adds	r3, #2
 80014a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	220f      	movs	r2, #15
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a52      	ldr	r2, [pc, #328]	; (800160c <HAL_GPIO_Init+0x314>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d02b      	beq.n	800151e <HAL_GPIO_Init+0x226>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a51      	ldr	r2, [pc, #324]	; (8001610 <HAL_GPIO_Init+0x318>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d025      	beq.n	800151a <HAL_GPIO_Init+0x222>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a50      	ldr	r2, [pc, #320]	; (8001614 <HAL_GPIO_Init+0x31c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d01f      	beq.n	8001516 <HAL_GPIO_Init+0x21e>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4f      	ldr	r2, [pc, #316]	; (8001618 <HAL_GPIO_Init+0x320>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d019      	beq.n	8001512 <HAL_GPIO_Init+0x21a>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4e      	ldr	r2, [pc, #312]	; (800161c <HAL_GPIO_Init+0x324>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d013      	beq.n	800150e <HAL_GPIO_Init+0x216>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4d      	ldr	r2, [pc, #308]	; (8001620 <HAL_GPIO_Init+0x328>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d00d      	beq.n	800150a <HAL_GPIO_Init+0x212>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a4c      	ldr	r2, [pc, #304]	; (8001624 <HAL_GPIO_Init+0x32c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d007      	beq.n	8001506 <HAL_GPIO_Init+0x20e>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a4b      	ldr	r2, [pc, #300]	; (8001628 <HAL_GPIO_Init+0x330>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d101      	bne.n	8001502 <HAL_GPIO_Init+0x20a>
 80014fe:	2307      	movs	r3, #7
 8001500:	e00e      	b.n	8001520 <HAL_GPIO_Init+0x228>
 8001502:	2308      	movs	r3, #8
 8001504:	e00c      	b.n	8001520 <HAL_GPIO_Init+0x228>
 8001506:	2306      	movs	r3, #6
 8001508:	e00a      	b.n	8001520 <HAL_GPIO_Init+0x228>
 800150a:	2305      	movs	r3, #5
 800150c:	e008      	b.n	8001520 <HAL_GPIO_Init+0x228>
 800150e:	2304      	movs	r3, #4
 8001510:	e006      	b.n	8001520 <HAL_GPIO_Init+0x228>
 8001512:	2303      	movs	r3, #3
 8001514:	e004      	b.n	8001520 <HAL_GPIO_Init+0x228>
 8001516:	2302      	movs	r3, #2
 8001518:	e002      	b.n	8001520 <HAL_GPIO_Init+0x228>
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <HAL_GPIO_Init+0x228>
 800151e:	2300      	movs	r3, #0
 8001520:	69fa      	ldr	r2, [r7, #28]
 8001522:	f002 0203 	and.w	r2, r2, #3
 8001526:	0092      	lsls	r2, r2, #2
 8001528:	4093      	lsls	r3, r2
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001530:	4935      	ldr	r1, [pc, #212]	; (8001608 <HAL_GPIO_Init+0x310>)
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	089b      	lsrs	r3, r3, #2
 8001536:	3302      	adds	r3, #2
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800153e:	4b3b      	ldr	r3, [pc, #236]	; (800162c <HAL_GPIO_Init+0x334>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001562:	4a32      	ldr	r2, [pc, #200]	; (800162c <HAL_GPIO_Init+0x334>)
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001568:	4b30      	ldr	r3, [pc, #192]	; (800162c <HAL_GPIO_Init+0x334>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800158c:	4a27      	ldr	r2, [pc, #156]	; (800162c <HAL_GPIO_Init+0x334>)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001592:	4b26      	ldr	r3, [pc, #152]	; (800162c <HAL_GPIO_Init+0x334>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015b6:	4a1d      	ldr	r2, [pc, #116]	; (800162c <HAL_GPIO_Init+0x334>)
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <HAL_GPIO_Init+0x334>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015e0:	4a12      	ldr	r2, [pc, #72]	; (800162c <HAL_GPIO_Init+0x334>)
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3301      	adds	r3, #1
 80015ea:	61fb      	str	r3, [r7, #28]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	2b0f      	cmp	r3, #15
 80015f0:	f67f ae90 	bls.w	8001314 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015f4:	bf00      	nop
 80015f6:	bf00      	nop
 80015f8:	3724      	adds	r7, #36	; 0x24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800
 8001608:	40013800 	.word	0x40013800
 800160c:	40020000 	.word	0x40020000
 8001610:	40020400 	.word	0x40020400
 8001614:	40020800 	.word	0x40020800
 8001618:	40020c00 	.word	0x40020c00
 800161c:	40021000 	.word	0x40021000
 8001620:	40021400 	.word	0x40021400
 8001624:	40021800 	.word	0x40021800
 8001628:	40021c00 	.word	0x40021c00
 800162c:	40013c00 	.word	0x40013c00

08001630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	807b      	strh	r3, [r7, #2]
 800163c:	4613      	mov	r3, r2
 800163e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001640:	787b      	ldrb	r3, [r7, #1]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001646:	887a      	ldrh	r2, [r7, #2]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800164c:	e003      	b.n	8001656 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800164e:	887b      	ldrh	r3, [r7, #2]
 8001650:	041a      	lsls	r2, r3, #16
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	619a      	str	r2, [r3, #24]
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e267      	b.n	8001b46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d075      	beq.n	800176e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001682:	4b88      	ldr	r3, [pc, #544]	; (80018a4 <HAL_RCC_OscConfig+0x240>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 030c 	and.w	r3, r3, #12
 800168a:	2b04      	cmp	r3, #4
 800168c:	d00c      	beq.n	80016a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800168e:	4b85      	ldr	r3, [pc, #532]	; (80018a4 <HAL_RCC_OscConfig+0x240>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001696:	2b08      	cmp	r3, #8
 8001698:	d112      	bne.n	80016c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800169a:	4b82      	ldr	r3, [pc, #520]	; (80018a4 <HAL_RCC_OscConfig+0x240>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016a6:	d10b      	bne.n	80016c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a8:	4b7e      	ldr	r3, [pc, #504]	; (80018a4 <HAL_RCC_OscConfig+0x240>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d05b      	beq.n	800176c <HAL_RCC_OscConfig+0x108>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d157      	bne.n	800176c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e242      	b.n	8001b46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c8:	d106      	bne.n	80016d8 <HAL_RCC_OscConfig+0x74>
 80016ca:	4b76      	ldr	r3, [pc, #472]	; (80018a4 <HAL_RCC_OscConfig+0x240>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a75      	ldr	r2, [pc, #468]	; (80018a4 <HAL_RCC_OscConfig+0x240>)
 80016d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	e01d      	b.n	8001714 <HAL_RCC_OscConfig+0xb0>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016e0:	d10c      	bne.n	80016fc <HAL_RCC_OscConfig+0x98>
 80016e2:	4b70      	ldr	r3, [pc, #448]	; (80018a4 <HAL_RCC_OscConfig+0x240>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a6f      	ldr	r2, [pc, #444]	; (80018a4 <HAL_RCC_OscConfig+0x240>)
 80016e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	4b6d      	ldr	r3, [pc, #436]	; (80018a4 <HAL_RCC_OscConfig+0x240>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a6c      	ldr	r2, [pc, #432]	; (80018a4 <HAL_RCC_OscConfig+0x240>)
 80016f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	e00b      	b.n	8001714 <HAL_RCC_OscConfig+0xb0>
 80016fc:	4b69      	ldr	r3, [pc, #420]	; (80018a4 <HAL_RCC_OscConfig+0x240>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a68      	ldr	r2, [pc, #416]	; (80018a4 <HAL_RCC_OscConfig+0x240>)
 8001702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	4b66      	ldr	r3, [pc, #408]	; (80018a4 <HAL_RCC_OscConfig+0x240>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a65      	ldr	r2, [pc, #404]	; (80018a4 <HAL_RCC_OscConfig+0x240>)
 800170e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d013      	beq.n	8001744 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171c:	f7ff fa22 	bl	8000b64 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001724:	f7ff fa1e 	bl	8000b64 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b64      	cmp	r3, #100	; 0x64
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e207      	b.n	8001b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001736:	4b5b      	ldr	r3, [pc, #364]	; (80018a4 <HAL_RCC_OscConfig+0x240>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f0      	beq.n	8001724 <HAL_RCC_OscConfig+0xc0>
 8001742:	e014      	b.n	800176e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001744:	f7ff fa0e 	bl	8000b64 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800174c:	f7ff fa0a 	bl	8000b64 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b64      	cmp	r3, #100	; 0x64
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e1f3      	b.n	8001b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175e:	4b51      	ldr	r3, [pc, #324]	; (80018a4 <HAL_RCC_OscConfig+0x240>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0xe8>
 800176a:	e000      	b.n	800176e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d063      	beq.n	8001842 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800177a:	4b4a      	ldr	r3, [pc, #296]	; (80018a4 <HAL_RCC_OscConfig+0x240>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 030c 	and.w	r3, r3, #12
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00b      	beq.n	800179e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001786:	4b47      	ldr	r3, [pc, #284]	; (80018a4 <HAL_RCC_OscConfig+0x240>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800178e:	2b08      	cmp	r3, #8
 8001790:	d11c      	bne.n	80017cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001792:	4b44      	ldr	r3, [pc, #272]	; (80018a4 <HAL_RCC_OscConfig+0x240>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d116      	bne.n	80017cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179e:	4b41      	ldr	r3, [pc, #260]	; (80018a4 <HAL_RCC_OscConfig+0x240>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d005      	beq.n	80017b6 <HAL_RCC_OscConfig+0x152>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d001      	beq.n	80017b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e1c7      	b.n	8001b46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b6:	4b3b      	ldr	r3, [pc, #236]	; (80018a4 <HAL_RCC_OscConfig+0x240>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	4937      	ldr	r1, [pc, #220]	; (80018a4 <HAL_RCC_OscConfig+0x240>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ca:	e03a      	b.n	8001842 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d020      	beq.n	8001816 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d4:	4b34      	ldr	r3, [pc, #208]	; (80018a8 <HAL_RCC_OscConfig+0x244>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017da:	f7ff f9c3 	bl	8000b64 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e2:	f7ff f9bf 	bl	8000b64 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e1a8      	b.n	8001b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f4:	4b2b      	ldr	r3, [pc, #172]	; (80018a4 <HAL_RCC_OscConfig+0x240>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0f0      	beq.n	80017e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001800:	4b28      	ldr	r3, [pc, #160]	; (80018a4 <HAL_RCC_OscConfig+0x240>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	4925      	ldr	r1, [pc, #148]	; (80018a4 <HAL_RCC_OscConfig+0x240>)
 8001810:	4313      	orrs	r3, r2
 8001812:	600b      	str	r3, [r1, #0]
 8001814:	e015      	b.n	8001842 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001816:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <HAL_RCC_OscConfig+0x244>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181c:	f7ff f9a2 	bl	8000b64 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001824:	f7ff f99e 	bl	8000b64 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e187      	b.n	8001b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001836:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <HAL_RCC_OscConfig+0x240>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0308 	and.w	r3, r3, #8
 800184a:	2b00      	cmp	r3, #0
 800184c:	d036      	beq.n	80018bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d016      	beq.n	8001884 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_RCC_OscConfig+0x248>)
 8001858:	2201      	movs	r2, #1
 800185a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185c:	f7ff f982 	bl	8000b64 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001864:	f7ff f97e 	bl	8000b64 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e167      	b.n	8001b46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001876:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <HAL_RCC_OscConfig+0x240>)
 8001878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0x200>
 8001882:	e01b      	b.n	80018bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_RCC_OscConfig+0x248>)
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188a:	f7ff f96b 	bl	8000b64 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001890:	e00e      	b.n	80018b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001892:	f7ff f967 	bl	8000b64 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d907      	bls.n	80018b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e150      	b.n	8001b46 <HAL_RCC_OscConfig+0x4e2>
 80018a4:	40023800 	.word	0x40023800
 80018a8:	42470000 	.word	0x42470000
 80018ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b0:	4b88      	ldr	r3, [pc, #544]	; (8001ad4 <HAL_RCC_OscConfig+0x470>)
 80018b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1ea      	bne.n	8001892 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 8097 	beq.w	80019f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ca:	2300      	movs	r3, #0
 80018cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ce:	4b81      	ldr	r3, [pc, #516]	; (8001ad4 <HAL_RCC_OscConfig+0x470>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10f      	bne.n	80018fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	4b7d      	ldr	r3, [pc, #500]	; (8001ad4 <HAL_RCC_OscConfig+0x470>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	4a7c      	ldr	r2, [pc, #496]	; (8001ad4 <HAL_RCC_OscConfig+0x470>)
 80018e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ea:	4b7a      	ldr	r3, [pc, #488]	; (8001ad4 <HAL_RCC_OscConfig+0x470>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018f6:	2301      	movs	r3, #1
 80018f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fa:	4b77      	ldr	r3, [pc, #476]	; (8001ad8 <HAL_RCC_OscConfig+0x474>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001902:	2b00      	cmp	r3, #0
 8001904:	d118      	bne.n	8001938 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001906:	4b74      	ldr	r3, [pc, #464]	; (8001ad8 <HAL_RCC_OscConfig+0x474>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a73      	ldr	r2, [pc, #460]	; (8001ad8 <HAL_RCC_OscConfig+0x474>)
 800190c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001912:	f7ff f927 	bl	8000b64 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800191a:	f7ff f923 	bl	8000b64 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e10c      	b.n	8001b46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192c:	4b6a      	ldr	r3, [pc, #424]	; (8001ad8 <HAL_RCC_OscConfig+0x474>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0f0      	beq.n	800191a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d106      	bne.n	800194e <HAL_RCC_OscConfig+0x2ea>
 8001940:	4b64      	ldr	r3, [pc, #400]	; (8001ad4 <HAL_RCC_OscConfig+0x470>)
 8001942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001944:	4a63      	ldr	r2, [pc, #396]	; (8001ad4 <HAL_RCC_OscConfig+0x470>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6713      	str	r3, [r2, #112]	; 0x70
 800194c:	e01c      	b.n	8001988 <HAL_RCC_OscConfig+0x324>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2b05      	cmp	r3, #5
 8001954:	d10c      	bne.n	8001970 <HAL_RCC_OscConfig+0x30c>
 8001956:	4b5f      	ldr	r3, [pc, #380]	; (8001ad4 <HAL_RCC_OscConfig+0x470>)
 8001958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195a:	4a5e      	ldr	r2, [pc, #376]	; (8001ad4 <HAL_RCC_OscConfig+0x470>)
 800195c:	f043 0304 	orr.w	r3, r3, #4
 8001960:	6713      	str	r3, [r2, #112]	; 0x70
 8001962:	4b5c      	ldr	r3, [pc, #368]	; (8001ad4 <HAL_RCC_OscConfig+0x470>)
 8001964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001966:	4a5b      	ldr	r2, [pc, #364]	; (8001ad4 <HAL_RCC_OscConfig+0x470>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6713      	str	r3, [r2, #112]	; 0x70
 800196e:	e00b      	b.n	8001988 <HAL_RCC_OscConfig+0x324>
 8001970:	4b58      	ldr	r3, [pc, #352]	; (8001ad4 <HAL_RCC_OscConfig+0x470>)
 8001972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001974:	4a57      	ldr	r2, [pc, #348]	; (8001ad4 <HAL_RCC_OscConfig+0x470>)
 8001976:	f023 0301 	bic.w	r3, r3, #1
 800197a:	6713      	str	r3, [r2, #112]	; 0x70
 800197c:	4b55      	ldr	r3, [pc, #340]	; (8001ad4 <HAL_RCC_OscConfig+0x470>)
 800197e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001980:	4a54      	ldr	r2, [pc, #336]	; (8001ad4 <HAL_RCC_OscConfig+0x470>)
 8001982:	f023 0304 	bic.w	r3, r3, #4
 8001986:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d015      	beq.n	80019bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001990:	f7ff f8e8 	bl	8000b64 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001996:	e00a      	b.n	80019ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001998:	f7ff f8e4 	bl	8000b64 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e0cb      	b.n	8001b46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ae:	4b49      	ldr	r3, [pc, #292]	; (8001ad4 <HAL_RCC_OscConfig+0x470>)
 80019b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0ee      	beq.n	8001998 <HAL_RCC_OscConfig+0x334>
 80019ba:	e014      	b.n	80019e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019bc:	f7ff f8d2 	bl	8000b64 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c2:	e00a      	b.n	80019da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c4:	f7ff f8ce 	bl	8000b64 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e0b5      	b.n	8001b46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019da:	4b3e      	ldr	r3, [pc, #248]	; (8001ad4 <HAL_RCC_OscConfig+0x470>)
 80019dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1ee      	bne.n	80019c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019e6:	7dfb      	ldrb	r3, [r7, #23]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d105      	bne.n	80019f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ec:	4b39      	ldr	r3, [pc, #228]	; (8001ad4 <HAL_RCC_OscConfig+0x470>)
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	4a38      	ldr	r2, [pc, #224]	; (8001ad4 <HAL_RCC_OscConfig+0x470>)
 80019f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f000 80a1 	beq.w	8001b44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a02:	4b34      	ldr	r3, [pc, #208]	; (8001ad4 <HAL_RCC_OscConfig+0x470>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 030c 	and.w	r3, r3, #12
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d05c      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d141      	bne.n	8001a9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a16:	4b31      	ldr	r3, [pc, #196]	; (8001adc <HAL_RCC_OscConfig+0x478>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1c:	f7ff f8a2 	bl	8000b64 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a24:	f7ff f89e 	bl	8000b64 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e087      	b.n	8001b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a36:	4b27      	ldr	r3, [pc, #156]	; (8001ad4 <HAL_RCC_OscConfig+0x470>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69da      	ldr	r2, [r3, #28]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	019b      	lsls	r3, r3, #6
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a58:	085b      	lsrs	r3, r3, #1
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	041b      	lsls	r3, r3, #16
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a64:	061b      	lsls	r3, r3, #24
 8001a66:	491b      	ldr	r1, [pc, #108]	; (8001ad4 <HAL_RCC_OscConfig+0x470>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <HAL_RCC_OscConfig+0x478>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a72:	f7ff f877 	bl	8000b64 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a7a:	f7ff f873 	bl	8000b64 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e05c      	b.n	8001b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <HAL_RCC_OscConfig+0x470>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x416>
 8001a98:	e054      	b.n	8001b44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <HAL_RCC_OscConfig+0x478>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7ff f860 	bl	8000b64 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa8:	f7ff f85c 	bl	8000b64 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e045      	b.n	8001b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_RCC_OscConfig+0x470>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x444>
 8001ac6:	e03d      	b.n	8001b44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d107      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e038      	b.n	8001b46 <HAL_RCC_OscConfig+0x4e2>
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40007000 	.word	0x40007000
 8001adc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ae0:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <HAL_RCC_OscConfig+0x4ec>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d028      	beq.n	8001b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d121      	bne.n	8001b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d11a      	bne.n	8001b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b10:	4013      	ands	r3, r2
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d111      	bne.n	8001b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b26:	085b      	lsrs	r3, r3, #1
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d107      	bne.n	8001b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d001      	beq.n	8001b44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e000      	b.n	8001b46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800

08001b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e0cc      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b68:	4b68      	ldr	r3, [pc, #416]	; (8001d0c <HAL_RCC_ClockConfig+0x1b8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d90c      	bls.n	8001b90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b76:	4b65      	ldr	r3, [pc, #404]	; (8001d0c <HAL_RCC_ClockConfig+0x1b8>)
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7e:	4b63      	ldr	r3, [pc, #396]	; (8001d0c <HAL_RCC_ClockConfig+0x1b8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0b8      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d020      	beq.n	8001bde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ba8:	4b59      	ldr	r3, [pc, #356]	; (8001d10 <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	4a58      	ldr	r2, [pc, #352]	; (8001d10 <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0308 	and.w	r3, r3, #8
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d005      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bc0:	4b53      	ldr	r3, [pc, #332]	; (8001d10 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	4a52      	ldr	r2, [pc, #328]	; (8001d10 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bcc:	4b50      	ldr	r3, [pc, #320]	; (8001d10 <HAL_RCC_ClockConfig+0x1bc>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	494d      	ldr	r1, [pc, #308]	; (8001d10 <HAL_RCC_ClockConfig+0x1bc>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d044      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d107      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf2:	4b47      	ldr	r3, [pc, #284]	; (8001d10 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d119      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e07f      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d003      	beq.n	8001c12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d107      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c12:	4b3f      	ldr	r3, [pc, #252]	; (8001d10 <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d109      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e06f      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c22:	4b3b      	ldr	r3, [pc, #236]	; (8001d10 <HAL_RCC_ClockConfig+0x1bc>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e067      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c32:	4b37      	ldr	r3, [pc, #220]	; (8001d10 <HAL_RCC_ClockConfig+0x1bc>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f023 0203 	bic.w	r2, r3, #3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	4934      	ldr	r1, [pc, #208]	; (8001d10 <HAL_RCC_ClockConfig+0x1bc>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c44:	f7fe ff8e 	bl	8000b64 <HAL_GetTick>
 8001c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4a:	e00a      	b.n	8001c62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c4c:	f7fe ff8a 	bl	8000b64 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e04f      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c62:	4b2b      	ldr	r3, [pc, #172]	; (8001d10 <HAL_RCC_ClockConfig+0x1bc>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 020c 	and.w	r2, r3, #12
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d1eb      	bne.n	8001c4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c74:	4b25      	ldr	r3, [pc, #148]	; (8001d0c <HAL_RCC_ClockConfig+0x1b8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d20c      	bcs.n	8001c9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c82:	4b22      	ldr	r3, [pc, #136]	; (8001d0c <HAL_RCC_ClockConfig+0x1b8>)
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8a:	4b20      	ldr	r3, [pc, #128]	; (8001d0c <HAL_RCC_ClockConfig+0x1b8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d001      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e032      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d008      	beq.n	8001cba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <HAL_RCC_ClockConfig+0x1bc>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	4916      	ldr	r1, [pc, #88]	; (8001d10 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d009      	beq.n	8001cda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cc6:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	490e      	ldr	r1, [pc, #56]	; (8001d10 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cda:	f000 f821 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	091b      	lsrs	r3, r3, #4
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	490a      	ldr	r1, [pc, #40]	; (8001d14 <HAL_RCC_ClockConfig+0x1c0>)
 8001cec:	5ccb      	ldrb	r3, [r1, r3]
 8001cee:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf2:	4a09      	ldr	r2, [pc, #36]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_RCC_ClockConfig+0x1c8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe feee 	bl	8000adc <HAL_InitTick>

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40023c00 	.word	0x40023c00
 8001d10:	40023800 	.word	0x40023800
 8001d14:	08005ec8 	.word	0x08005ec8
 8001d18:	20000000 	.word	0x20000000
 8001d1c:	20000004 	.word	0x20000004

08001d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d24:	b094      	sub	sp, #80	; 0x50
 8001d26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d30:	2300      	movs	r3, #0
 8001d32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d38:	4b79      	ldr	r3, [pc, #484]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 030c 	and.w	r3, r3, #12
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d00d      	beq.n	8001d60 <HAL_RCC_GetSysClockFreq+0x40>
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	f200 80e1 	bhi.w	8001f0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d002      	beq.n	8001d54 <HAL_RCC_GetSysClockFreq+0x34>
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d003      	beq.n	8001d5a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d52:	e0db      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d54:	4b73      	ldr	r3, [pc, #460]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d56:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001d58:	e0db      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d5a:	4b73      	ldr	r3, [pc, #460]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d5e:	e0d8      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d60:	4b6f      	ldr	r3, [pc, #444]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d68:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d6a:	4b6d      	ldr	r3, [pc, #436]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d063      	beq.n	8001e3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d76:	4b6a      	ldr	r3, [pc, #424]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	099b      	lsrs	r3, r3, #6
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d88:	633b      	str	r3, [r7, #48]	; 0x30
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d92:	4622      	mov	r2, r4
 8001d94:	462b      	mov	r3, r5
 8001d96:	f04f 0000 	mov.w	r0, #0
 8001d9a:	f04f 0100 	mov.w	r1, #0
 8001d9e:	0159      	lsls	r1, r3, #5
 8001da0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001da4:	0150      	lsls	r0, r2, #5
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4621      	mov	r1, r4
 8001dac:	1a51      	subs	r1, r2, r1
 8001dae:	6139      	str	r1, [r7, #16]
 8001db0:	4629      	mov	r1, r5
 8001db2:	eb63 0301 	sbc.w	r3, r3, r1
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001dc4:	4659      	mov	r1, fp
 8001dc6:	018b      	lsls	r3, r1, #6
 8001dc8:	4651      	mov	r1, sl
 8001dca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dce:	4651      	mov	r1, sl
 8001dd0:	018a      	lsls	r2, r1, #6
 8001dd2:	4651      	mov	r1, sl
 8001dd4:	ebb2 0801 	subs.w	r8, r2, r1
 8001dd8:	4659      	mov	r1, fp
 8001dda:	eb63 0901 	sbc.w	r9, r3, r1
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	f04f 0300 	mov.w	r3, #0
 8001de6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001df2:	4690      	mov	r8, r2
 8001df4:	4699      	mov	r9, r3
 8001df6:	4623      	mov	r3, r4
 8001df8:	eb18 0303 	adds.w	r3, r8, r3
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	462b      	mov	r3, r5
 8001e00:	eb49 0303 	adc.w	r3, r9, r3
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	f04f 0300 	mov.w	r3, #0
 8001e0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e12:	4629      	mov	r1, r5
 8001e14:	024b      	lsls	r3, r1, #9
 8001e16:	4621      	mov	r1, r4
 8001e18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e1c:	4621      	mov	r1, r4
 8001e1e:	024a      	lsls	r2, r1, #9
 8001e20:	4610      	mov	r0, r2
 8001e22:	4619      	mov	r1, r3
 8001e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e26:	2200      	movs	r2, #0
 8001e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e30:	f7fe f9d2 	bl	80001d8 <__aeabi_uldivmod>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4613      	mov	r3, r2
 8001e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e3c:	e058      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e3e:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	099b      	lsrs	r3, r3, #6
 8001e44:	2200      	movs	r2, #0
 8001e46:	4618      	mov	r0, r3
 8001e48:	4611      	mov	r1, r2
 8001e4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e4e:	623b      	str	r3, [r7, #32]
 8001e50:	2300      	movs	r3, #0
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
 8001e54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e58:	4642      	mov	r2, r8
 8001e5a:	464b      	mov	r3, r9
 8001e5c:	f04f 0000 	mov.w	r0, #0
 8001e60:	f04f 0100 	mov.w	r1, #0
 8001e64:	0159      	lsls	r1, r3, #5
 8001e66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e6a:	0150      	lsls	r0, r2, #5
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4641      	mov	r1, r8
 8001e72:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e76:	4649      	mov	r1, r9
 8001e78:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e7c:	f04f 0200 	mov.w	r2, #0
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e90:	ebb2 040a 	subs.w	r4, r2, sl
 8001e94:	eb63 050b 	sbc.w	r5, r3, fp
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	00eb      	lsls	r3, r5, #3
 8001ea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ea6:	00e2      	lsls	r2, r4, #3
 8001ea8:	4614      	mov	r4, r2
 8001eaa:	461d      	mov	r5, r3
 8001eac:	4643      	mov	r3, r8
 8001eae:	18e3      	adds	r3, r4, r3
 8001eb0:	603b      	str	r3, [r7, #0]
 8001eb2:	464b      	mov	r3, r9
 8001eb4:	eb45 0303 	adc.w	r3, r5, r3
 8001eb8:	607b      	str	r3, [r7, #4]
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	f04f 0300 	mov.w	r3, #0
 8001ec2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ec6:	4629      	mov	r1, r5
 8001ec8:	028b      	lsls	r3, r1, #10
 8001eca:	4621      	mov	r1, r4
 8001ecc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ed0:	4621      	mov	r1, r4
 8001ed2:	028a      	lsls	r2, r1, #10
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eda:	2200      	movs	r2, #0
 8001edc:	61bb      	str	r3, [r7, #24]
 8001ede:	61fa      	str	r2, [r7, #28]
 8001ee0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ee4:	f7fe f978 	bl	80001d8 <__aeabi_uldivmod>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4613      	mov	r3, r2
 8001eee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	0c1b      	lsrs	r3, r3, #16
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	3301      	adds	r3, #1
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001f00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f0a:	e002      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f0c:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3750      	adds	r7, #80	; 0x50
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800
 8001f24:	00f42400 	.word	0x00f42400
 8001f28:	007a1200 	.word	0x007a1200

08001f2c <MX_FATFS_Init>:
/* USER CODE END PFP */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001f32:	af02      	add	r7, sp, #8
	/*## FatFS: Link the USER driver ###########################*/
	retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8001f34:	4912      	ldr	r1, [pc, #72]	; (8001f80 <MX_FATFS_Init+0x54>)
 8001f36:	4813      	ldr	r0, [pc, #76]	; (8001f84 <MX_FATFS_Init+0x58>)
 8001f38:	f003 fed4 	bl	8005ce4 <FATFS_LinkDriver>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	461a      	mov	r2, r3
 8001f40:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <MX_FATFS_Init+0x5c>)
 8001f42:	701a      	strb	r2, [r3, #0]

	/* USER CODE BEGIN Init */
	/* additional user code for init */
	BYTE buff[RECORD];       // Work area
	if (f_mkfs((TCHAR const*) USERPath, FM_ANY, 0, buff, sizeof buff) == FR_OK) // format the RAM as FatFs
 8001f44:	463b      	mov	r3, r7
 8001f46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f4a:	9200      	str	r2, [sp, #0]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2107      	movs	r1, #7
 8001f50:	480b      	ldr	r0, [pc, #44]	; (8001f80 <MX_FATFS_Init+0x54>)
 8001f52:	f003 fa4f 	bl	80053f4 <f_mkfs>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10a      	bne.n	8001f72 <MX_FATFS_Init+0x46>
		if (f_mount(&USERFatFS, (TCHAR const*) USERPath, 1) == FR_OK) { // registers filesystem object to FatFs
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	4908      	ldr	r1, [pc, #32]	; (8001f80 <MX_FATFS_Init+0x54>)
 8001f60:	480a      	ldr	r0, [pc, #40]	; (8001f8c <MX_FATFS_Init+0x60>)
 8001f62:	f002 fb5b 	bl	800461c <f_mount>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d102      	bne.n	8001f72 <MX_FATFS_Init+0x46>
			 Flash_Read_Init();
 8001f6c:	f000 f894 	bl	8002098 <Flash_Read_Init>
 8001f70:	e002      	b.n	8001f78 <MX_FATFS_Init+0x4c>
			 return;
			}

  FATFS_UnLinkDriver(USERPath);
 8001f72:	4803      	ldr	r0, [pc, #12]	; (8001f80 <MX_FATFS_Init+0x54>)
 8001f74:	f003 fefe 	bl	8005d74 <FATFS_UnLinkDriver>
  /* USER CODE END Init */
}
 8001f78:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	2000006c 	.word	0x2000006c
 8001f84:	20000014 	.word	0x20000014
 8001f88:	20000068 	.word	0x20000068
 8001f8c:	20000070 	.word	0x20000070

08001f90 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8001f94:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <Fat_Write>:

/* USER CODE BEGIN Application */

FRESULT Fat_Write(const char *filename, const uint8_t *write){
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
	FRESULT ret;
	if ((ret = Fat_Write_Init(filename, write)) == FR_OK)
 8001faa:	6839      	ldr	r1, [r7, #0]
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f811 	bl	8001fd4 <Fat_Write_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	73fb      	strb	r3, [r7, #15]
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d106      	bne.n	8001fca <Fat_Write+0x2a>
		if (Flash_Write() != HAL_OK) // saves the data in flash as well
 8001fbc:	f000 fa4a 	bl	8002454 <Flash_Write>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <Fat_Write+0x2a>
			ret = FR_DISK_ERR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	73fb      	strb	r3, [r7, #15]
	return ret;
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <Fat_Write_Init>:

FRESULT Fat_Write_Init(const char *filename, const uint8_t *write){
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
	FRESULT ret;
	DWORD free_clusters;  // Number of free clusters
	uint32_t wbytes;     // File write counts
	if ( (ret = f_getfree((TCHAR const*) USERPath, &free_clusters, &fat_ptr))
 8001fde:	f107 0310 	add.w	r3, r7, #16
 8001fe2:	4a14      	ldr	r2, [pc, #80]	; (8002034 <Fat_Write_Init+0x60>)
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4814      	ldr	r0, [pc, #80]	; (8002038 <Fat_Write_Init+0x64>)
 8001fe8:	f003 f94e 	bl	8005288 <f_getfree>
 8001fec:	4603      	mov	r3, r0
 8001fee:	75fb      	strb	r3, [r7, #23]
 8001ff0:	7dfb      	ldrb	r3, [r7, #23]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d116      	bne.n	8002024 <Fat_Write_Init+0x50>
			== FR_OK)
		if ( (ret = f_open(&USERFile, filename, FA_CREATE_ALWAYS | FA_WRITE)) == FR_OK
 8001ff6:	220a      	movs	r2, #10
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	4810      	ldr	r0, [pc, #64]	; (800203c <Fat_Write_Init+0x68>)
 8001ffc:	f002 fb54 	bl	80046a8 <f_open>
 8002000:	4603      	mov	r3, r0
 8002002:	75fb      	strb	r3, [r7, #23]
 8002004:	7dfb      	ldrb	r3, [r7, #23]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10c      	bne.n	8002024 <Fat_Write_Init+0x50>
				&& free_clusters)
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d009      	beq.n	8002024 <Fat_Write_Init+0x50>
			if ( (ret = f_write(&USERFile,(const void *) write, RECORD, (void*) &wbytes))
 8002010:	f107 030c 	add.w	r3, r7, #12
 8002014:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002018:	6839      	ldr	r1, [r7, #0]
 800201a:	4808      	ldr	r0, [pc, #32]	; (800203c <Fat_Write_Init+0x68>)
 800201c:	f002 fe41 	bl	8004ca2 <f_write>
 8002020:	4603      	mov	r3, r0
 8002022:	75fb      	strb	r3, [r7, #23]
					== FR_OK) {}
	f_close(&USERFile);
 8002024:	4805      	ldr	r0, [pc, #20]	; (800203c <Fat_Write_Init+0x68>)
 8002026:	f003 f82f 	bl	8005088 <f_close>
	return ret;
 800202a:	7dfb      	ldrb	r3, [r7, #23]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	2000000c 	.word	0x2000000c
 8002038:	2000006c 	.word	0x2000006c
 800203c:	200002a0 	.word	0x200002a0

08002040 <Fat_Read>:

FRESULT Fat_Read(const char *filename, uint8_t *buff){
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
	FRESULT ret;
	uint32_t rbytes;     // File read counts
	if ((ret = f_open(&USERFile, filename, FA_OPEN_EXISTING | FA_READ))
 800204a:	2201      	movs	r2, #1
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	4811      	ldr	r0, [pc, #68]	; (8002094 <Fat_Read+0x54>)
 8002050:	f002 fb2a 	bl	80046a8 <f_open>
 8002054:	4603      	mov	r3, r0
 8002056:	73fb      	strb	r3, [r7, #15]
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d111      	bne.n	8002082 <Fat_Read+0x42>
			== FR_OK)
		if ((ret = (f_read(&USERFile, (void*) buff, RECORD, (void*) &rbytes)))
 800205e:	f107 0308 	add.w	r3, r7, #8
 8002062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002066:	6839      	ldr	r1, [r7, #0]
 8002068:	480a      	ldr	r0, [pc, #40]	; (8002094 <Fat_Read+0x54>)
 800206a:	f002 fcdb 	bl	8004a24 <f_read>
 800206e:	4603      	mov	r3, r0
 8002070:	73fb      	strb	r3, [r7, #15]
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d104      	bne.n	8002082 <Fat_Read+0x42>
				== FR_OK) {
			f_close(&USERFile);
 8002078:	4806      	ldr	r0, [pc, #24]	; (8002094 <Fat_Read+0x54>)
 800207a:	f003 f805 	bl	8005088 <f_close>
			return ret;
 800207e:	7bfb      	ldrb	r3, [r7, #15]
 8002080:	e003      	b.n	800208a <Fat_Read+0x4a>
		}
	f_close(&USERFile);
 8002082:	4804      	ldr	r0, [pc, #16]	; (8002094 <Fat_Read+0x54>)
 8002084:	f003 f800 	bl	8005088 <f_close>
	return ret;
 8002088:	7bfb      	ldrb	r3, [r7, #15]

}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200002a0 	.word	0x200002a0

08002098 <Flash_Read_Init>:

void Flash_Read_Init(){
 8002098:	b580      	push	{r7, lr}
 800209a:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4b4e      	ldr	r3, [pc, #312]	; (80021dc <Flash_Read_Init+0x144>)
 80020a2:	781a      	ldrb	r2, [r3, #0]
	char filename[13];
	uint8_t seqnum10;
	uint8_t seqnum11;
	uint32_t ACTIVE_SECTOR;

	memcpy(&seqnum11, (const void*) SEQUENCE_NUM_SECTOR_11, 1);
 80020a4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80020a8:	f2a3 2316 	subw	r3, r3, #534	; 0x216
 80020ac:	701a      	strb	r2, [r3, #0]
 80020ae:	4b4c      	ldr	r3, [pc, #304]	; (80021e0 <Flash_Read_Init+0x148>)
 80020b0:	781a      	ldrb	r2, [r3, #0]
	memcpy(&seqnum10, (const void*) SEQUENCE_NUM_SECTOR_10, 1);
 80020b2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80020b6:	f2a3 2315 	subw	r3, r3, #533	; 0x215
 80020ba:	701a      	strb	r2, [r3, #0]
	// deciding which sector is active
	if ((seqnum11 > seqnum10)
 80020bc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80020c0:	f2a3 2316 	subw	r3, r3, #534	; 0x216
 80020c4:	781a      	ldrb	r2, [r3, #0]
 80020c6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80020ca:	f2a3 2315 	subw	r3, r3, #533	; 0x215
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d819      	bhi.n	8002108 <Flash_Read_Init+0x70>
			|| ((seqnum11 < seqnum10) && (seqnum10 - seqnum11 == 255))) // or it's ...255->0
 80020d4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80020d8:	f2a3 2316 	subw	r3, r3, #534	; 0x216
 80020dc:	781a      	ldrb	r2, [r3, #0]
 80020de:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80020e2:	f2a3 2315 	subw	r3, r3, #533	; 0x215
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d214      	bcs.n	8002116 <Flash_Read_Init+0x7e>
 80020ec:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80020f0:	f2a3 2315 	subw	r3, r3, #533	; 0x215
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80020fc:	f2a3 2316 	subw	r3, r3, #534	; 0x216
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2bff      	cmp	r3, #255	; 0xff
 8002106:	d106      	bne.n	8002116 <Flash_Read_Init+0x7e>
		ACTIVE_SECTOR = SECTOR_11; // sector 11 is currently active
 8002108:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800210c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002110:	4a34      	ldr	r2, [pc, #208]	; (80021e4 <Flash_Read_Init+0x14c>)
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	e005      	b.n	8002122 <Flash_Read_Init+0x8a>
	else
		ACTIVE_SECTOR = SECTOR_10; // sector 10 is currently active
 8002116:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800211a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800211e:	4a32      	ldr	r2, [pc, #200]	; (80021e8 <Flash_Read_Init+0x150>)
 8002120:	601a      	str	r2, [r3, #0]

	// verifying the validity of the active sector
	if(Verify_Sector(&seqnum10, &seqnum11, &ACTIVE_SECTOR, buff) != HAL_OK)
 8002122:	f107 031c 	add.w	r3, r7, #28
 8002126:	1d3a      	adds	r2, r7, #4
 8002128:	f107 010a 	add.w	r1, r7, #10
 800212c:	f107 000b 	add.w	r0, r7, #11
 8002130:	f000 f898 	bl	8002264 <Verify_Sector>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d147      	bne.n	80021ca <Flash_Read_Init+0x132>
		return;

	for (uint32_t i = 0; i < 192; i++) { // copy the whole Flash to FatFs
 800213a:	2300      	movs	r3, #0
 800213c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8002140:	e03e      	b.n	80021c0 <Flash_Read_Init+0x128>
		memcpy(buff, (const void*) (ACTIVE_SECTOR + (i * RECORD)), RECORD); // load records from Flash to buffer, one record is 512 byte
 8002142:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002146:	025a      	lsls	r2, r3, #9
 8002148:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800214c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4413      	add	r3, r2
 8002154:	461a      	mov	r2, r3
 8002156:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800215a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800215e:	4618      	mov	r0, r3
 8002160:	4611      	mov	r1, r2
 8002162:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002166:	461a      	mov	r2, r3
 8002168:	f003 fe3e 	bl	8005de8 <memcpy>
		if (Validate_Record(buff, filename) != 1) // everything from flash has been moved to FatFs
 800216c:	f107 020c 	add.w	r2, r7, #12
 8002170:	f107 031c 	add.w	r3, r7, #28
 8002174:	4611      	mov	r1, r2
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f83a 	bl	80021f0 <Validate_Record>
 800217c:	4603      	mov	r3, r0
 800217e:	2b01      	cmp	r3, #1
 8002180:	d125      	bne.n	80021ce <Flash_Read_Init+0x136>
			break;
		if (Fat_Write_Init((strcat(filename, ".txt")), (const uint8_t*) buff) != FR_OK)
 8002182:	f107 030c 	add.w	r3, r7, #12
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe f81e 	bl	80001c8 <strlen>
 800218c:	4603      	mov	r3, r0
 800218e:	461a      	mov	r2, r3
 8002190:	f107 030c 	add.w	r3, r7, #12
 8002194:	4413      	add	r3, r2
 8002196:	4a15      	ldr	r2, [pc, #84]	; (80021ec <Flash_Read_Init+0x154>)
 8002198:	6810      	ldr	r0, [r2, #0]
 800219a:	6018      	str	r0, [r3, #0]
 800219c:	7912      	ldrb	r2, [r2, #4]
 800219e:	711a      	strb	r2, [r3, #4]
 80021a0:	f107 030c 	add.w	r3, r7, #12
 80021a4:	f107 021c 	add.w	r2, r7, #28
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff ff12 	bl	8001fd4 <Fat_Write_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10d      	bne.n	80021d2 <Flash_Read_Init+0x13a>
	for (uint32_t i = 0; i < 192; i++) { // copy the whole Flash to FatFs
 80021b6:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80021ba:	3301      	adds	r3, #1
 80021bc:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80021c0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80021c4:	2bbf      	cmp	r3, #191	; 0xbf
 80021c6:	d9bc      	bls.n	8002142 <Flash_Read_Init+0xaa>
 80021c8:	e004      	b.n	80021d4 <Flash_Read_Init+0x13c>
		return;
 80021ca:	bf00      	nop
 80021cc:	e002      	b.n	80021d4 <Flash_Read_Init+0x13c>
			break;
 80021ce:	bf00      	nop
 80021d0:	e000      	b.n	80021d4 <Flash_Read_Init+0x13c>
			break;
 80021d2:	bf00      	nop
	}

}
 80021d4:	f507 7708 	add.w	r7, r7, #544	; 0x220
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	080a0000 	.word	0x080a0000
 80021e0:	08080000 	.word	0x08080000
 80021e4:	080e0000 	.word	0x080e0000
 80021e8:	080c0000 	.word	0x080c0000
 80021ec:	08005e7c 	.word	0x08005e7c

080021f0 <Validate_Record>:

uint8_t Validate_Record(uint8_t *buff, char *filename){
 80021f0:	b480      	push	{r7}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
	uint8_t name_char = 0;     // move the filename from buff
 80021fa:	2300      	movs	r3, #0
 80021fc:	75fb      	strb	r3, [r7, #23]
	uint8_t valid = 1;
 80021fe:	2301      	movs	r3, #1
 8002200:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 13; i++) { // clear the filename
 8002202:	2300      	movs	r3, #0
 8002204:	75bb      	strb	r3, [r7, #22]
 8002206:	e007      	b.n	8002218 <Validate_Record+0x28>
				filename[i] = '\0';
 8002208:	7dbb      	ldrb	r3, [r7, #22]
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	4413      	add	r3, r2
 800220e:	2200      	movs	r2, #0
 8002210:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 13; i++) { // clear the filename
 8002212:	7dbb      	ldrb	r3, [r7, #22]
 8002214:	3301      	adds	r3, #1
 8002216:	75bb      	strb	r3, [r7, #22]
 8002218:	7dbb      	ldrb	r3, [r7, #22]
 800221a:	2b0c      	cmp	r3, #12
 800221c:	d9f4      	bls.n	8002208 <Validate_Record+0x18>
			}
	for (uint8_t *c = buff; *c != '.'; c++) { // record starts with filename, after the name comes a '.' character
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	e014      	b.n	800224e <Validate_Record+0x5e>
		filename[name_char] = buff[name_char];
 8002224:	7dfb      	ldrb	r3, [r7, #23]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	441a      	add	r2, r3
 800222a:	7dfb      	ldrb	r3, [r7, #23]
 800222c:	6839      	ldr	r1, [r7, #0]
 800222e:	440b      	add	r3, r1
 8002230:	7812      	ldrb	r2, [r2, #0]
 8002232:	701a      	strb	r2, [r3, #0]
		name_char++;
 8002234:	7dfb      	ldrb	r3, [r7, #23]
 8002236:	3301      	adds	r3, #1
 8002238:	75fb      	strb	r3, [r7, #23]
		if (name_char == 13){ // if we didn't find the name at the start of the record, there are no more records
 800223a:	7dfb      	ldrb	r3, [r7, #23]
 800223c:	2b0d      	cmp	r3, #13
 800223e:	d103      	bne.n	8002248 <Validate_Record+0x58>
			valid = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	73fb      	strb	r3, [r7, #15]
			return valid;
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	e007      	b.n	8002258 <Validate_Record+0x68>
	for (uint8_t *c = buff; *c != '.'; c++) { // record starts with filename, after the name comes a '.' character
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	3301      	adds	r3, #1
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b2e      	cmp	r3, #46	; 0x2e
 8002254:	d1e6      	bne.n	8002224 <Validate_Record+0x34>
		}
	}
	return valid;
 8002256:	7bfb      	ldrb	r3, [r7, #15]
}
 8002258:	4618      	mov	r0, r3
 800225a:	371c      	adds	r7, #28
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <Verify_Sector>:

HAL_StatusTypeDef Verify_Sector(uint8_t *seqnum10, uint8_t *seqnum11, uint32_t *ACTIVE_SECTOR, uint8_t *buff){
 8002264:	b580      	push	{r7, lr}
 8002266:	b08c      	sub	sp, #48	; 0x30
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	603b      	str	r3, [r7, #0]
	uint8_t checksum;
	uint8_t verificationsum = 0xFF;
 8002272:	23ff      	movs	r3, #255	; 0xff
 8002274:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	char filename[13];

	if (*ACTIVE_SECTOR == SECTOR_11){
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a49      	ldr	r2, [pc, #292]	; (80023a4 <Verify_Sector+0x140>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d10b      	bne.n	800229a <Verify_Sector+0x36>
 8002282:	4b49      	ldr	r3, [pc, #292]	; (80023a8 <Verify_Sector+0x144>)
 8002284:	781b      	ldrb	r3, [r3, #0]
		memcpy(&checksum, (const void*) CHECKSUM_SECTOR_11, 1); // reading the checksum
 8002286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		verificationsum ^= *seqnum11;                           // starting the calculation of the verification sum
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	781a      	ldrb	r2, [r3, #0]
 800228e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002292:	4053      	eors	r3, r2
 8002294:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002298:	e00f      	b.n	80022ba <Verify_Sector+0x56>
	}
	else if (*ACTIVE_SECTOR == SECTOR_10){
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a43      	ldr	r2, [pc, #268]	; (80023ac <Verify_Sector+0x148>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d10a      	bne.n	80022ba <Verify_Sector+0x56>
 80022a4:	4b42      	ldr	r3, [pc, #264]	; (80023b0 <Verify_Sector+0x14c>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
		memcpy(&checksum, (const void*) CHECKSUM_SECTOR_10, 1);
 80022a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		verificationsum ^= *seqnum10;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	781a      	ldrb	r2, [r3, #0]
 80022b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022b4:	4053      	eors	r3, r2
 80022b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	for (uint32_t i = 0; i < 192; i++) {
 80022ba:	2300      	movs	r3, #0
 80022bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80022be:	e029      	b.n	8002314 <Verify_Sector+0xb0>
		memcpy(buff, (const void*) (*ACTIVE_SECTOR + (i * RECORD)), RECORD); // load records from Flash to buffer, one record is 512 byte
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c6:	025b      	lsls	r3, r3, #9
 80022c8:	4413      	add	r3, r2
 80022ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ce:	4619      	mov	r1, r3
 80022d0:	6838      	ldr	r0, [r7, #0]
 80022d2:	f003 fd89 	bl	8005de8 <memcpy>
		if (Validate_Record(buff, filename) != 1) // everything from flash has been moved to FatFs
 80022d6:	f107 0314 	add.w	r3, r7, #20
 80022da:	4619      	mov	r1, r3
 80022dc:	6838      	ldr	r0, [r7, #0]
 80022de:	f7ff ff87 	bl	80021f0 <Validate_Record>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d119      	bne.n	800231c <Verify_Sector+0xb8>
			break;
		for (uint32_t j = 0; j < RECORD; j++) {
 80022e8:	2300      	movs	r3, #0
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24
 80022ec:	e00b      	b.n	8002306 <Verify_Sector+0xa2>
			verificationsum ^= buff[j];
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	4413      	add	r3, r2
 80022f4:	781a      	ldrb	r2, [r3, #0]
 80022f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022fa:	4053      	eors	r3, r2
 80022fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (uint32_t j = 0; j < RECORD; j++) {
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	3301      	adds	r3, #1
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800230c:	d3ef      	bcc.n	80022ee <Verify_Sector+0x8a>
	for (uint32_t i = 0; i < 192; i++) {
 800230e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002310:	3301      	adds	r3, #1
 8002312:	62bb      	str	r3, [r7, #40]	; 0x28
 8002314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002316:	2bbf      	cmp	r3, #191	; 0xbf
 8002318:	d9d2      	bls.n	80022c0 <Verify_Sector+0x5c>
 800231a:	e000      	b.n	800231e <Verify_Sector+0xba>
			break;
 800231c:	bf00      	nop
		}
	}

	if (checksum != verificationsum) {     // if the checksum doesn't match
 800231e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002322:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002326:	429a      	cmp	r2, r3
 8002328:	d037      	beq.n	800239a <Verify_Sector+0x136>
		if (*ACTIVE_SECTOR == SECTOR_11) {
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a1d      	ldr	r2, [pc, #116]	; (80023a4 <Verify_Sector+0x140>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d116      	bne.n	8002362 <Verify_Sector+0xfe>
			*ACTIVE_SECTOR = SECTOR_10;    // the other sector is active
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a1d      	ldr	r2, [pc, #116]	; (80023ac <Verify_Sector+0x148>)
 8002338:	601a      	str	r2, [r3, #0]
			if (HAL_FLASH_Unlock() != HAL_OK) { return RES_ERROR; }
 800233a:	f7fe fd59 	bl	8000df0 <HAL_FLASH_Unlock>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <Verify_Sector+0xe4>
 8002344:	2301      	movs	r3, #1
 8002346:	e029      	b.n	800239c <Verify_Sector+0x138>
			if (Write_Seqnum(11, (*seqnum10)-1) != HAL_OK) // correcting the sequence numbers to be adjacent
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	3b01      	subs	r3, #1
 800234e:	b2db      	uxtb	r3, r3
 8002350:	4619      	mov	r1, r3
 8002352:	200b      	movs	r0, #11
 8002354:	f000 f82e 	bl	80023b4 <Write_Seqnum>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d01d      	beq.n	800239a <Verify_Sector+0x136>
				return RES_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e01c      	b.n	800239c <Verify_Sector+0x138>

		} else if (*ACTIVE_SECTOR == SECTOR_10) {
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a11      	ldr	r2, [pc, #68]	; (80023ac <Verify_Sector+0x148>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d116      	bne.n	800239a <Verify_Sector+0x136>
			*ACTIVE_SECTOR = SECTOR_11;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a0d      	ldr	r2, [pc, #52]	; (80023a4 <Verify_Sector+0x140>)
 8002370:	601a      	str	r2, [r3, #0]
			if (HAL_FLASH_Unlock() != HAL_OK) { return RES_ERROR; }
 8002372:	f7fe fd3d 	bl	8000df0 <HAL_FLASH_Unlock>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <Verify_Sector+0x11c>
 800237c:	2301      	movs	r3, #1
 800237e:	e00d      	b.n	800239c <Verify_Sector+0x138>
			if (Write_Seqnum(10, (*seqnum11)-1) != HAL_OK) // correcting the sequence numbers to be adjacent
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	3b01      	subs	r3, #1
 8002386:	b2db      	uxtb	r3, r3
 8002388:	4619      	mov	r1, r3
 800238a:	200a      	movs	r0, #10
 800238c:	f000 f812 	bl	80023b4 <Write_Seqnum>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <Verify_Sector+0x136>
				return RES_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <Verify_Sector+0x138>
		}
	}
	return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3730      	adds	r7, #48	; 0x30
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	080e0000 	.word	0x080e0000
 80023a8:	080f8000 	.word	0x080f8000
 80023ac:	080c0000 	.word	0x080c0000
 80023b0:	080d8000 	.word	0x080d8000

080023b4 <Write_Seqnum>:

HAL_StatusTypeDef Write_Seqnum(uint8_t seqnum, uint8_t value){
 80023b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023b8:	b08a      	sub	sp, #40	; 0x28
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	4603      	mov	r3, r0
 80023be:	460a      	mov	r2, r1
 80023c0:	71fb      	strb	r3, [r7, #7]
 80023c2:	4613      	mov	r3, r2
 80023c4:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;

	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SectorError;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
	EraseInitStruct.NbSectors = 1;
 80023ca:	2301      	movs	r3, #1
 80023cc:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80023ce:	2302      	movs	r3, #2
 80023d0:	623b      	str	r3, [r7, #32]
	EraseInitStruct.Banks = FLASH_BANK_1;
 80023d2:	2301      	movs	r3, #1
 80023d4:	617b      	str	r3, [r7, #20]

	if(seqnum == 11)
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	2b0b      	cmp	r3, #11
 80023da:	d102      	bne.n	80023e2 <Write_Seqnum+0x2e>
		EraseInitStruct.Sector = FLASH_SECTOR_9; // erase the sector where seqnum11 is stored
 80023dc:	2309      	movs	r3, #9
 80023de:	61bb      	str	r3, [r7, #24]
 80023e0:	e001      	b.n	80023e6 <Write_Seqnum+0x32>
	else
		EraseInitStruct.Sector = FLASH_SECTOR_8; // where seqnum10 is stored
 80023e2:	2308      	movs	r3, #8
 80023e4:	61bb      	str	r3, [r7, #24]

	ret = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 80023e6:	f107 020c 	add.w	r2, r7, #12
 80023ea:	f107 0310 	add.w	r3, r7, #16
 80023ee:	4611      	mov	r1, r2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fe fe5f 	bl	80010b4 <HAL_FLASHEx_Erase>
 80023f6:	4603      	mov	r3, r0
 80023f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (seqnum == 11)
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	2b0b      	cmp	r3, #11
 8002400:	d10d      	bne.n	800241e <Write_Seqnum+0x6a>
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, SEQUENCE_NUM_SECTOR_11,
 8002402:	79bb      	ldrb	r3, [r7, #6]
 8002404:	2200      	movs	r2, #0
 8002406:	4698      	mov	r8, r3
 8002408:	4691      	mov	r9, r2
 800240a:	4642      	mov	r2, r8
 800240c:	464b      	mov	r3, r9
 800240e:	490f      	ldr	r1, [pc, #60]	; (800244c <Write_Seqnum+0x98>)
 8002410:	2000      	movs	r0, #0
 8002412:	f7fe fc99 	bl	8000d48 <HAL_FLASH_Program>
 8002416:	4603      	mov	r3, r0
 8002418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800241c:	e00c      	b.n	8002438 <Write_Seqnum+0x84>
				value);   // lastly set the sector value
	else
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, SEQUENCE_NUM_SECTOR_10,
 800241e:	79bb      	ldrb	r3, [r7, #6]
 8002420:	2200      	movs	r2, #0
 8002422:	461c      	mov	r4, r3
 8002424:	4615      	mov	r5, r2
 8002426:	4622      	mov	r2, r4
 8002428:	462b      	mov	r3, r5
 800242a:	4909      	ldr	r1, [pc, #36]	; (8002450 <Write_Seqnum+0x9c>)
 800242c:	2000      	movs	r0, #0
 800242e:	f7fe fc8b 	bl	8000d48 <HAL_FLASH_Program>
 8002432:	4603      	mov	r3, r0
 8002434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				value);

	HAL_FLASH_Lock();
 8002438:	f7fe fcfc 	bl	8000e34 <HAL_FLASH_Lock>
	return ret;
 800243c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002440:	4618      	mov	r0, r3
 8002442:	3728      	adds	r7, #40	; 0x28
 8002444:	46bd      	mov	sp, r7
 8002446:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800244a:	bf00      	nop
 800244c:	080a0000 	.word	0x080a0000
 8002450:	08080000 	.word	0x08080000

08002454 <Flash_Write>:

HAL_StatusTypeDef Flash_Write() {
 8002454:	b580      	push	{r7, lr}
 8002456:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800245a:	af00      	add	r7, sp, #0
	uint8_t sector[RECORD] = {0};
 800245c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002460:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	3304      	adds	r3, #4
 800246a:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 800246e:	2100      	movs	r1, #0
 8002470:	4618      	mov	r0, r3
 8002472:	f003 fc8c 	bl	8005d8e <memset>
	uint8_t seqnum10;
	uint8_t seqnum11;
	uint32_t ACTIVE_SECTOR;
	HAL_StatusTypeDef ret = HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
 800247c:	4b3d      	ldr	r3, [pc, #244]	; (8002574 <Flash_Write+0x120>)
 800247e:	781a      	ldrb	r2, [r3, #0]

	// deciding which sector to write first
	memcpy(&seqnum11, (const void*) SEQUENCE_NUM_SECTOR_11, 1);
 8002480:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002484:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8002488:	701a      	strb	r2, [r3, #0]
 800248a:	4b3b      	ldr	r3, [pc, #236]	; (8002578 <Flash_Write+0x124>)
 800248c:	781a      	ldrb	r2, [r3, #0]
	memcpy(&seqnum10, (const void*) SEQUENCE_NUM_SECTOR_10, 1);
 800248e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002492:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 8002496:	701a      	strb	r2, [r3, #0]
	// deciding which sector is active
	if ((seqnum11 > seqnum10)
 8002498:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800249c:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80024a0:	781a      	ldrb	r2, [r3, #0]
 80024a2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80024a6:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d819      	bhi.n	80024e4 <Flash_Write+0x90>
			|| ((seqnum11 < seqnum10) && (seqnum10 - seqnum11 == 255))) // or it's ...255->0
 80024b0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80024b4:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80024b8:	781a      	ldrb	r2, [r3, #0]
 80024ba:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80024be:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d211      	bcs.n	80024ec <Flash_Write+0x98>
 80024c8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80024cc:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80024d8:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2bff      	cmp	r3, #255	; 0xff
 80024e2:	d103      	bne.n	80024ec <Flash_Write+0x98>
		ACTIVE_SECTOR = SECTOR_11; // sector 11 is currently active
 80024e4:	4b25      	ldr	r3, [pc, #148]	; (800257c <Flash_Write+0x128>)
 80024e6:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80024ea:	e002      	b.n	80024f2 <Flash_Write+0x9e>
	else
		ACTIVE_SECTOR = SECTOR_10; // sector 10 is currently active
 80024ec:	4b24      	ldr	r3, [pc, #144]	; (8002580 <Flash_Write+0x12c>)
 80024ee:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c


	if (ACTIVE_SECTOR == SECTOR_11)
 80024f2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80024f6:	4a21      	ldr	r2, [pc, #132]	; (800257c <Flash_Write+0x128>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d117      	bne.n	800252c <Flash_Write+0xd8>
		if ((ret = Flash_Write_Sector10(sector, &seqnum10)) == HAL_OK) // if seqnum10 is older we write this sector first
 80024fc:	1dfa      	adds	r2, r7, #7
 80024fe:	f107 0308 	add.w	r3, r7, #8
 8002502:	4611      	mov	r1, r2
 8002504:	4618      	mov	r0, r3
 8002506:	f000 f83d 	bl	8002584 <Flash_Write_Sector10>
 800250a:	4603      	mov	r3, r0
 800250c:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
 8002510:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8002514:	2b00      	cmp	r3, #0
 8002516:	d109      	bne.n	800252c <Flash_Write+0xd8>
			ret = Flash_Write_Sector11(sector, &seqnum11);
 8002518:	1dba      	adds	r2, r7, #6
 800251a:	f107 0308 	add.w	r3, r7, #8
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f000 f90d 	bl	8002740 <Flash_Write_Sector11>
 8002526:	4603      	mov	r3, r0
 8002528:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
	if (ACTIVE_SECTOR == SECTOR_10)
 800252c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002530:	4a13      	ldr	r2, [pc, #76]	; (8002580 <Flash_Write+0x12c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d117      	bne.n	8002566 <Flash_Write+0x112>
		if ((ret = Flash_Write_Sector11(sector, &seqnum11)) == HAL_OK) // else sector11 is older
 8002536:	1dba      	adds	r2, r7, #6
 8002538:	f107 0308 	add.w	r3, r7, #8
 800253c:	4611      	mov	r1, r2
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f8fe 	bl	8002740 <Flash_Write_Sector11>
 8002544:	4603      	mov	r3, r0
 8002546:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
 800254a:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 800254e:	2b00      	cmp	r3, #0
 8002550:	d109      	bne.n	8002566 <Flash_Write+0x112>
			ret = Flash_Write_Sector10(sector, &seqnum10);
 8002552:	1dfa      	adds	r2, r7, #7
 8002554:	f107 0308 	add.w	r3, r7, #8
 8002558:	4611      	mov	r1, r2
 800255a:	4618      	mov	r0, r3
 800255c:	f000 f812 	bl	8002584 <Flash_Write_Sector10>
 8002560:	4603      	mov	r3, r0
 8002562:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b

	return ret;
 8002566:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
}
 800256a:	4618      	mov	r0, r3
 800256c:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	080a0000 	.word	0x080a0000
 8002578:	08080000 	.word	0x08080000
 800257c:	080e0000 	.word	0x080e0000
 8002580:	080c0000 	.word	0x080c0000

08002584 <Flash_Write_Sector10>:

HAL_StatusTypeDef Flash_Write_Sector10(uint8_t *sector, uint8_t *seqnum10) {
 8002584:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002588:	b09e      	sub	sp, #120	; 0x78
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;
	uint8_t checksum = 0xFF;
 8002590:	23ff      	movs	r3, #255	; 0xff
 8002592:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	FRESULT filestatus;
	DIR dir;
	FILINFO fileinfo;

	ret = HAL_FLASH_Unlock();
 8002596:	f7fe fc2b 	bl	8000df0 <HAL_FLASH_Unlock>
 800259a:	4603      	mov	r3, r0
 800259c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	if (ret != HAL_OK) { return RES_ERROR;}
 80025a0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <Flash_Write_Sector10+0x28>
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0bf      	b.n	800272c <Flash_Write_Sector10+0x1a8>
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SectorError;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.Sector = FLASH_SECTOR_10;
 80025b0:	230a      	movs	r3, #10
 80025b2:	617b      	str	r3, [r7, #20]
	EraseInitStruct.NbSectors = 1;                    //erase 1 sector(10)
 80025b4:	2301      	movs	r3, #1
 80025b6:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80025b8:	2302      	movs	r3, #2
 80025ba:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.Banks = FLASH_BANK_1;
 80025bc:	2301      	movs	r3, #1
 80025be:	613b      	str	r3, [r7, #16]
	ret = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 80025c0:	f107 0208 	add.w	r2, r7, #8
 80025c4:	f107 030c 	add.w	r3, r7, #12
 80025c8:	4611      	mov	r1, r2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fe fd72 	bl	80010b4 <HAL_FLASHEx_Erase>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

	filestatus = f_opendir(&dir, (TCHAR const*) USERPath); /* Open the directory */
 80025d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025da:	4957      	ldr	r1, [pc, #348]	; (8002738 <Flash_Write_Sector10+0x1b4>)
 80025dc:	4618      	mov	r0, r3
 80025de:	f002 fd7d 	bl	80050dc <f_opendir>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
	if (filestatus == FR_OK) {
 80025e8:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f040 8096 	bne.w	800271e <Flash_Write_Sector10+0x19a>
		for (uint32_t j = 0; j < 128; j++) {
 80025f2:	2300      	movs	r3, #0
 80025f4:	673b      	str	r3, [r7, #112]	; 0x70
 80025f6:	e058      	b.n	80026aa <Flash_Write_Sector10+0x126>

			filestatus = f_readdir(&dir, &fileinfo); /* Read a directory item */
 80025f8:	f107 0220 	add.w	r2, r7, #32
 80025fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002600:	4611      	mov	r1, r2
 8002602:	4618      	mov	r0, r3
 8002604:	f002 fe03 	bl	800520e <f_readdir>
 8002608:	4603      	mov	r3, r0
 800260a:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
			if (filestatus != FR_OK || fileinfo.fname[0] == 0)
 800260e:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8002612:	2b00      	cmp	r3, #0
 8002614:	d14e      	bne.n	80026b4 <Flash_Write_Sector10+0x130>
 8002616:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800261a:	2b00      	cmp	r3, #0
 800261c:	d04a      	beq.n	80026b4 <Flash_Write_Sector10+0x130>
				break; /* Break on error or end of dir */
			if (Fat_Read(fileinfo.fname, (void*) sector) != FR_OK)
 800261e:	f107 0320 	add.w	r3, r7, #32
 8002622:	3309      	adds	r3, #9
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fd0a 	bl	8002040 <Fat_Read>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d13f      	bne.n	80026b2 <Flash_Write_Sector10+0x12e>
				break;

			for (uint32_t i = 0; i < RECORD; i++) { //Write one record to the Flash, one cycle writes a byte, so 512 cycles for a whole record
 8002632:	2300      	movs	r3, #0
 8002634:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002636:	e031      	b.n	800269c <Flash_Write_Sector10+0x118>
				ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
						SECTOR_10 + i + (j * RECORD), sector[i]);
 8002638:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800263a:	025a      	lsls	r2, r3, #9
 800263c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800263e:	4413      	add	r3, r2
				ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 8002640:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8002644:	f501 2140 	add.w	r1, r1, #786432	; 0xc0000
						SECTOR_10 + i + (j * RECORD), sector[i]);
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800264c:	4413      	add	r3, r2
 800264e:	781b      	ldrb	r3, [r3, #0]
				ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2200      	movs	r2, #0
 8002654:	4698      	mov	r8, r3
 8002656:	4691      	mov	r9, r2
 8002658:	4642      	mov	r2, r8
 800265a:	464b      	mov	r3, r9
 800265c:	2000      	movs	r0, #0
 800265e:	f7fe fb73 	bl	8000d48 <HAL_FLASH_Program>
 8002662:	4603      	mov	r3, r0
 8002664:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
				if (ret != HAL_OK) {
 8002668:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800266c:	2b00      	cmp	r3, #0
 800266e:	d009      	beq.n	8002684 <Flash_Write_Sector10+0x100>
					HAL_FLASH_Lock();
 8002670:	f7fe fbe0 	bl	8000e34 <HAL_FLASH_Lock>
					f_closedir(&dir);
 8002674:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002678:	4618      	mov	r0, r3
 800267a:	f002 fda2 	bl	80051c2 <f_closedir>
					return ret;
 800267e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002682:	e053      	b.n	800272c <Flash_Write_Sector10+0x1a8>
				}
				checksum ^= sector[i];  // calculate the checksum
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002688:	4413      	add	r3, r2
 800268a:	781a      	ldrb	r2, [r3, #0]
 800268c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002690:	4053      	eors	r3, r2
 8002692:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			for (uint32_t i = 0; i < RECORD; i++) { //Write one record to the Flash, one cycle writes a byte, so 512 cycles for a whole record
 8002696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002698:	3301      	adds	r3, #1
 800269a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800269c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800269e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026a2:	d3c9      	bcc.n	8002638 <Flash_Write_Sector10+0xb4>
		for (uint32_t j = 0; j < 128; j++) {
 80026a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026a6:	3301      	adds	r3, #1
 80026a8:	673b      	str	r3, [r7, #112]	; 0x70
 80026aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026ac:	2b7f      	cmp	r3, #127	; 0x7f
 80026ae:	d9a3      	bls.n	80025f8 <Flash_Write_Sector10+0x74>
 80026b0:	e000      	b.n	80026b4 <Flash_Write_Sector10+0x130>
				break;
 80026b2:	bf00      	nop
			}
		}
		f_closedir(&dir);
 80026b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80026b8:	4618      	mov	r0, r3
 80026ba:	f002 fd82 	bl	80051c2 <f_closedir>

		*seqnum10 += 2;         // adding 2 makes this sector active
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	3302      	adds	r3, #2
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	701a      	strb	r2, [r3, #0]
		checksum ^= *seqnum10;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	781a      	ldrb	r2, [r3, #0]
 80026ce:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80026d2:	4053      	eors	r3, r2
 80026d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, CHECKSUM_SECTOR_10, checksum); // save the checksum
 80026d8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80026dc:	2200      	movs	r2, #0
 80026de:	461c      	mov	r4, r3
 80026e0:	4615      	mov	r5, r2
 80026e2:	4622      	mov	r2, r4
 80026e4:	462b      	mov	r3, r5
 80026e6:	4915      	ldr	r1, [pc, #84]	; (800273c <Flash_Write_Sector10+0x1b8>)
 80026e8:	2000      	movs	r0, #0
 80026ea:	f7fe fb2d 	bl	8000d48 <HAL_FLASH_Program>
 80026ee:	4603      	mov	r3, r0
 80026f0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		if (ret != HAL_OK) {
 80026f4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d004      	beq.n	8002706 <Flash_Write_Sector10+0x182>
			HAL_FLASH_Lock();
 80026fc:	f7fe fb9a 	bl	8000e34 <HAL_FLASH_Lock>
			return ret;
 8002700:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002704:	e012      	b.n	800272c <Flash_Write_Sector10+0x1a8>
		}
		ret = Write_Seqnum(10, *seqnum10);   // lastly set this sector active
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	4619      	mov	r1, r3
 800270c:	200a      	movs	r0, #10
 800270e:	f7ff fe51 	bl	80023b4 <Write_Seqnum>
 8002712:	4603      	mov	r3, r0
 8002714:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		return ret;
 8002718:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800271c:	e006      	b.n	800272c <Flash_Write_Sector10+0x1a8>
	}

	ret = HAL_FLASH_Lock();
 800271e:	f7fe fb89 	bl	8000e34 <HAL_FLASH_Lock>
 8002722:	4603      	mov	r3, r0
 8002724:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	return ret;
 8002728:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 800272c:	4618      	mov	r0, r3
 800272e:	3778      	adds	r7, #120	; 0x78
 8002730:	46bd      	mov	sp, r7
 8002732:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002736:	bf00      	nop
 8002738:	2000006c 	.word	0x2000006c
 800273c:	080d8000 	.word	0x080d8000

08002740 <Flash_Write_Sector11>:

HAL_StatusTypeDef Flash_Write_Sector11(uint8_t *sector, uint8_t *seqnum11){
 8002740:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002744:	b09e      	sub	sp, #120	; 0x78
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;
	uint8_t checksum = 0xFF;
 800274c:	23ff      	movs	r3, #255	; 0xff
 800274e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	FRESULT filestatus;
	DIR dir;
	FILINFO fileinfo;
	ret = HAL_FLASH_Unlock();
 8002752:	f7fe fb4d 	bl	8000df0 <HAL_FLASH_Unlock>
 8002756:	4603      	mov	r3, r0
 8002758:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	if (ret != HAL_OK) {
 800275c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <Flash_Write_Sector11+0x28>
		return RES_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0bf      	b.n	80028e8 <Flash_Write_Sector11+0x1a8>
	}
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SectorError;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8002768:	2300      	movs	r3, #0
 800276a:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.Sector = FLASH_SECTOR_11;
 800276c:	230b      	movs	r3, #11
 800276e:	617b      	str	r3, [r7, #20]
	EraseInitStruct.NbSectors = 1;                    //erase 1 sector(11)
 8002770:	2301      	movs	r3, #1
 8002772:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8002774:	2302      	movs	r3, #2
 8002776:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.Banks = FLASH_BANK_1;
 8002778:	2301      	movs	r3, #1
 800277a:	613b      	str	r3, [r7, #16]
	ret = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 800277c:	f107 0208 	add.w	r2, r7, #8
 8002780:	f107 030c 	add.w	r3, r7, #12
 8002784:	4611      	mov	r1, r2
 8002786:	4618      	mov	r0, r3
 8002788:	f7fe fc94 	bl	80010b4 <HAL_FLASHEx_Erase>
 800278c:	4603      	mov	r3, r0
 800278e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

	filestatus = f_opendir(&dir, (TCHAR const*) USERPath); /* Open the directory */
 8002792:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002796:	4957      	ldr	r1, [pc, #348]	; (80028f4 <Flash_Write_Sector11+0x1b4>)
 8002798:	4618      	mov	r0, r3
 800279a:	f002 fc9f 	bl	80050dc <f_opendir>
 800279e:	4603      	mov	r3, r0
 80027a0:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
	if (filestatus == FR_OK) {
 80027a4:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f040 8096 	bne.w	80028da <Flash_Write_Sector11+0x19a>
		for (uint32_t j = 0; j < 128; j++) {
 80027ae:	2300      	movs	r3, #0
 80027b0:	673b      	str	r3, [r7, #112]	; 0x70
 80027b2:	e058      	b.n	8002866 <Flash_Write_Sector11+0x126>

			filestatus = f_readdir(&dir, &fileinfo); /* Read a directory item */
 80027b4:	f107 0220 	add.w	r2, r7, #32
 80027b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80027bc:	4611      	mov	r1, r2
 80027be:	4618      	mov	r0, r3
 80027c0:	f002 fd25 	bl	800520e <f_readdir>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
			if (filestatus != FR_OK || fileinfo.fname[0] == 0)
 80027ca:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d14e      	bne.n	8002870 <Flash_Write_Sector11+0x130>
 80027d2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d04a      	beq.n	8002870 <Flash_Write_Sector11+0x130>
				break; /* Break on error or end of dir */
			if (Fat_Read(fileinfo.fname, (void*) sector) != FR_OK)
 80027da:	f107 0320 	add.w	r3, r7, #32
 80027de:	3309      	adds	r3, #9
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff fc2c 	bl	8002040 <Fat_Read>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d13f      	bne.n	800286e <Flash_Write_Sector11+0x12e>
				break;

			for (uint32_t i = 0; i < RECORD; i++) { //Write one record to the Flash, one cycle writes a byte, so 512 cycles for a whole record
 80027ee:	2300      	movs	r3, #0
 80027f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027f2:	e031      	b.n	8002858 <Flash_Write_Sector11+0x118>
				ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
						SECTOR_11 + i + (j * RECORD), sector[i]);
 80027f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027f6:	025a      	lsls	r2, r3, #9
 80027f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027fa:	4413      	add	r3, r2
				ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 80027fc:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8002800:	f501 2160 	add.w	r1, r1, #917504	; 0xe0000
						SECTOR_11 + i + (j * RECORD), sector[i]);
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002808:	4413      	add	r3, r2
 800280a:	781b      	ldrb	r3, [r3, #0]
				ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2200      	movs	r2, #0
 8002810:	4698      	mov	r8, r3
 8002812:	4691      	mov	r9, r2
 8002814:	4642      	mov	r2, r8
 8002816:	464b      	mov	r3, r9
 8002818:	2000      	movs	r0, #0
 800281a:	f7fe fa95 	bl	8000d48 <HAL_FLASH_Program>
 800281e:	4603      	mov	r3, r0
 8002820:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
				if (ret != HAL_OK) {
 8002824:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002828:	2b00      	cmp	r3, #0
 800282a:	d009      	beq.n	8002840 <Flash_Write_Sector11+0x100>
					HAL_FLASH_Lock();
 800282c:	f7fe fb02 	bl	8000e34 <HAL_FLASH_Lock>
					f_closedir(&dir);
 8002830:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002834:	4618      	mov	r0, r3
 8002836:	f002 fcc4 	bl	80051c2 <f_closedir>
					return ret;
 800283a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800283e:	e053      	b.n	80028e8 <Flash_Write_Sector11+0x1a8>
				}
				checksum ^= sector[i];  // calculate the checksum
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002844:	4413      	add	r3, r2
 8002846:	781a      	ldrb	r2, [r3, #0]
 8002848:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800284c:	4053      	eors	r3, r2
 800284e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			for (uint32_t i = 0; i < RECORD; i++) { //Write one record to the Flash, one cycle writes a byte, so 512 cycles for a whole record
 8002852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002854:	3301      	adds	r3, #1
 8002856:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800285a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800285e:	d3c9      	bcc.n	80027f4 <Flash_Write_Sector11+0xb4>
		for (uint32_t j = 0; j < 128; j++) {
 8002860:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002862:	3301      	adds	r3, #1
 8002864:	673b      	str	r3, [r7, #112]	; 0x70
 8002866:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002868:	2b7f      	cmp	r3, #127	; 0x7f
 800286a:	d9a3      	bls.n	80027b4 <Flash_Write_Sector11+0x74>
 800286c:	e000      	b.n	8002870 <Flash_Write_Sector11+0x130>
				break;
 800286e:	bf00      	nop
			}
		}
		f_closedir(&dir);
 8002870:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002874:	4618      	mov	r0, r3
 8002876:	f002 fca4 	bl	80051c2 <f_closedir>

		*seqnum11 += 2;         // adding 2 makes this sector active
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	3302      	adds	r3, #2
 8002880:	b2da      	uxtb	r2, r3
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	701a      	strb	r2, [r3, #0]
		checksum ^= *seqnum11;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	781a      	ldrb	r2, [r3, #0]
 800288a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800288e:	4053      	eors	r3, r2
 8002890:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, CHECKSUM_SECTOR_11, checksum); // save the checksum
 8002894:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002898:	2200      	movs	r2, #0
 800289a:	461c      	mov	r4, r3
 800289c:	4615      	mov	r5, r2
 800289e:	4622      	mov	r2, r4
 80028a0:	462b      	mov	r3, r5
 80028a2:	4915      	ldr	r1, [pc, #84]	; (80028f8 <Flash_Write_Sector11+0x1b8>)
 80028a4:	2000      	movs	r0, #0
 80028a6:	f7fe fa4f 	bl	8000d48 <HAL_FLASH_Program>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		if (ret != HAL_OK) {
 80028b0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d004      	beq.n	80028c2 <Flash_Write_Sector11+0x182>
			HAL_FLASH_Lock();
 80028b8:	f7fe fabc 	bl	8000e34 <HAL_FLASH_Lock>
			return ret;
 80028bc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80028c0:	e012      	b.n	80028e8 <Flash_Write_Sector11+0x1a8>
		}
		ret = Write_Seqnum(11, *seqnum11);   // lastly set this sector active
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	4619      	mov	r1, r3
 80028c8:	200b      	movs	r0, #11
 80028ca:	f7ff fd73 	bl	80023b4 <Write_Seqnum>
 80028ce:	4603      	mov	r3, r0
 80028d0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		return ret;
 80028d4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80028d8:	e006      	b.n	80028e8 <Flash_Write_Sector11+0x1a8>
	}

	ret = HAL_FLASH_Lock();
 80028da:	f7fe faab 	bl	8000e34 <HAL_FLASH_Lock>
 80028de:	4603      	mov	r3, r0
 80028e0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	return ret;
 80028e4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3778      	adds	r7, #120	; 0x78
 80028ec:	46bd      	mov	sp, r7
 80028ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80028f2:	bf00      	nop
 80028f4:	2000006c 	.word	0x2000006c
 80028f8:	080f8000 	.word	0x080f8000

080028fc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = RES_OK;
 8002906:	4b06      	ldr	r3, [pc, #24]	; (8002920 <USER_initialize+0x24>)
 8002908:	2200      	movs	r2, #0
 800290a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800290c:	4b04      	ldr	r3, [pc, #16]	; (8002920 <USER_initialize+0x24>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8002912:	4618      	mov	r0, r3
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	20000010 	.word	0x20000010

08002924 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = RES_OK;
 800292e:	4b06      	ldr	r3, [pc, #24]	; (8002948 <USER_status+0x24>)
 8002930:	2200      	movs	r2, #0
 8002932:	701a      	strb	r2, [r3, #0]
    return Stat;
 8002934:	4b04      	ldr	r3, [pc, #16]	; (8002948 <USER_status+0x24>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800293a:	4618      	mov	r0, r3
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	20000010 	.word	0x20000010

0800294c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	4603      	mov	r3, r0
 800295a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */

	memcpy(buff, (const void*) (RAM_START + (sector * SECTOR_SIZE)), (count * SECTOR_SIZE));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8002962:	3320      	adds	r3, #32
 8002964:	025b      	lsls	r3, r3, #9
 8002966:	4619      	mov	r1, r3
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	025b      	lsls	r3, r3, #9
 800296c:	461a      	mov	r2, r3
 800296e:	68b8      	ldr	r0, [r7, #8]
 8002970:	f003 fa3a 	bl	8005de8 <memcpy>

    return RES_OK;
 8002974:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af00      	add	r7, sp, #0
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
 800298a:	4603      	mov	r3, r0
 800298c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */

	 memcpy((const void*) (RAM_START + (sector * SECTOR_SIZE)), buff, count * SECTOR_SIZE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8002994:	3320      	adds	r3, #32
 8002996:	025b      	lsls	r3, r3, #9
 8002998:	4618      	mov	r0, r3
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	025b      	lsls	r3, r3, #9
 800299e:	461a      	mov	r2, r3
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	f003 fa21 	bl	8005de8 <memcpy>

    return RES_OK;
 80029a6:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	603a      	str	r2, [r7, #0]
 80029ba:	71fb      	strb	r3, [r7, #7]
 80029bc:	460b      	mov	r3, r1
 80029be:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]

    switch (cmd) {
 80029c4:	79bb      	ldrb	r3, [r7, #6]
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d823      	bhi.n	8002a12 <USER_ioctl+0x62>
 80029ca:	a201      	add	r2, pc, #4	; (adr r2, 80029d0 <USER_ioctl+0x20>)
 80029cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d0:	080029e5 	.word	0x080029e5
 80029d4:	080029eb 	.word	0x080029eb
 80029d8:	080029f7 	.word	0x080029f7
 80029dc:	08002a05 	.word	0x08002a05
 80029e0:	08002a19 	.word	0x08002a19
       	case CTRL_SYNC:
       		res = RES_OK; /* Nem szükséges szinkronizáció a belső ram memóriával */
 80029e4:	2300      	movs	r3, #0
 80029e6:	73fb      	strb	r3, [r7, #15]
       		break;
 80029e8:	e017      	b.n	8002a1a <USER_ioctl+0x6a>
       	case GET_SECTOR_COUNT:
       		/* Szektorok számának lekérdezése */
       		*(DWORD*) buff = 192; /* Szektorok száma */
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	22c0      	movs	r2, #192	; 0xc0
 80029ee:	601a      	str	r2, [r3, #0]
       		res = RES_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	73fb      	strb	r3, [r7, #15]
       		break;
 80029f4:	e011      	b.n	8002a1a <USER_ioctl+0x6a>
       	case GET_SECTOR_SIZE:
       		/* Szektor méretének lekérdezése */
       		*(WORD*) buff = SECTOR_SIZE; /* Szektor mérete = 512 */
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029fc:	801a      	strh	r2, [r3, #0]
       		res = RES_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	73fb      	strb	r3, [r7, #15]
       		break;
 8002a02:	e00a      	b.n	8002a1a <USER_ioctl+0x6a>
       	case GET_BLOCK_SIZE:
       		/* RAM méretének lekérdezése */
       		*(DWORD*) buff = 98304;/* RAM mérete = 96 kbyte */
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
 8002a0a:	601a      	str	r2, [r3, #0]
       		res = RES_OK;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	73fb      	strb	r3, [r7, #15]
       		break;
 8002a10:	e003      	b.n	8002a1a <USER_ioctl+0x6a>
       	case CTRL_TRIM:
       		break;
       	default:
       		res = RES_PARERR; /* Nem támogatott parancs */
 8002a12:	2304      	movs	r3, #4
 8002a14:	73fb      	strb	r3, [r7, #15]
 8002a16:	e000      	b.n	8002a1a <USER_ioctl+0x6a>
       		break;
 8002a18:	bf00      	nop
       	}

    return res;
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	4a08      	ldr	r2, [pc, #32]	; (8002a58 <disk_status+0x30>)
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	79fa      	ldrb	r2, [r7, #7]
 8002a40:	4905      	ldr	r1, [pc, #20]	; (8002a58 <disk_status+0x30>)
 8002a42:	440a      	add	r2, r1
 8002a44:	7a12      	ldrb	r2, [r2, #8]
 8002a46:	4610      	mov	r0, r2
 8002a48:	4798      	blx	r3
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	200004f8 	.word	0x200004f8

08002a5c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	4a0e      	ldr	r2, [pc, #56]	; (8002aa8 <disk_initialize+0x4c>)
 8002a6e:	5cd3      	ldrb	r3, [r2, r3]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d114      	bne.n	8002a9e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	4a0c      	ldr	r2, [pc, #48]	; (8002aa8 <disk_initialize+0x4c>)
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	79fa      	ldrb	r2, [r7, #7]
 8002a82:	4909      	ldr	r1, [pc, #36]	; (8002aa8 <disk_initialize+0x4c>)
 8002a84:	440a      	add	r2, r1
 8002a86:	7a12      	ldrb	r2, [r2, #8]
 8002a88:	4610      	mov	r0, r2
 8002a8a:	4798      	blx	r3
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d103      	bne.n	8002a9e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	4a03      	ldr	r2, [pc, #12]	; (8002aa8 <disk_initialize+0x4c>)
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	200004f8 	.word	0x200004f8

08002aac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002aac:	b590      	push	{r4, r7, lr}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	4603      	mov	r3, r0
 8002aba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	4a0a      	ldr	r2, [pc, #40]	; (8002ae8 <disk_read+0x3c>)
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	689c      	ldr	r4, [r3, #8]
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	4a07      	ldr	r2, [pc, #28]	; (8002ae8 <disk_read+0x3c>)
 8002acc:	4413      	add	r3, r2
 8002ace:	7a18      	ldrb	r0, [r3, #8]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	47a0      	blx	r4
 8002ad8:	4603      	mov	r3, r0
 8002ada:	75fb      	strb	r3, [r7, #23]
  return res;
 8002adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	371c      	adds	r7, #28
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd90      	pop	{r4, r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	200004f8 	.word	0x200004f8

08002aec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002aec:	b590      	push	{r4, r7, lr}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	4603      	mov	r3, r0
 8002afa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
 8002afe:	4a0a      	ldr	r2, [pc, #40]	; (8002b28 <disk_write+0x3c>)
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	68dc      	ldr	r4, [r3, #12]
 8002b08:	7bfb      	ldrb	r3, [r7, #15]
 8002b0a:	4a07      	ldr	r2, [pc, #28]	; (8002b28 <disk_write+0x3c>)
 8002b0c:	4413      	add	r3, r2
 8002b0e:	7a18      	ldrb	r0, [r3, #8]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	68b9      	ldr	r1, [r7, #8]
 8002b16:	47a0      	blx	r4
 8002b18:	4603      	mov	r3, r0
 8002b1a:	75fb      	strb	r3, [r7, #23]
  return res;
 8002b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd90      	pop	{r4, r7, pc}
 8002b26:	bf00      	nop
 8002b28:	200004f8 	.word	0x200004f8

08002b2c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	603a      	str	r2, [r7, #0]
 8002b36:	71fb      	strb	r3, [r7, #7]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	4a09      	ldr	r2, [pc, #36]	; (8002b64 <disk_ioctl+0x38>)
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	79fa      	ldrb	r2, [r7, #7]
 8002b4a:	4906      	ldr	r1, [pc, #24]	; (8002b64 <disk_ioctl+0x38>)
 8002b4c:	440a      	add	r2, r1
 8002b4e:	7a10      	ldrb	r0, [r2, #8]
 8002b50:	79b9      	ldrb	r1, [r7, #6]
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	4798      	blx	r3
 8002b56:	4603      	mov	r3, r0
 8002b58:	73fb      	strb	r3, [r7, #15]
  return res;
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	200004f8 	.word	0x200004f8

08002b68 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3301      	adds	r3, #1
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8002b78:	89fb      	ldrh	r3, [r7, #14]
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	b21a      	sxth	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	b21b      	sxth	r3, r3
 8002b84:	4313      	orrs	r3, r2
 8002b86:	b21b      	sxth	r3, r3
 8002b88:	81fb      	strh	r3, [r7, #14]
	return rv;
 8002b8a:	89fb      	ldrh	r3, [r7, #14]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3303      	adds	r3, #3
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	021b      	lsls	r3, r3, #8
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	3202      	adds	r2, #2
 8002bb0:	7812      	ldrb	r2, [r2, #0]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	021b      	lsls	r3, r3, #8
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	3201      	adds	r2, #1
 8002bbe:	7812      	ldrb	r2, [r2, #0]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	021b      	lsls	r3, r3, #8
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	7812      	ldrb	r2, [r2, #0]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]
	return rv;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	460b      	mov	r3, r1
 8002be8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	1c5a      	adds	r2, r3, #1
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	887a      	ldrh	r2, [r7, #2]
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]
 8002bf6:	887b      	ldrh	r3, [r7, #2]
 8002bf8:	0a1b      	lsrs	r3, r3, #8
 8002bfa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	1c5a      	adds	r2, r3, #1
 8002c00:	607a      	str	r2, [r7, #4]
 8002c02:	887a      	ldrh	r2, [r7, #2]
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	701a      	strb	r2, [r3, #0]
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	607a      	str	r2, [r7, #4]
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	701a      	strb	r2, [r3, #0]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	0a1b      	lsrs	r3, r3, #8
 8002c2e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	701a      	strb	r2, [r3, #0]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	0a1b      	lsrs	r3, r3, #8
 8002c40:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	1c5a      	adds	r2, r3, #1
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	0a1b      	lsrs	r3, r3, #8
 8002c52:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	607a      	str	r2, [r7, #4]
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	701a      	strb	r2, [r3, #0]
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002c6c:	b480      	push	{r7}
 8002c6e:	b087      	sub	sp, #28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00d      	beq.n	8002ca2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	1c53      	adds	r3, r2, #1
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	1c59      	adds	r1, r3, #1
 8002c90:	6179      	str	r1, [r7, #20]
 8002c92:	7812      	ldrb	r2, [r2, #0]
 8002c94:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	607b      	str	r3, [r7, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f1      	bne.n	8002c86 <mem_cpy+0x1a>
	}
}
 8002ca2:	bf00      	nop
 8002ca4:	371c      	adds	r7, #28
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002cae:	b480      	push	{r7}
 8002cb0:	b087      	sub	sp, #28
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	617a      	str	r2, [r7, #20]
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	607b      	str	r3, [r7, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f3      	bne.n	8002cbe <mem_set+0x10>
}
 8002cd6:	bf00      	nop
 8002cd8:	bf00      	nop
 8002cda:	371c      	adds	r7, #28
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8002ce4:	b480      	push	{r7}
 8002ce6:	b089      	sub	sp, #36	; 0x24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	61fb      	str	r3, [r7, #28]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	61fa      	str	r2, [r7, #28]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	4619      	mov	r1, r3
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	61ba      	str	r2, [r7, #24]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	1acb      	subs	r3, r1, r3
 8002d10:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3b01      	subs	r3, #1
 8002d16:	607b      	str	r3, [r7, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <mem_cmp+0x40>
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0eb      	beq.n	8002cfc <mem_cmp+0x18>

	return r;
 8002d24:	697b      	ldr	r3, [r7, #20]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3724      	adds	r7, #36	; 0x24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8002d3c:	e002      	b.n	8002d44 <chk_chr+0x12>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3301      	adds	r3, #1
 8002d42:	607b      	str	r3, [r7, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <chk_chr+0x26>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	461a      	mov	r2, r3
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d1f2      	bne.n	8002d3e <chk_chr+0xc>
	return *str;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	781b      	ldrb	r3, [r3, #0]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	e029      	b.n	8002dd0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8002d7c:	4a27      	ldr	r2, [pc, #156]	; (8002e1c <chk_lock+0xb4>)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	4413      	add	r3, r2
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d01d      	beq.n	8002dc6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002d8a:	4a24      	ldr	r2, [pc, #144]	; (8002e1c <chk_lock+0xb4>)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	4413      	add	r3, r2
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d116      	bne.n	8002dca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8002d9c:	4a1f      	ldr	r2, [pc, #124]	; (8002e1c <chk_lock+0xb4>)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	4413      	add	r3, r2
 8002da4:	3304      	adds	r3, #4
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d10c      	bne.n	8002dca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8002db0:	4a1a      	ldr	r2, [pc, #104]	; (8002e1c <chk_lock+0xb4>)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	4413      	add	r3, r2
 8002db8:	3308      	adds	r3, #8
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d102      	bne.n	8002dca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8002dc4:	e007      	b.n	8002dd6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d9d2      	bls.n	8002d7c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d109      	bne.n	8002df0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d102      	bne.n	8002de8 <chk_lock+0x80>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d101      	bne.n	8002dec <chk_lock+0x84>
 8002de8:	2300      	movs	r3, #0
 8002dea:	e010      	b.n	8002e0e <chk_lock+0xa6>
 8002dec:	2312      	movs	r3, #18
 8002dee:	e00e      	b.n	8002e0e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d108      	bne.n	8002e08 <chk_lock+0xa0>
 8002df6:	4a09      	ldr	r2, [pc, #36]	; (8002e1c <chk_lock+0xb4>)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	4413      	add	r3, r2
 8002dfe:	330c      	adds	r3, #12
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e06:	d101      	bne.n	8002e0c <chk_lock+0xa4>
 8002e08:	2310      	movs	r3, #16
 8002e0a:	e000      	b.n	8002e0e <chk_lock+0xa6>
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	200004d8 	.word	0x200004d8

08002e20 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002e26:	2300      	movs	r3, #0
 8002e28:	607b      	str	r3, [r7, #4]
 8002e2a:	e002      	b.n	8002e32 <enq_lock+0x12>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	607b      	str	r3, [r7, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d806      	bhi.n	8002e46 <enq_lock+0x26>
 8002e38:	4a09      	ldr	r2, [pc, #36]	; (8002e60 <enq_lock+0x40>)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	4413      	add	r3, r2
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f2      	bne.n	8002e2c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	bf14      	ite	ne
 8002e4c:	2301      	movne	r3, #1
 8002e4e:	2300      	moveq	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	200004d8 	.word	0x200004d8

08002e64 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	e01f      	b.n	8002eb4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8002e74:	4a41      	ldr	r2, [pc, #260]	; (8002f7c <inc_lock+0x118>)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	4413      	add	r3, r2
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d113      	bne.n	8002eae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8002e86:	4a3d      	ldr	r2, [pc, #244]	; (8002f7c <inc_lock+0x118>)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	4413      	add	r3, r2
 8002e8e:	3304      	adds	r3, #4
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d109      	bne.n	8002eae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8002e9a:	4a38      	ldr	r2, [pc, #224]	; (8002f7c <inc_lock+0x118>)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	4413      	add	r3, r2
 8002ea2:	3308      	adds	r3, #8
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d006      	beq.n	8002ebc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d9dc      	bls.n	8002e74 <inc_lock+0x10>
 8002eba:	e000      	b.n	8002ebe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8002ebc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d132      	bne.n	8002f2a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	e002      	b.n	8002ed0 <inc_lock+0x6c>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d806      	bhi.n	8002ee4 <inc_lock+0x80>
 8002ed6:	4a29      	ldr	r2, [pc, #164]	; (8002f7c <inc_lock+0x118>)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	4413      	add	r3, r2
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1f2      	bne.n	8002eca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d101      	bne.n	8002eee <inc_lock+0x8a>
 8002eea:	2300      	movs	r3, #0
 8002eec:	e040      	b.n	8002f70 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	4922      	ldr	r1, [pc, #136]	; (8002f7c <inc_lock+0x118>)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	440b      	add	r3, r1
 8002efa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	491e      	ldr	r1, [pc, #120]	; (8002f7c <inc_lock+0x118>)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	440b      	add	r3, r1
 8002f08:	3304      	adds	r3, #4
 8002f0a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	695a      	ldr	r2, [r3, #20]
 8002f10:	491a      	ldr	r1, [pc, #104]	; (8002f7c <inc_lock+0x118>)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	440b      	add	r3, r1
 8002f18:	3308      	adds	r3, #8
 8002f1a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8002f1c:	4a17      	ldr	r2, [pc, #92]	; (8002f7c <inc_lock+0x118>)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	4413      	add	r3, r2
 8002f24:	330c      	adds	r3, #12
 8002f26:	2200      	movs	r2, #0
 8002f28:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d009      	beq.n	8002f44 <inc_lock+0xe0>
 8002f30:	4a12      	ldr	r2, [pc, #72]	; (8002f7c <inc_lock+0x118>)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	4413      	add	r3, r2
 8002f38:	330c      	adds	r3, #12
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <inc_lock+0xe0>
 8002f40:	2300      	movs	r3, #0
 8002f42:	e015      	b.n	8002f70 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d108      	bne.n	8002f5c <inc_lock+0xf8>
 8002f4a:	4a0c      	ldr	r2, [pc, #48]	; (8002f7c <inc_lock+0x118>)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	4413      	add	r3, r2
 8002f52:	330c      	adds	r3, #12
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	3301      	adds	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	e001      	b.n	8002f60 <inc_lock+0xfc>
 8002f5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f60:	4906      	ldr	r1, [pc, #24]	; (8002f7c <inc_lock+0x118>)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	440b      	add	r3, r1
 8002f68:	330c      	adds	r3, #12
 8002f6a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	3301      	adds	r3, #1
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	200004d8 	.word	0x200004d8

08002f80 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	607b      	str	r3, [r7, #4]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d825      	bhi.n	8002fe0 <dec_lock+0x60>
		n = Files[i].ctr;
 8002f94:	4a17      	ldr	r2, [pc, #92]	; (8002ff4 <dec_lock+0x74>)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	4413      	add	r3, r2
 8002f9c:	330c      	adds	r3, #12
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8002fa2:	89fb      	ldrh	r3, [r7, #14]
 8002fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fa8:	d101      	bne.n	8002fae <dec_lock+0x2e>
 8002faa:	2300      	movs	r3, #0
 8002fac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8002fae:	89fb      	ldrh	r3, [r7, #14]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <dec_lock+0x3a>
 8002fb4:	89fb      	ldrh	r3, [r7, #14]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8002fba:	4a0e      	ldr	r2, [pc, #56]	; (8002ff4 <dec_lock+0x74>)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	4413      	add	r3, r2
 8002fc2:	330c      	adds	r3, #12
 8002fc4:	89fa      	ldrh	r2, [r7, #14]
 8002fc6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002fc8:	89fb      	ldrh	r3, [r7, #14]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d105      	bne.n	8002fda <dec_lock+0x5a>
 8002fce:	4a09      	ldr	r2, [pc, #36]	; (8002ff4 <dec_lock+0x74>)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	4413      	add	r3, r2
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	737b      	strb	r3, [r7, #13]
 8002fde:	e001      	b.n	8002fe4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8002fe4:	7b7b      	ldrb	r3, [r7, #13]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	200004d8 	.word	0x200004d8

08002ff8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003000:	2300      	movs	r3, #0
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	e010      	b.n	8003028 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003006:	4a0d      	ldr	r2, [pc, #52]	; (800303c <clear_lock+0x44>)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	4413      	add	r3, r2
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	429a      	cmp	r2, r3
 8003014:	d105      	bne.n	8003022 <clear_lock+0x2a>
 8003016:	4a09      	ldr	r2, [pc, #36]	; (800303c <clear_lock+0x44>)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	4413      	add	r3, r2
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	3301      	adds	r3, #1
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d9eb      	bls.n	8003006 <clear_lock+0xe>
	}
}
 800302e:	bf00      	nop
 8003030:	bf00      	nop
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	200004d8 	.word	0x200004d8

08003040 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	78db      	ldrb	r3, [r3, #3]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d034      	beq.n	80030be <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003058:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	7858      	ldrb	r0, [r3, #1]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003064:	2301      	movs	r3, #1
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	f7ff fd40 	bl	8002aec <disk_write>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003072:	2301      	movs	r3, #1
 8003074:	73fb      	strb	r3, [r7, #15]
 8003076:	e022      	b.n	80030be <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	1ad2      	subs	r2, r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	429a      	cmp	r2, r3
 800308c:	d217      	bcs.n	80030be <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	789b      	ldrb	r3, [r3, #2]
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	e010      	b.n	80030b8 <sync_window+0x78>
					wsect += fs->fsize;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4413      	add	r3, r2
 800309e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	7858      	ldrb	r0, [r3, #1]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80030aa:	2301      	movs	r3, #1
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	f7ff fd1d 	bl	8002aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	3b01      	subs	r3, #1
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d8eb      	bhi.n	8003096 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80030be:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d01b      	beq.n	8003118 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7ff ffad 	bl	8003040 <sync_window>
 80030e6:	4603      	mov	r3, r0
 80030e8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d113      	bne.n	8003118 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	7858      	ldrb	r0, [r3, #1]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80030fa:	2301      	movs	r3, #1
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	f7ff fcd5 	bl	8002aac <disk_read>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d004      	beq.n	8003112 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003108:	f04f 33ff 	mov.w	r3, #4294967295
 800310c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800310e:	2301      	movs	r3, #1
 8003110:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8003118:	7bfb      	ldrb	r3, [r7, #15]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff ff87 	bl	8003040 <sync_window>
 8003132:	4603      	mov	r3, r0
 8003134:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003136:	7bfb      	ldrb	r3, [r7, #15]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d158      	bne.n	80031ee <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b03      	cmp	r3, #3
 8003142:	d148      	bne.n	80031d6 <sync_fs+0xb2>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	791b      	ldrb	r3, [r3, #4]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d144      	bne.n	80031d6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3330      	adds	r3, #48	; 0x30
 8003150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003154:	2100      	movs	r1, #0
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff fda9 	bl	8002cae <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3330      	adds	r3, #48	; 0x30
 8003160:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003164:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fd38 	bl	8002bde <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3330      	adds	r3, #48	; 0x30
 8003172:	4921      	ldr	r1, [pc, #132]	; (80031f8 <sync_fs+0xd4>)
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff fd4d 	bl	8002c14 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3330      	adds	r3, #48	; 0x30
 800317e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003182:	491e      	ldr	r1, [pc, #120]	; (80031fc <sync_fs+0xd8>)
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff fd45 	bl	8002c14 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3330      	adds	r3, #48	; 0x30
 800318e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	4619      	mov	r1, r3
 8003198:	4610      	mov	r0, r2
 800319a:	f7ff fd3b 	bl	8002c14 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	3330      	adds	r3, #48	; 0x30
 80031a2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	4619      	mov	r1, r3
 80031ac:	4610      	mov	r0, r2
 80031ae:	f7ff fd31 	bl	8002c14 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	7858      	ldrb	r0, [r3, #1]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ca:	2301      	movs	r3, #1
 80031cc:	f7ff fc8e 	bl	8002aec <disk_write>
			fs->fsi_flag = 0;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	785b      	ldrb	r3, [r3, #1]
 80031da:	2200      	movs	r2, #0
 80031dc:	2100      	movs	r1, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff fca4 	bl	8002b2c <disk_ioctl>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <sync_fs+0xca>
 80031ea:	2301      	movs	r3, #1
 80031ec:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	41615252 	.word	0x41615252
 80031fc:	61417272 	.word	0x61417272

08003200 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	3b02      	subs	r3, #2
 800320e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	3b02      	subs	r3, #2
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d301      	bcc.n	8003220 <clust2sect+0x20>
 800321c:	2300      	movs	r3, #0
 800321e:	e008      	b.n	8003232 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	895b      	ldrh	r3, [r3, #10]
 8003224:	461a      	mov	r2, r3
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	fb03 f202 	mul.w	r2, r3, r2
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003230:	4413      	add	r3, r2
}
 8003232:	4618      	mov	r0, r3
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b086      	sub	sp, #24
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d904      	bls.n	800325e <get_fat+0x20>
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d302      	bcc.n	8003264 <get_fat+0x26>
		val = 1;	/* Internal error */
 800325e:	2301      	movs	r3, #1
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	e08f      	b.n	8003384 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003264:	f04f 33ff 	mov.w	r3, #4294967295
 8003268:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b03      	cmp	r3, #3
 8003270:	d062      	beq.n	8003338 <get_fat+0xfa>
 8003272:	2b03      	cmp	r3, #3
 8003274:	dc7c      	bgt.n	8003370 <get_fat+0x132>
 8003276:	2b01      	cmp	r3, #1
 8003278:	d002      	beq.n	8003280 <get_fat+0x42>
 800327a:	2b02      	cmp	r3, #2
 800327c:	d042      	beq.n	8003304 <get_fat+0xc6>
 800327e:	e077      	b.n	8003370 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	085b      	lsrs	r3, r3, #1
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	4413      	add	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	6a1a      	ldr	r2, [r3, #32]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	0a5b      	lsrs	r3, r3, #9
 8003296:	4413      	add	r3, r2
 8003298:	4619      	mov	r1, r3
 800329a:	6938      	ldr	r0, [r7, #16]
 800329c:	f7ff ff14 	bl	80030c8 <move_window>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d167      	bne.n	8003376 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	1c5a      	adds	r2, r3, #1
 80032aa:	60fa      	str	r2, [r7, #12]
 80032ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4413      	add	r3, r2
 80032b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032b8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	6a1a      	ldr	r2, [r3, #32]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	0a5b      	lsrs	r3, r3, #9
 80032c2:	4413      	add	r3, r2
 80032c4:	4619      	mov	r1, r3
 80032c6:	6938      	ldr	r0, [r7, #16]
 80032c8:	f7ff fefe 	bl	80030c8 <move_window>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d153      	bne.n	800337a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	4413      	add	r3, r2
 80032dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032e0:	021b      	lsls	r3, r3, #8
 80032e2:	461a      	mov	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <get_fat+0xbc>
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	091b      	lsrs	r3, r3, #4
 80032f8:	e002      	b.n	8003300 <get_fat+0xc2>
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003300:	617b      	str	r3, [r7, #20]
			break;
 8003302:	e03f      	b.n	8003384 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	6a1a      	ldr	r2, [r3, #32]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	0a1b      	lsrs	r3, r3, #8
 800330c:	4413      	add	r3, r2
 800330e:	4619      	mov	r1, r3
 8003310:	6938      	ldr	r0, [r7, #16]
 8003312:	f7ff fed9 	bl	80030c8 <move_window>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d130      	bne.n	800337e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800332a:	4413      	add	r3, r2
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff fc1b 	bl	8002b68 <ld_word>
 8003332:	4603      	mov	r3, r0
 8003334:	617b      	str	r3, [r7, #20]
			break;
 8003336:	e025      	b.n	8003384 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	6a1a      	ldr	r2, [r3, #32]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	09db      	lsrs	r3, r3, #7
 8003340:	4413      	add	r3, r2
 8003342:	4619      	mov	r1, r3
 8003344:	6938      	ldr	r0, [r7, #16]
 8003346:	f7ff febf 	bl	80030c8 <move_window>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d118      	bne.n	8003382 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800335e:	4413      	add	r3, r2
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff fc19 	bl	8002b98 <ld_dword>
 8003366:	4603      	mov	r3, r0
 8003368:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800336c:	617b      	str	r3, [r7, #20]
			break;
 800336e:	e009      	b.n	8003384 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003370:	2301      	movs	r3, #1
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	e006      	b.n	8003384 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003376:	bf00      	nop
 8003378:	e004      	b.n	8003384 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800337a:	bf00      	nop
 800337c:	e002      	b.n	8003384 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800337e:	bf00      	nop
 8003380:	e000      	b.n	8003384 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003382:	bf00      	nop
		}
	}

	return val;
 8003384:	697b      	ldr	r3, [r7, #20]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800338e:	b590      	push	{r4, r7, lr}
 8003390:	b089      	sub	sp, #36	; 0x24
 8003392:	af00      	add	r7, sp, #0
 8003394:	60f8      	str	r0, [r7, #12]
 8003396:	60b9      	str	r1, [r7, #8]
 8003398:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800339a:	2302      	movs	r3, #2
 800339c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	f240 80d9 	bls.w	8003558 <put_fat+0x1ca>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	f080 80d3 	bcs.w	8003558 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b03      	cmp	r3, #3
 80033b8:	f000 8096 	beq.w	80034e8 <put_fat+0x15a>
 80033bc:	2b03      	cmp	r3, #3
 80033be:	f300 80cb 	bgt.w	8003558 <put_fat+0x1ca>
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d002      	beq.n	80033cc <put_fat+0x3e>
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d06e      	beq.n	80034a8 <put_fat+0x11a>
 80033ca:	e0c5      	b.n	8003558 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	61bb      	str	r3, [r7, #24]
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	085b      	lsrs	r3, r3, #1
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4413      	add	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a1a      	ldr	r2, [r3, #32]
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	0a5b      	lsrs	r3, r3, #9
 80033e2:	4413      	add	r3, r2
 80033e4:	4619      	mov	r1, r3
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f7ff fe6e 	bl	80030c8 <move_window>
 80033ec:	4603      	mov	r3, r0
 80033ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80033f0:	7ffb      	ldrb	r3, [r7, #31]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f040 80a9 	bne.w	800354a <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	1c59      	adds	r1, r3, #1
 8003402:	61b9      	str	r1, [r7, #24]
 8003404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003408:	4413      	add	r3, r2
 800340a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00d      	beq.n	8003432 <put_fat+0xa4>
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	b25b      	sxtb	r3, r3
 800341c:	f003 030f 	and.w	r3, r3, #15
 8003420:	b25a      	sxtb	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	b2db      	uxtb	r3, r3
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	b25b      	sxtb	r3, r3
 800342a:	4313      	orrs	r3, r2
 800342c:	b25b      	sxtb	r3, r3
 800342e:	b2db      	uxtb	r3, r3
 8003430:	e001      	b.n	8003436 <put_fat+0xa8>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a1a      	ldr	r2, [r3, #32]
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	0a5b      	lsrs	r3, r3, #9
 8003448:	4413      	add	r3, r2
 800344a:	4619      	mov	r1, r3
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f7ff fe3b 	bl	80030c8 <move_window>
 8003452:	4603      	mov	r3, r0
 8003454:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003456:	7ffb      	ldrb	r3, [r7, #31]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d178      	bne.n	800354e <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003468:	4413      	add	r3, r2
 800346a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <put_fat+0xf0>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	091b      	lsrs	r3, r3, #4
 800347a:	b2db      	uxtb	r3, r3
 800347c:	e00e      	b.n	800349c <put_fat+0x10e>
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	b25b      	sxtb	r3, r3
 8003484:	f023 030f 	bic.w	r3, r3, #15
 8003488:	b25a      	sxtb	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	0a1b      	lsrs	r3, r3, #8
 800348e:	b25b      	sxtb	r3, r3
 8003490:	f003 030f 	and.w	r3, r3, #15
 8003494:	b25b      	sxtb	r3, r3
 8003496:	4313      	orrs	r3, r2
 8003498:	b25b      	sxtb	r3, r3
 800349a:	b2db      	uxtb	r3, r3
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2201      	movs	r2, #1
 80034a4:	70da      	strb	r2, [r3, #3]
			break;
 80034a6:	e057      	b.n	8003558 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a1a      	ldr	r2, [r3, #32]
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	0a1b      	lsrs	r3, r3, #8
 80034b0:	4413      	add	r3, r2
 80034b2:	4619      	mov	r1, r3
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f7ff fe07 	bl	80030c8 <move_window>
 80034ba:	4603      	mov	r3, r0
 80034bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80034be:	7ffb      	ldrb	r3, [r7, #31]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d146      	bne.n	8003552 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80034d2:	4413      	add	r3, r2
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	b292      	uxth	r2, r2
 80034d8:	4611      	mov	r1, r2
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff fb7f 	bl	8002bde <st_word>
			fs->wflag = 1;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	70da      	strb	r2, [r3, #3]
			break;
 80034e6:	e037      	b.n	8003558 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a1a      	ldr	r2, [r3, #32]
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	09db      	lsrs	r3, r3, #7
 80034f0:	4413      	add	r3, r2
 80034f2:	4619      	mov	r1, r3
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f7ff fde7 	bl	80030c8 <move_window>
 80034fa:	4603      	mov	r3, r0
 80034fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80034fe:	7ffb      	ldrb	r3, [r7, #31]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d128      	bne.n	8003556 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003518:	4413      	add	r3, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff fb3c 	bl	8002b98 <ld_dword>
 8003520:	4603      	mov	r3, r0
 8003522:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003526:	4323      	orrs	r3, r4
 8003528:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003538:	4413      	add	r3, r2
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff fb69 	bl	8002c14 <st_dword>
			fs->wflag = 1;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2201      	movs	r2, #1
 8003546:	70da      	strb	r2, [r3, #3]
			break;
 8003548:	e006      	b.n	8003558 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800354a:	bf00      	nop
 800354c:	e004      	b.n	8003558 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800354e:	bf00      	nop
 8003550:	e002      	b.n	8003558 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8003552:	bf00      	nop
 8003554:	e000      	b.n	8003558 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8003556:	bf00      	nop
		}
	}
	return res;
 8003558:	7ffb      	ldrb	r3, [r7, #31]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3724      	adds	r7, #36	; 0x24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd90      	pop	{r4, r7, pc}

08003562 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b088      	sub	sp, #32
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d904      	bls.n	8003588 <remove_chain+0x26>
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	429a      	cmp	r2, r3
 8003586:	d301      	bcc.n	800358c <remove_chain+0x2a>
 8003588:	2302      	movs	r3, #2
 800358a:	e04b      	b.n	8003624 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00c      	beq.n	80035ac <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003592:	f04f 32ff 	mov.w	r2, #4294967295
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	69b8      	ldr	r0, [r7, #24]
 800359a:	f7ff fef8 	bl	800338e <put_fat>
 800359e:	4603      	mov	r3, r0
 80035a0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80035a2:	7ffb      	ldrb	r3, [r7, #31]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <remove_chain+0x4a>
 80035a8:	7ffb      	ldrb	r3, [r7, #31]
 80035aa:	e03b      	b.n	8003624 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f7ff fe45 	bl	800323e <get_fat>
 80035b4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d031      	beq.n	8003620 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d101      	bne.n	80035c6 <remove_chain+0x64>
 80035c2:	2302      	movs	r3, #2
 80035c4:	e02e      	b.n	8003624 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035cc:	d101      	bne.n	80035d2 <remove_chain+0x70>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e028      	b.n	8003624 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80035d2:	2200      	movs	r2, #0
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	69b8      	ldr	r0, [r7, #24]
 80035d8:	f7ff fed9 	bl	800338e <put_fat>
 80035dc:	4603      	mov	r3, r0
 80035de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80035e0:	7ffb      	ldrb	r3, [r7, #31]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <remove_chain+0x88>
 80035e6:	7ffb      	ldrb	r3, [r7, #31]
 80035e8:	e01c      	b.n	8003624 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	691a      	ldr	r2, [r3, #16]
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	3b02      	subs	r3, #2
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d20b      	bcs.n	8003610 <remove_chain+0xae>
			fs->free_clst++;
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	791b      	ldrb	r3, [r3, #4]
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	b2da      	uxtb	r2, r3
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	429a      	cmp	r2, r3
 800361c:	d3c6      	bcc.n	80035ac <remove_chain+0x4a>
 800361e:	e000      	b.n	8003622 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8003620:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3720      	adds	r7, #32
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10d      	bne.n	800365e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d004      	beq.n	8003658 <create_chain+0x2c>
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	429a      	cmp	r2, r3
 8003656:	d31b      	bcc.n	8003690 <create_chain+0x64>
 8003658:	2301      	movs	r3, #1
 800365a:	61bb      	str	r3, [r7, #24]
 800365c:	e018      	b.n	8003690 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800365e:	6839      	ldr	r1, [r7, #0]
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff fdec 	bl	800323e <get_fat>
 8003666:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d801      	bhi.n	8003672 <create_chain+0x46>
 800366e:	2301      	movs	r3, #1
 8003670:	e070      	b.n	8003754 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003678:	d101      	bne.n	800367e <create_chain+0x52>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	e06a      	b.n	8003754 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	429a      	cmp	r2, r3
 8003686:	d201      	bcs.n	800368c <create_chain+0x60>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	e063      	b.n	8003754 <create_chain+0x128>
		scl = clst;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	3301      	adds	r3, #1
 8003698:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	69fa      	ldr	r2, [r7, #28]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d307      	bcc.n	80036b4 <create_chain+0x88>
				ncl = 2;
 80036a4:	2302      	movs	r3, #2
 80036a6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80036a8:	69fa      	ldr	r2, [r7, #28]
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d901      	bls.n	80036b4 <create_chain+0x88>
 80036b0:	2300      	movs	r3, #0
 80036b2:	e04f      	b.n	8003754 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80036b4:	69f9      	ldr	r1, [r7, #28]
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff fdc1 	bl	800323e <get_fat>
 80036bc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00e      	beq.n	80036e2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d003      	beq.n	80036d2 <create_chain+0xa6>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d0:	d101      	bne.n	80036d6 <create_chain+0xaa>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	e03e      	b.n	8003754 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80036d6:	69fa      	ldr	r2, [r7, #28]
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d1da      	bne.n	8003694 <create_chain+0x68>
 80036de:	2300      	movs	r3, #0
 80036e0:	e038      	b.n	8003754 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80036e2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80036e4:	f04f 32ff 	mov.w	r2, #4294967295
 80036e8:	69f9      	ldr	r1, [r7, #28]
 80036ea:	6938      	ldr	r0, [r7, #16]
 80036ec:	f7ff fe4f 	bl	800338e <put_fat>
 80036f0:	4603      	mov	r3, r0
 80036f2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80036f4:	7dfb      	ldrb	r3, [r7, #23]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <create_chain+0xe2>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d006      	beq.n	800370e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	6839      	ldr	r1, [r7, #0]
 8003704:	6938      	ldr	r0, [r7, #16]
 8003706:	f7ff fe42 	bl	800338e <put_fat>
 800370a:	4603      	mov	r3, r0
 800370c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800370e:	7dfb      	ldrb	r3, [r7, #23]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d116      	bne.n	8003742 <create_chain+0x116>
		fs->last_clst = ncl;
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	69fa      	ldr	r2, [r7, #28]
 8003718:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	691a      	ldr	r2, [r3, #16]
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	3b02      	subs	r3, #2
 8003724:	429a      	cmp	r2, r3
 8003726:	d804      	bhi.n	8003732 <create_chain+0x106>
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	1e5a      	subs	r2, r3, #1
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	791b      	ldrb	r3, [r3, #4]
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	b2da      	uxtb	r2, r3
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	711a      	strb	r2, [r3, #4]
 8003740:	e007      	b.n	8003752 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003742:	7dfb      	ldrb	r3, [r7, #23]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d102      	bne.n	800374e <create_chain+0x122>
 8003748:	f04f 33ff 	mov.w	r3, #4294967295
 800374c:	e000      	b.n	8003750 <create_chain+0x124>
 800374e:	2301      	movs	r3, #1
 8003750:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8003752:	69fb      	ldr	r3, [r7, #28]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3720      	adds	r7, #32
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	3304      	adds	r3, #4
 8003772:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	0a5b      	lsrs	r3, r3, #9
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	8952      	ldrh	r2, [r2, #10]
 800377c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003780:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1d1a      	adds	r2, r3, #4
 8003786:	613a      	str	r2, [r7, #16]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <clmt_clust+0x3a>
 8003792:	2300      	movs	r3, #0
 8003794:	e010      	b.n	80037b8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	429a      	cmp	r2, r3
 800379c:	d307      	bcc.n	80037ae <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	3304      	adds	r3, #4
 80037aa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80037ac:	e7e9      	b.n	8003782 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80037ae:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	4413      	add	r3, r2
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	371c      	adds	r7, #28
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037da:	d204      	bcs.n	80037e6 <dir_sdi+0x22>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	f003 031f 	and.w	r3, r3, #31
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <dir_sdi+0x26>
		return FR_INT_ERR;
 80037e6:	2302      	movs	r3, #2
 80037e8:	e063      	b.n	80038b2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d106      	bne.n	800380a <dir_sdi+0x46>
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b02      	cmp	r3, #2
 8003802:	d902      	bls.n	800380a <dir_sdi+0x46>
		clst = fs->dirbase;
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10c      	bne.n	800382a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	8912      	ldrh	r2, [r2, #8]
 8003818:	4293      	cmp	r3, r2
 800381a:	d301      	bcc.n	8003820 <dir_sdi+0x5c>
 800381c:	2302      	movs	r3, #2
 800381e:	e048      	b.n	80038b2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	61da      	str	r2, [r3, #28]
 8003828:	e029      	b.n	800387e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	895b      	ldrh	r3, [r3, #10]
 800382e:	025b      	lsls	r3, r3, #9
 8003830:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003832:	e019      	b.n	8003868 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6979      	ldr	r1, [r7, #20]
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff fd00 	bl	800323e <get_fat>
 800383e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003846:	d101      	bne.n	800384c <dir_sdi+0x88>
 8003848:	2301      	movs	r3, #1
 800384a:	e032      	b.n	80038b2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d904      	bls.n	800385c <dir_sdi+0x98>
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	429a      	cmp	r2, r3
 800385a:	d301      	bcc.n	8003860 <dir_sdi+0x9c>
 800385c:	2302      	movs	r3, #2
 800385e:	e028      	b.n	80038b2 <dir_sdi+0xee>
			ofs -= csz;
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	429a      	cmp	r2, r3
 800386e:	d2e1      	bcs.n	8003834 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8003870:	6979      	ldr	r1, [r7, #20]
 8003872:	6938      	ldr	r0, [r7, #16]
 8003874:	f7ff fcc4 	bl	8003200 <clust2sect>
 8003878:	4602      	mov	r2, r0
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <dir_sdi+0xcc>
 800388c:	2302      	movs	r3, #2
 800388e:	e010      	b.n	80038b2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69da      	ldr	r2, [r3, #28]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	0a5b      	lsrs	r3, r3, #9
 8003898:	441a      	add	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038aa:	441a      	add	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b086      	sub	sp, #24
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	3320      	adds	r3, #32
 80038d0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <dir_next+0x28>
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038e0:	d301      	bcc.n	80038e6 <dir_next+0x2c>
 80038e2:	2304      	movs	r3, #4
 80038e4:	e0aa      	b.n	8003a3c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f040 8098 	bne.w	8003a22 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10b      	bne.n	800391c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	8912      	ldrh	r2, [r2, #8]
 800390c:	4293      	cmp	r3, r2
 800390e:	f0c0 8088 	bcc.w	8003a22 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	61da      	str	r2, [r3, #28]
 8003918:	2304      	movs	r3, #4
 800391a:	e08f      	b.n	8003a3c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	0a5b      	lsrs	r3, r3, #9
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	8952      	ldrh	r2, [r2, #10]
 8003924:	3a01      	subs	r2, #1
 8003926:	4013      	ands	r3, r2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d17a      	bne.n	8003a22 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	4619      	mov	r1, r3
 8003934:	4610      	mov	r0, r2
 8003936:	f7ff fc82 	bl	800323e <get_fat>
 800393a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d801      	bhi.n	8003946 <dir_next+0x8c>
 8003942:	2302      	movs	r3, #2
 8003944:	e07a      	b.n	8003a3c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394c:	d101      	bne.n	8003952 <dir_next+0x98>
 800394e:	2301      	movs	r3, #1
 8003950:	e074      	b.n	8003a3c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	429a      	cmp	r2, r3
 800395a:	d358      	bcc.n	8003a0e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d104      	bne.n	800396c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	61da      	str	r2, [r3, #28]
 8003968:	2304      	movs	r3, #4
 800396a:	e067      	b.n	8003a3c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	4619      	mov	r1, r3
 8003974:	4610      	mov	r0, r2
 8003976:	f7ff fe59 	bl	800362c <create_chain>
 800397a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <dir_next+0xcc>
 8003982:	2307      	movs	r3, #7
 8003984:	e05a      	b.n	8003a3c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d101      	bne.n	8003990 <dir_next+0xd6>
 800398c:	2302      	movs	r3, #2
 800398e:	e055      	b.n	8003a3c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003996:	d101      	bne.n	800399c <dir_next+0xe2>
 8003998:	2301      	movs	r3, #1
 800399a:	e04f      	b.n	8003a3c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f7ff fb4f 	bl	8003040 <sync_window>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <dir_next+0xf2>
 80039a8:	2301      	movs	r3, #1
 80039aa:	e047      	b.n	8003a3c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	3330      	adds	r3, #48	; 0x30
 80039b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039b4:	2100      	movs	r1, #0
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff f979 	bl	8002cae <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80039bc:	2300      	movs	r3, #0
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	6979      	ldr	r1, [r7, #20]
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f7ff fc1c 	bl	8003200 <clust2sect>
 80039c8:	4602      	mov	r2, r0
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80039ce:	e012      	b.n	80039f6 <dir_next+0x13c>
						fs->wflag = 1;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2201      	movs	r2, #1
 80039d4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f7ff fb32 	bl	8003040 <sync_window>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <dir_next+0x12c>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e02a      	b.n	8003a3c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	3301      	adds	r3, #1
 80039ea:	613b      	str	r3, [r7, #16]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	895b      	ldrh	r3, [r3, #10]
 80039fa:	461a      	mov	r2, r3
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d3e6      	bcc.n	80039d0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad2      	subs	r2, r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8003a14:	6979      	ldr	r1, [r7, #20]
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f7ff fbf2 	bl	8003200 <clust2sect>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a34:	441a      	add	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8003a54:	2100      	movs	r1, #0
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff feb4 	bl	80037c4 <dir_sdi>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d12b      	bne.n	8003abe <dir_alloc+0x7a>
		n = 0;
 8003a66:	2300      	movs	r3, #0
 8003a68:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	4619      	mov	r1, r3
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f7ff fb29 	bl	80030c8 <move_window>
 8003a76:	4603      	mov	r3, r0
 8003a78:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003a7a:	7dfb      	ldrb	r3, [r7, #23]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d11d      	bne.n	8003abc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2be5      	cmp	r3, #229	; 0xe5
 8003a88:	d004      	beq.n	8003a94 <dir_alloc+0x50>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d107      	bne.n	8003aa4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	3301      	adds	r3, #1
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d102      	bne.n	8003aa8 <dir_alloc+0x64>
 8003aa2:	e00c      	b.n	8003abe <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7ff ff05 	bl	80038ba <dir_next>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8003ab4:	7dfb      	ldrb	r3, [r7, #23]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0d7      	beq.n	8003a6a <dir_alloc+0x26>
 8003aba:	e000      	b.n	8003abe <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8003abc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003abe:	7dfb      	ldrb	r3, [r7, #23]
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d101      	bne.n	8003ac8 <dir_alloc+0x84>
 8003ac4:	2307      	movs	r3, #7
 8003ac6:	75fb      	strb	r3, [r7, #23]
	return res;
 8003ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3718      	adds	r7, #24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	331a      	adds	r3, #26
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff f841 	bl	8002b68 <ld_word>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	d109      	bne.n	8003b06 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	3314      	adds	r3, #20
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff f836 	bl	8002b68 <ld_word>
 8003afc:	4603      	mov	r3, r0
 8003afe:	041b      	lsls	r3, r3, #16
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8003b06:	68fb      	ldr	r3, [r7, #12]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	331a      	adds	r3, #26
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	b292      	uxth	r2, r2
 8003b24:	4611      	mov	r1, r2
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff f859 	bl	8002bde <st_word>
	if (fs->fs_type == FS_FAT32) {
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d109      	bne.n	8003b48 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f103 0214 	add.w	r2, r3, #20
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	0c1b      	lsrs	r3, r3, #16
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	4619      	mov	r1, r3
 8003b42:	4610      	mov	r0, r2
 8003b44:	f7ff f84b 	bl	8002bde <st_word>
	}
}
 8003b48:	bf00      	nop
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8003b5a:	2304      	movs	r3, #4
 8003b5c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8003b64:	e03c      	b.n	8003be0 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	6938      	ldr	r0, [r7, #16]
 8003b6e:	f7ff faab 	bl	80030c8 <move_window>
 8003b72:	4603      	mov	r3, r0
 8003b74:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003b76:	7dfb      	ldrb	r3, [r7, #23]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d136      	bne.n	8003bea <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d102      	bne.n	8003b90 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8003b8a:	2304      	movs	r3, #4
 8003b8c:	75fb      	strb	r3, [r7, #23]
 8003b8e:	e031      	b.n	8003bf4 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	330b      	adds	r3, #11
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b9c:	73bb      	strb	r3, [r7, #14]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	7bba      	ldrb	r2, [r7, #14]
 8003ba2:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	2be5      	cmp	r3, #229	; 0xe5
 8003ba8:	d011      	beq.n	8003bce <dir_read+0x7e>
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
 8003bac:	2b2e      	cmp	r3, #46	; 0x2e
 8003bae:	d00e      	beq.n	8003bce <dir_read+0x7e>
 8003bb0:	7bbb      	ldrb	r3, [r7, #14]
 8003bb2:	2b0f      	cmp	r3, #15
 8003bb4:	d00b      	beq.n	8003bce <dir_read+0x7e>
 8003bb6:	7bbb      	ldrb	r3, [r7, #14]
 8003bb8:	f023 0320 	bic.w	r3, r3, #32
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	bf0c      	ite	eq
 8003bc0:	2301      	moveq	r3, #1
 8003bc2:	2300      	movne	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d00f      	beq.n	8003bee <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8003bce:	2100      	movs	r1, #0
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff fe72 	bl	80038ba <dir_next>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003bda:	7dfb      	ldrb	r3, [r7, #23]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d108      	bne.n	8003bf2 <dir_read+0xa2>
	while (dp->sect) {
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1be      	bne.n	8003b66 <dir_read+0x16>
 8003be8:	e004      	b.n	8003bf4 <dir_read+0xa4>
		if (res != FR_OK) break;
 8003bea:	bf00      	nop
 8003bec:	e002      	b.n	8003bf4 <dir_read+0xa4>
				break;
 8003bee:	bf00      	nop
 8003bf0:	e000      	b.n	8003bf4 <dir_read+0xa4>
		if (res != FR_OK) break;
 8003bf2:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8003bf4:	7dfb      	ldrb	r3, [r7, #23]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d002      	beq.n	8003c00 <dir_read+0xb0>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	61da      	str	r2, [r3, #28]
	return res;
 8003c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b086      	sub	sp, #24
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003c18:	2100      	movs	r1, #0
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7ff fdd2 	bl	80037c4 <dir_sdi>
 8003c20:	4603      	mov	r3, r0
 8003c22:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8003c24:	7dfb      	ldrb	r3, [r7, #23]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <dir_find+0x24>
 8003c2a:	7dfb      	ldrb	r3, [r7, #23]
 8003c2c:	e03e      	b.n	8003cac <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	4619      	mov	r1, r3
 8003c34:	6938      	ldr	r0, [r7, #16]
 8003c36:	f7ff fa47 	bl	80030c8 <move_window>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003c3e:	7dfb      	ldrb	r3, [r7, #23]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d12f      	bne.n	8003ca4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d102      	bne.n	8003c58 <dir_find+0x4e>
 8003c52:	2304      	movs	r3, #4
 8003c54:	75fb      	strb	r3, [r7, #23]
 8003c56:	e028      	b.n	8003caa <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	330b      	adds	r3, #11
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	330b      	adds	r3, #11
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10a      	bne.n	8003c90 <dir_find+0x86>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a18      	ldr	r0, [r3, #32]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3324      	adds	r3, #36	; 0x24
 8003c82:	220b      	movs	r2, #11
 8003c84:	4619      	mov	r1, r3
 8003c86:	f7ff f82d 	bl	8002ce4 <mem_cmp>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00b      	beq.n	8003ca8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8003c90:	2100      	movs	r1, #0
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7ff fe11 	bl	80038ba <dir_next>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8003c9c:	7dfb      	ldrb	r3, [r7, #23]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0c5      	beq.n	8003c2e <dir_find+0x24>
 8003ca2:	e002      	b.n	8003caa <dir_find+0xa0>
		if (res != FR_OK) break;
 8003ca4:	bf00      	nop
 8003ca6:	e000      	b.n	8003caa <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003ca8:	bf00      	nop

	return res;
 8003caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7ff febd 	bl	8003a44 <dir_alloc>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d11c      	bne.n	8003d0e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	68b8      	ldr	r0, [r7, #8]
 8003cdc:	f7ff f9f4 	bl	80030c8 <move_window>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d111      	bne.n	8003d0e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fe ffdb 	bl	8002cae <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a18      	ldr	r0, [r3, #32]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3324      	adds	r3, #36	; 0x24
 8003d00:	220b      	movs	r2, #11
 8003d02:	4619      	mov	r1, r3
 8003d04:	f7fe ffb2 	bl	8002c6c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8003d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2200      	movs	r2, #0
 8003d26:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d04e      	beq.n	8003dce <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8003d30:	2300      	movs	r3, #0
 8003d32:	613b      	str	r3, [r7, #16]
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8003d38:	e021      	b.n	8003d7e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1a      	ldr	r2, [r3, #32]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	1c59      	adds	r1, r3, #1
 8003d42:	6179      	str	r1, [r7, #20]
 8003d44:	4413      	add	r3, r2
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
 8003d4c:	2b20      	cmp	r3, #32
 8003d4e:	d100      	bne.n	8003d52 <get_fileinfo+0x3a>
 8003d50:	e015      	b.n	8003d7e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
 8003d54:	2b05      	cmp	r3, #5
 8003d56:	d101      	bne.n	8003d5c <get_fileinfo+0x44>
 8003d58:	23e5      	movs	r3, #229	; 0xe5
 8003d5a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2b09      	cmp	r3, #9
 8003d60:	d106      	bne.n	8003d70 <get_fileinfo+0x58>
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	613a      	str	r2, [r7, #16]
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	222e      	movs	r2, #46	; 0x2e
 8003d6e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	613a      	str	r2, [r7, #16]
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	4413      	add	r3, r2
 8003d7a:	7bfa      	ldrb	r2, [r7, #15]
 8003d7c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2b0a      	cmp	r3, #10
 8003d82:	d9da      	bls.n	8003d3a <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	4413      	add	r3, r2
 8003d8a:	3309      	adds	r3, #9
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	7ada      	ldrb	r2, [r3, #11]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	331c      	adds	r3, #28
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fe fef9 	bl	8002b98 <ld_dword>
 8003da6:	4602      	mov	r2, r0
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	3316      	adds	r3, #22
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fe fef0 	bl	8002b98 <ld_dword>
 8003db8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	80da      	strh	r2, [r3, #6]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	0c1b      	lsrs	r3, r3, #16
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	809a      	strh	r2, [r3, #4]
 8003dcc:	e000      	b.n	8003dd0 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8003dce:	bf00      	nop
}
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b088      	sub	sp, #32
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3324      	adds	r3, #36	; 0x24
 8003dec:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8003dee:	220b      	movs	r2, #11
 8003df0:	2120      	movs	r1, #32
 8003df2:	68b8      	ldr	r0, [r7, #8]
 8003df4:	f7fe ff5b 	bl	8002cae <mem_set>
	si = i = 0; ni = 8;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	61fb      	str	r3, [r7, #28]
 8003e00:	2308      	movs	r3, #8
 8003e02:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	61fa      	str	r2, [r7, #28]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003e12:	7efb      	ldrb	r3, [r7, #27]
 8003e14:	2b20      	cmp	r3, #32
 8003e16:	d94e      	bls.n	8003eb6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8003e18:	7efb      	ldrb	r3, [r7, #27]
 8003e1a:	2b2f      	cmp	r3, #47	; 0x2f
 8003e1c:	d006      	beq.n	8003e2c <create_name+0x54>
 8003e1e:	7efb      	ldrb	r3, [r7, #27]
 8003e20:	2b5c      	cmp	r3, #92	; 0x5c
 8003e22:	d110      	bne.n	8003e46 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003e24:	e002      	b.n	8003e2c <create_name+0x54>
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	61fb      	str	r3, [r7, #28]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	4413      	add	r3, r2
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	2b2f      	cmp	r3, #47	; 0x2f
 8003e36:	d0f6      	beq.n	8003e26 <create_name+0x4e>
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b5c      	cmp	r3, #92	; 0x5c
 8003e42:	d0f0      	beq.n	8003e26 <create_name+0x4e>
			break;
 8003e44:	e038      	b.n	8003eb8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8003e46:	7efb      	ldrb	r3, [r7, #27]
 8003e48:	2b2e      	cmp	r3, #46	; 0x2e
 8003e4a:	d003      	beq.n	8003e54 <create_name+0x7c>
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d30c      	bcc.n	8003e6e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2b0b      	cmp	r3, #11
 8003e58:	d002      	beq.n	8003e60 <create_name+0x88>
 8003e5a:	7efb      	ldrb	r3, [r7, #27]
 8003e5c:	2b2e      	cmp	r3, #46	; 0x2e
 8003e5e:	d001      	beq.n	8003e64 <create_name+0x8c>
 8003e60:	2306      	movs	r3, #6
 8003e62:	e044      	b.n	8003eee <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8003e64:	2308      	movs	r3, #8
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	230b      	movs	r3, #11
 8003e6a:	617b      	str	r3, [r7, #20]
			continue;
 8003e6c:	e022      	b.n	8003eb4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8003e6e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	da04      	bge.n	8003e80 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8003e76:	7efb      	ldrb	r3, [r7, #27]
 8003e78:	3b80      	subs	r3, #128	; 0x80
 8003e7a:	4a1f      	ldr	r2, [pc, #124]	; (8003ef8 <create_name+0x120>)
 8003e7c:	5cd3      	ldrb	r3, [r2, r3]
 8003e7e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8003e80:	7efb      	ldrb	r3, [r7, #27]
 8003e82:	4619      	mov	r1, r3
 8003e84:	481d      	ldr	r0, [pc, #116]	; (8003efc <create_name+0x124>)
 8003e86:	f7fe ff54 	bl	8002d32 <chk_chr>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <create_name+0xbc>
 8003e90:	2306      	movs	r3, #6
 8003e92:	e02c      	b.n	8003eee <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8003e94:	7efb      	ldrb	r3, [r7, #27]
 8003e96:	2b60      	cmp	r3, #96	; 0x60
 8003e98:	d905      	bls.n	8003ea6 <create_name+0xce>
 8003e9a:	7efb      	ldrb	r3, [r7, #27]
 8003e9c:	2b7a      	cmp	r3, #122	; 0x7a
 8003e9e:	d802      	bhi.n	8003ea6 <create_name+0xce>
 8003ea0:	7efb      	ldrb	r3, [r7, #27]
 8003ea2:	3b20      	subs	r3, #32
 8003ea4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	613a      	str	r2, [r7, #16]
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	4413      	add	r3, r2
 8003eb0:	7efa      	ldrb	r2, [r7, #27]
 8003eb2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8003eb4:	e7a6      	b.n	8003e04 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003eb6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	441a      	add	r2, r3
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <create_name+0xf4>
 8003ec8:	2306      	movs	r3, #6
 8003eca:	e010      	b.n	8003eee <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2be5      	cmp	r3, #229	; 0xe5
 8003ed2:	d102      	bne.n	8003eda <create_name+0x102>
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2205      	movs	r2, #5
 8003ed8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8003eda:	7efb      	ldrb	r3, [r7, #27]
 8003edc:	2b20      	cmp	r3, #32
 8003ede:	d801      	bhi.n	8003ee4 <create_name+0x10c>
 8003ee0:	2204      	movs	r2, #4
 8003ee2:	e000      	b.n	8003ee6 <create_name+0x10e>
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	330b      	adds	r3, #11
 8003eea:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8003eec:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3720      	adds	r7, #32
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	08005ed8 	.word	0x08005ed8
 8003efc:	08005e84 	.word	0x08005e84

08003f00 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8003f14:	e002      	b.n	8003f1c <follow_path+0x1c>
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	603b      	str	r3, [r7, #0]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b2f      	cmp	r3, #47	; 0x2f
 8003f22:	d0f8      	beq.n	8003f16 <follow_path+0x16>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	2b5c      	cmp	r3, #92	; 0x5c
 8003f2a:	d0f4      	beq.n	8003f16 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b1f      	cmp	r3, #31
 8003f38:	d80a      	bhi.n	8003f50 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2280      	movs	r2, #128	; 0x80
 8003f3e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8003f42:	2100      	movs	r1, #0
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff fc3d 	bl	80037c4 <dir_sdi>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	75fb      	strb	r3, [r7, #23]
 8003f4e:	e043      	b.n	8003fd8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003f50:	463b      	mov	r3, r7
 8003f52:	4619      	mov	r1, r3
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7ff ff3f 	bl	8003dd8 <create_name>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003f5e:	7dfb      	ldrb	r3, [r7, #23]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d134      	bne.n	8003fce <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f7ff fe50 	bl	8003c0a <dir_find>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003f74:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8003f76:	7dfb      	ldrb	r3, [r7, #23]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00a      	beq.n	8003f92 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003f7c:	7dfb      	ldrb	r3, [r7, #23]
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d127      	bne.n	8003fd2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003f82:	7afb      	ldrb	r3, [r7, #11]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d122      	bne.n	8003fd2 <follow_path+0xd2>
 8003f8c:	2305      	movs	r3, #5
 8003f8e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8003f90:	e01f      	b.n	8003fd2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003f92:	7afb      	ldrb	r3, [r7, #11]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d11c      	bne.n	8003fd6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	799b      	ldrb	r3, [r3, #6]
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d102      	bne.n	8003fae <follow_path+0xae>
				res = FR_NO_PATH; break;
 8003fa8:	2305      	movs	r3, #5
 8003faa:	75fb      	strb	r3, [r7, #23]
 8003fac:	e014      	b.n	8003fd8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fbc:	4413      	add	r3, r2
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f7ff fd86 	bl	8003ad2 <ld_clust>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003fcc:	e7c0      	b.n	8003f50 <follow_path+0x50>
			if (res != FR_OK) break;
 8003fce:	bf00      	nop
 8003fd0:	e002      	b.n	8003fd8 <follow_path+0xd8>
				break;
 8003fd2:	bf00      	nop
 8003fd4:	e000      	b.n	8003fd8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003fd6:	bf00      	nop
			}
		}
	}

	return res;
 8003fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b087      	sub	sp, #28
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8003fea:	f04f 33ff 	mov.w	r3, #4294967295
 8003fee:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d031      	beq.n	800405c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	617b      	str	r3, [r7, #20]
 8003ffe:	e002      	b.n	8004006 <get_ldnumber+0x24>
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	3301      	adds	r3, #1
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b20      	cmp	r3, #32
 800400c:	d903      	bls.n	8004016 <get_ldnumber+0x34>
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	2b3a      	cmp	r3, #58	; 0x3a
 8004014:	d1f4      	bne.n	8004000 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	2b3a      	cmp	r3, #58	; 0x3a
 800401c:	d11c      	bne.n	8004058 <get_ldnumber+0x76>
			tp = *path;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	60fa      	str	r2, [r7, #12]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	3b30      	subs	r3, #48	; 0x30
 800402e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b09      	cmp	r3, #9
 8004034:	d80e      	bhi.n	8004054 <get_ldnumber+0x72>
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	429a      	cmp	r2, r3
 800403c:	d10a      	bne.n	8004054 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d107      	bne.n	8004054 <get_ldnumber+0x72>
					vol = (int)i;
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	3301      	adds	r3, #1
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	e002      	b.n	800405e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004058:	2300      	movs	r3, #0
 800405a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800405c:	693b      	ldr	r3, [r7, #16]
}
 800405e:	4618      	mov	r0, r3
 8004060:	371c      	adds	r7, #28
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
	...

0800406c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	70da      	strb	r2, [r3, #3]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f04f 32ff 	mov.w	r2, #4294967295
 8004082:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004084:	6839      	ldr	r1, [r7, #0]
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7ff f81e 	bl	80030c8 <move_window>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <check_fs+0x2a>
 8004092:	2304      	movs	r3, #4
 8004094:	e038      	b.n	8004108 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3330      	adds	r3, #48	; 0x30
 800409a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fe fd62 	bl	8002b68 <ld_word>
 80040a4:	4603      	mov	r3, r0
 80040a6:	461a      	mov	r2, r3
 80040a8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d001      	beq.n	80040b4 <check_fs+0x48>
 80040b0:	2303      	movs	r3, #3
 80040b2:	e029      	b.n	8004108 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040ba:	2be9      	cmp	r3, #233	; 0xe9
 80040bc:	d009      	beq.n	80040d2 <check_fs+0x66>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040c4:	2beb      	cmp	r3, #235	; 0xeb
 80040c6:	d11e      	bne.n	8004106 <check_fs+0x9a>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80040ce:	2b90      	cmp	r3, #144	; 0x90
 80040d0:	d119      	bne.n	8004106 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3330      	adds	r3, #48	; 0x30
 80040d6:	3336      	adds	r3, #54	; 0x36
 80040d8:	4618      	mov	r0, r3
 80040da:	f7fe fd5d 	bl	8002b98 <ld_dword>
 80040de:	4603      	mov	r3, r0
 80040e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80040e4:	4a0a      	ldr	r2, [pc, #40]	; (8004110 <check_fs+0xa4>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d101      	bne.n	80040ee <check_fs+0x82>
 80040ea:	2300      	movs	r3, #0
 80040ec:	e00c      	b.n	8004108 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3330      	adds	r3, #48	; 0x30
 80040f2:	3352      	adds	r3, #82	; 0x52
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fe fd4f 	bl	8002b98 <ld_dword>
 80040fa:	4603      	mov	r3, r0
 80040fc:	4a05      	ldr	r2, [pc, #20]	; (8004114 <check_fs+0xa8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d101      	bne.n	8004106 <check_fs+0x9a>
 8004102:	2300      	movs	r3, #0
 8004104:	e000      	b.n	8004108 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004106:	2302      	movs	r3, #2
}
 8004108:	4618      	mov	r0, r3
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	00544146 	.word	0x00544146
 8004114:	33544146 	.word	0x33544146

08004118 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b096      	sub	sp, #88	; 0x58
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	4613      	mov	r3, r2
 8004124:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f7ff ff58 	bl	8003fe2 <get_ldnumber>
 8004132:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004136:	2b00      	cmp	r3, #0
 8004138:	da01      	bge.n	800413e <find_volume+0x26>
 800413a:	230b      	movs	r3, #11
 800413c:	e22d      	b.n	800459a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800413e:	4aa1      	ldr	r2, [pc, #644]	; (80043c4 <find_volume+0x2ac>)
 8004140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004146:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <find_volume+0x3a>
 800414e:	230c      	movs	r3, #12
 8004150:	e223      	b.n	800459a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004156:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004158:	79fb      	ldrb	r3, [r7, #7]
 800415a:	f023 0301 	bic.w	r3, r3, #1
 800415e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d01a      	beq.n	800419e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416a:	785b      	ldrb	r3, [r3, #1]
 800416c:	4618      	mov	r0, r3
 800416e:	f7fe fc5b 	bl	8002a28 <disk_status>
 8004172:	4603      	mov	r3, r0
 8004174:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004178:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10c      	bne.n	800419e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d007      	beq.n	800419a <find_volume+0x82>
 800418a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004196:	230a      	movs	r3, #10
 8004198:	e1ff      	b.n	800459a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800419a:	2300      	movs	r3, #0
 800419c:	e1fd      	b.n	800459a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800419e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a0:	2200      	movs	r2, #0
 80041a2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80041a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041aa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80041ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ae:	785b      	ldrb	r3, [r3, #1]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fe fc53 	bl	8002a5c <disk_initialize>
 80041b6:	4603      	mov	r3, r0
 80041b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80041bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80041c8:	2303      	movs	r3, #3
 80041ca:	e1e6      	b.n	800459a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d007      	beq.n	80041e2 <find_volume+0xca>
 80041d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80041de:	230a      	movs	r3, #10
 80041e0:	e1db      	b.n	800459a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80041e2:	2300      	movs	r3, #0
 80041e4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80041e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80041e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80041ea:	f7ff ff3f 	bl	800406c <check_fs>
 80041ee:	4603      	mov	r3, r0
 80041f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80041f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d149      	bne.n	8004290 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80041fc:	2300      	movs	r3, #0
 80041fe:	643b      	str	r3, [r7, #64]	; 0x40
 8004200:	e01e      	b.n	8004240 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004204:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004210:	4413      	add	r3, r2
 8004212:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004216:	3304      	adds	r3, #4
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d006      	beq.n	800422c <find_volume+0x114>
 800421e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004220:	3308      	adds	r3, #8
 8004222:	4618      	mov	r0, r3
 8004224:	f7fe fcb8 	bl	8002b98 <ld_dword>
 8004228:	4602      	mov	r2, r0
 800422a:	e000      	b.n	800422e <find_volume+0x116>
 800422c:	2200      	movs	r2, #0
 800422e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	3358      	adds	r3, #88	; 0x58
 8004234:	443b      	add	r3, r7
 8004236:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800423a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800423c:	3301      	adds	r3, #1
 800423e:	643b      	str	r3, [r7, #64]	; 0x40
 8004240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004242:	2b03      	cmp	r3, #3
 8004244:	d9dd      	bls.n	8004202 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004246:	2300      	movs	r3, #0
 8004248:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800424a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <find_volume+0x13e>
 8004250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004252:	3b01      	subs	r3, #1
 8004254:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	3358      	adds	r3, #88	; 0x58
 800425c:	443b      	add	r3, r7
 800425e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004262:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004266:	2b00      	cmp	r3, #0
 8004268:	d005      	beq.n	8004276 <find_volume+0x15e>
 800426a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800426c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800426e:	f7ff fefd 	bl	800406c <check_fs>
 8004272:	4603      	mov	r3, r0
 8004274:	e000      	b.n	8004278 <find_volume+0x160>
 8004276:	2303      	movs	r3, #3
 8004278:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800427c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004280:	2b01      	cmp	r3, #1
 8004282:	d905      	bls.n	8004290 <find_volume+0x178>
 8004284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004286:	3301      	adds	r3, #1
 8004288:	643b      	str	r3, [r7, #64]	; 0x40
 800428a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800428c:	2b03      	cmp	r3, #3
 800428e:	d9e2      	bls.n	8004256 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004290:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004294:	2b04      	cmp	r3, #4
 8004296:	d101      	bne.n	800429c <find_volume+0x184>
 8004298:	2301      	movs	r3, #1
 800429a:	e17e      	b.n	800459a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800429c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d901      	bls.n	80042a8 <find_volume+0x190>
 80042a4:	230d      	movs	r3, #13
 80042a6:	e178      	b.n	800459a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80042a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042aa:	3330      	adds	r3, #48	; 0x30
 80042ac:	330b      	adds	r3, #11
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fe fc5a 	bl	8002b68 <ld_word>
 80042b4:	4603      	mov	r3, r0
 80042b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ba:	d001      	beq.n	80042c0 <find_volume+0x1a8>
 80042bc:	230d      	movs	r3, #13
 80042be:	e16c      	b.n	800459a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80042c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c2:	3330      	adds	r3, #48	; 0x30
 80042c4:	3316      	adds	r3, #22
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fe fc4e 	bl	8002b68 <ld_word>
 80042cc:	4603      	mov	r3, r0
 80042ce:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80042d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <find_volume+0x1cc>
 80042d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d8:	3330      	adds	r3, #48	; 0x30
 80042da:	3324      	adds	r3, #36	; 0x24
 80042dc:	4618      	mov	r0, r3
 80042de:	f7fe fc5b 	bl	8002b98 <ld_dword>
 80042e2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80042e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042e8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80042ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ec:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80042f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80042f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f6:	789b      	ldrb	r3, [r3, #2]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d005      	beq.n	8004308 <find_volume+0x1f0>
 80042fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fe:	789b      	ldrb	r3, [r3, #2]
 8004300:	2b02      	cmp	r3, #2
 8004302:	d001      	beq.n	8004308 <find_volume+0x1f0>
 8004304:	230d      	movs	r3, #13
 8004306:	e148      	b.n	800459a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800430a:	789b      	ldrb	r3, [r3, #2]
 800430c:	461a      	mov	r2, r3
 800430e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004310:	fb02 f303 	mul.w	r3, r2, r3
 8004314:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431c:	b29a      	uxth	r2, r3
 800431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004320:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004324:	895b      	ldrh	r3, [r3, #10]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d008      	beq.n	800433c <find_volume+0x224>
 800432a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432c:	895b      	ldrh	r3, [r3, #10]
 800432e:	461a      	mov	r2, r3
 8004330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004332:	895b      	ldrh	r3, [r3, #10]
 8004334:	3b01      	subs	r3, #1
 8004336:	4013      	ands	r3, r2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <find_volume+0x228>
 800433c:	230d      	movs	r3, #13
 800433e:	e12c      	b.n	800459a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004342:	3330      	adds	r3, #48	; 0x30
 8004344:	3311      	adds	r3, #17
 8004346:	4618      	mov	r0, r3
 8004348:	f7fe fc0e 	bl	8002b68 <ld_word>
 800434c:	4603      	mov	r3, r0
 800434e:	461a      	mov	r2, r3
 8004350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004352:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004356:	891b      	ldrh	r3, [r3, #8]
 8004358:	f003 030f 	and.w	r3, r3, #15
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <find_volume+0x24e>
 8004362:	230d      	movs	r3, #13
 8004364:	e119      	b.n	800459a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004368:	3330      	adds	r3, #48	; 0x30
 800436a:	3313      	adds	r3, #19
 800436c:	4618      	mov	r0, r3
 800436e:	f7fe fbfb 	bl	8002b68 <ld_word>
 8004372:	4603      	mov	r3, r0
 8004374:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004378:	2b00      	cmp	r3, #0
 800437a:	d106      	bne.n	800438a <find_volume+0x272>
 800437c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437e:	3330      	adds	r3, #48	; 0x30
 8004380:	3320      	adds	r3, #32
 8004382:	4618      	mov	r0, r3
 8004384:	f7fe fc08 	bl	8002b98 <ld_dword>
 8004388:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800438a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438c:	3330      	adds	r3, #48	; 0x30
 800438e:	330e      	adds	r3, #14
 8004390:	4618      	mov	r0, r3
 8004392:	f7fe fbe9 	bl	8002b68 <ld_word>
 8004396:	4603      	mov	r3, r0
 8004398:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800439a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <find_volume+0x28c>
 80043a0:	230d      	movs	r3, #13
 80043a2:	e0fa      	b.n	800459a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80043a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80043a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a8:	4413      	add	r3, r2
 80043aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043ac:	8912      	ldrh	r2, [r2, #8]
 80043ae:	0912      	lsrs	r2, r2, #4
 80043b0:	b292      	uxth	r2, r2
 80043b2:	4413      	add	r3, r2
 80043b4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80043b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d204      	bcs.n	80043c8 <find_volume+0x2b0>
 80043be:	230d      	movs	r3, #13
 80043c0:	e0eb      	b.n	800459a <find_volume+0x482>
 80043c2:	bf00      	nop
 80043c4:	200004d0 	.word	0x200004d0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80043c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043d0:	8952      	ldrh	r2, [r2, #10]
 80043d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80043d6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <find_volume+0x2ca>
 80043de:	230d      	movs	r3, #13
 80043e0:	e0db      	b.n	800459a <find_volume+0x482>
		fmt = FS_FAT32;
 80043e2:	2303      	movs	r3, #3
 80043e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d802      	bhi.n	80043f8 <find_volume+0x2e0>
 80043f2:	2302      	movs	r3, #2
 80043f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	f640 72f5 	movw	r2, #4085	; 0xff5
 80043fe:	4293      	cmp	r3, r2
 8004400:	d802      	bhi.n	8004408 <find_volume+0x2f0>
 8004402:	2301      	movs	r3, #1
 8004404:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	1c9a      	adds	r2, r3, #2
 800440c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8004410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004412:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004414:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004416:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800441a:	441a      	add	r2, r3
 800441c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8004420:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004424:	441a      	add	r2, r3
 8004426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004428:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800442a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800442e:	2b03      	cmp	r3, #3
 8004430:	d11e      	bne.n	8004470 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004434:	3330      	adds	r3, #48	; 0x30
 8004436:	332a      	adds	r3, #42	; 0x2a
 8004438:	4618      	mov	r0, r3
 800443a:	f7fe fb95 	bl	8002b68 <ld_word>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <find_volume+0x330>
 8004444:	230d      	movs	r3, #13
 8004446:	e0a8      	b.n	800459a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444a:	891b      	ldrh	r3, [r3, #8]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <find_volume+0x33c>
 8004450:	230d      	movs	r3, #13
 8004452:	e0a2      	b.n	800459a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004456:	3330      	adds	r3, #48	; 0x30
 8004458:	332c      	adds	r3, #44	; 0x2c
 800445a:	4618      	mov	r0, r3
 800445c:	f7fe fb9c 	bl	8002b98 <ld_dword>
 8004460:	4602      	mov	r2, r0
 8004462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004464:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	647b      	str	r3, [r7, #68]	; 0x44
 800446e:	e01f      	b.n	80044b0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004472:	891b      	ldrh	r3, [r3, #8]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <find_volume+0x364>
 8004478:	230d      	movs	r3, #13
 800447a:	e08e      	b.n	800459a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800447c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447e:	6a1a      	ldr	r2, [r3, #32]
 8004480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004482:	441a      	add	r2, r3
 8004484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004486:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004488:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800448c:	2b02      	cmp	r3, #2
 800448e:	d103      	bne.n	8004498 <find_volume+0x380>
 8004490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	e00a      	b.n	80044ae <find_volume+0x396>
 8004498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449a:	695a      	ldr	r2, [r3, #20]
 800449c:	4613      	mov	r3, r2
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	4413      	add	r3, r2
 80044a2:	085a      	lsrs	r2, r3, #1
 80044a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80044ae:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80044b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b2:	699a      	ldr	r2, [r3, #24]
 80044b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044b6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80044ba:	0a5b      	lsrs	r3, r3, #9
 80044bc:	429a      	cmp	r2, r3
 80044be:	d201      	bcs.n	80044c4 <find_volume+0x3ac>
 80044c0:	230d      	movs	r3, #13
 80044c2:	e06a      	b.n	800459a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80044c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c6:	f04f 32ff 	mov.w	r2, #4294967295
 80044ca:	611a      	str	r2, [r3, #16]
 80044cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ce:	691a      	ldr	r2, [r3, #16]
 80044d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80044d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d6:	2280      	movs	r2, #128	; 0x80
 80044d8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80044da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80044de:	2b03      	cmp	r3, #3
 80044e0:	d149      	bne.n	8004576 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80044e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e4:	3330      	adds	r3, #48	; 0x30
 80044e6:	3330      	adds	r3, #48	; 0x30
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fe fb3d 	bl	8002b68 <ld_word>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d140      	bne.n	8004576 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80044f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044f6:	3301      	adds	r3, #1
 80044f8:	4619      	mov	r1, r3
 80044fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80044fc:	f7fe fde4 	bl	80030c8 <move_window>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d137      	bne.n	8004576 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8004506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004508:	2200      	movs	r2, #0
 800450a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800450c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450e:	3330      	adds	r3, #48	; 0x30
 8004510:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004514:	4618      	mov	r0, r3
 8004516:	f7fe fb27 	bl	8002b68 <ld_word>
 800451a:	4603      	mov	r3, r0
 800451c:	461a      	mov	r2, r3
 800451e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004522:	429a      	cmp	r2, r3
 8004524:	d127      	bne.n	8004576 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004528:	3330      	adds	r3, #48	; 0x30
 800452a:	4618      	mov	r0, r3
 800452c:	f7fe fb34 	bl	8002b98 <ld_dword>
 8004530:	4603      	mov	r3, r0
 8004532:	4a1c      	ldr	r2, [pc, #112]	; (80045a4 <find_volume+0x48c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d11e      	bne.n	8004576 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453a:	3330      	adds	r3, #48	; 0x30
 800453c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004540:	4618      	mov	r0, r3
 8004542:	f7fe fb29 	bl	8002b98 <ld_dword>
 8004546:	4603      	mov	r3, r0
 8004548:	4a17      	ldr	r2, [pc, #92]	; (80045a8 <find_volume+0x490>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d113      	bne.n	8004576 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800454e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004550:	3330      	adds	r3, #48	; 0x30
 8004552:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004556:	4618      	mov	r0, r3
 8004558:	f7fe fb1e 	bl	8002b98 <ld_dword>
 800455c:	4602      	mov	r2, r0
 800455e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004560:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004564:	3330      	adds	r3, #48	; 0x30
 8004566:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800456a:	4618      	mov	r0, r3
 800456c:	f7fe fb14 	bl	8002b98 <ld_dword>
 8004570:	4602      	mov	r2, r0
 8004572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004574:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004578:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800457c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800457e:	4b0b      	ldr	r3, [pc, #44]	; (80045ac <find_volume+0x494>)
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	3301      	adds	r3, #1
 8004584:	b29a      	uxth	r2, r3
 8004586:	4b09      	ldr	r3, [pc, #36]	; (80045ac <find_volume+0x494>)
 8004588:	801a      	strh	r2, [r3, #0]
 800458a:	4b08      	ldr	r3, [pc, #32]	; (80045ac <find_volume+0x494>)
 800458c:	881a      	ldrh	r2, [r3, #0]
 800458e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004590:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004592:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004594:	f7fe fd30 	bl	8002ff8 <clear_lock>
#endif
	return FR_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3758      	adds	r7, #88	; 0x58
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	41615252 	.word	0x41615252
 80045a8:	61417272 	.word	0x61417272
 80045ac:	200004d4 	.word	0x200004d4

080045b0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80045ba:	2309      	movs	r3, #9
 80045bc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d01c      	beq.n	80045fe <validate+0x4e>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d018      	beq.n	80045fe <validate+0x4e>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d013      	beq.n	80045fe <validate+0x4e>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	889a      	ldrh	r2, [r3, #4]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	88db      	ldrh	r3, [r3, #6]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d10c      	bne.n	80045fe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	785b      	ldrb	r3, [r3, #1]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fe fa1c 	bl	8002a28 <disk_status>
 80045f0:	4603      	mov	r3, r0
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <validate+0x4e>
			res = FR_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d102      	bne.n	800460a <validate+0x5a>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	e000      	b.n	800460c <validate+0x5c>
 800460a:	2300      	movs	r3, #0
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	6013      	str	r3, [r2, #0]
	return res;
 8004610:	7bfb      	ldrb	r3, [r7, #15]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b088      	sub	sp, #32
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	4613      	mov	r3, r2
 8004628:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800462e:	f107 0310 	add.w	r3, r7, #16
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff fcd5 	bl	8003fe2 <get_ldnumber>
 8004638:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	2b00      	cmp	r3, #0
 800463e:	da01      	bge.n	8004644 <f_mount+0x28>
 8004640:	230b      	movs	r3, #11
 8004642:	e02b      	b.n	800469c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004644:	4a17      	ldr	r2, [pc, #92]	; (80046a4 <f_mount+0x88>)
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800464c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d005      	beq.n	8004660 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004654:	69b8      	ldr	r0, [r7, #24]
 8004656:	f7fe fccf 	bl	8002ff8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	2200      	movs	r2, #0
 800465e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d002      	beq.n	800466c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	490d      	ldr	r1, [pc, #52]	; (80046a4 <f_mount+0x88>)
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <f_mount+0x66>
 800467c:	79fb      	ldrb	r3, [r7, #7]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d001      	beq.n	8004686 <f_mount+0x6a>
 8004682:	2300      	movs	r3, #0
 8004684:	e00a      	b.n	800469c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004686:	f107 010c 	add.w	r1, r7, #12
 800468a:	f107 0308 	add.w	r3, r7, #8
 800468e:	2200      	movs	r2, #0
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff fd41 	bl	8004118 <find_volume>
 8004696:	4603      	mov	r3, r0
 8004698:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800469a:	7dfb      	ldrb	r3, [r7, #23]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3720      	adds	r7, #32
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	200004d0 	.word	0x200004d0

080046a8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b098      	sub	sp, #96	; 0x60
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	4613      	mov	r3, r2
 80046b4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <f_open+0x18>
 80046bc:	2309      	movs	r3, #9
 80046be:	e1ad      	b.n	8004a1c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80046c0:	79fb      	ldrb	r3, [r7, #7]
 80046c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046c6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80046c8:	79fa      	ldrb	r2, [r7, #7]
 80046ca:	f107 0110 	add.w	r1, r7, #16
 80046ce:	f107 0308 	add.w	r3, r7, #8
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fd20 	bl	8004118 <find_volume>
 80046d8:	4603      	mov	r3, r0
 80046da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80046de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f040 8191 	bne.w	8004a0a <f_open+0x362>
		dj.obj.fs = fs;
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	f107 0314 	add.w	r3, r7, #20
 80046f2:	4611      	mov	r1, r2
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff fc03 	bl	8003f00 <follow_path>
 80046fa:	4603      	mov	r3, r0
 80046fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004700:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004704:	2b00      	cmp	r3, #0
 8004706:	d11a      	bne.n	800473e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004708:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800470c:	b25b      	sxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	da03      	bge.n	800471a <f_open+0x72>
				res = FR_INVALID_NAME;
 8004712:	2306      	movs	r3, #6
 8004714:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004718:	e011      	b.n	800473e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800471a:	79fb      	ldrb	r3, [r7, #7]
 800471c:	f023 0301 	bic.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	bf14      	ite	ne
 8004724:	2301      	movne	r3, #1
 8004726:	2300      	moveq	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	461a      	mov	r2, r3
 800472c:	f107 0314 	add.w	r3, r7, #20
 8004730:	4611      	mov	r1, r2
 8004732:	4618      	mov	r0, r3
 8004734:	f7fe fb18 	bl	8002d68 <chk_lock>
 8004738:	4603      	mov	r3, r0
 800473a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800473e:	79fb      	ldrb	r3, [r7, #7]
 8004740:	f003 031c 	and.w	r3, r3, #28
 8004744:	2b00      	cmp	r3, #0
 8004746:	d07f      	beq.n	8004848 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8004748:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800474c:	2b00      	cmp	r3, #0
 800474e:	d017      	beq.n	8004780 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004750:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004754:	2b04      	cmp	r3, #4
 8004756:	d10e      	bne.n	8004776 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004758:	f7fe fb62 	bl	8002e20 <enq_lock>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d006      	beq.n	8004770 <f_open+0xc8>
 8004762:	f107 0314 	add.w	r3, r7, #20
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff faa4 	bl	8003cb4 <dir_register>
 800476c:	4603      	mov	r3, r0
 800476e:	e000      	b.n	8004772 <f_open+0xca>
 8004770:	2312      	movs	r3, #18
 8004772:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004776:	79fb      	ldrb	r3, [r7, #7]
 8004778:	f043 0308 	orr.w	r3, r3, #8
 800477c:	71fb      	strb	r3, [r7, #7]
 800477e:	e010      	b.n	80047a2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004780:	7ebb      	ldrb	r3, [r7, #26]
 8004782:	f003 0311 	and.w	r3, r3, #17
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <f_open+0xea>
					res = FR_DENIED;
 800478a:	2307      	movs	r3, #7
 800478c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004790:	e007      	b.n	80047a2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d002      	beq.n	80047a2 <f_open+0xfa>
 800479c:	2308      	movs	r3, #8
 800479e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80047a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d168      	bne.n	800487c <f_open+0x1d4>
 80047aa:	79fb      	ldrb	r3, [r7, #7]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d063      	beq.n	800487c <f_open+0x1d4>
				dw = GET_FATTIME();
 80047b4:	f7fd fbec 	bl	8001f90 <get_fattime>
 80047b8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80047ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047bc:	330e      	adds	r3, #14
 80047be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7fe fa27 	bl	8002c14 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80047c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c8:	3316      	adds	r3, #22
 80047ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fe fa21 	bl	8002c14 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80047d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d4:	330b      	adds	r3, #11
 80047d6:	2220      	movs	r2, #32
 80047d8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047de:	4611      	mov	r1, r2
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff f976 	bl	8003ad2 <ld_clust>
 80047e6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80047ec:	2200      	movs	r2, #0
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7ff f98e 	bl	8003b10 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80047f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f6:	331c      	adds	r3, #28
 80047f8:	2100      	movs	r1, #0
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fe fa0a 	bl	8002c14 <st_dword>
					fs->wflag = 1;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	2201      	movs	r2, #1
 8004804:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8004806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004808:	2b00      	cmp	r3, #0
 800480a:	d037      	beq.n	800487c <f_open+0x1d4>
						dw = fs->winsect;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8004812:	f107 0314 	add.w	r3, r7, #20
 8004816:	2200      	movs	r2, #0
 8004818:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800481a:	4618      	mov	r0, r3
 800481c:	f7fe fea1 	bl	8003562 <remove_chain>
 8004820:	4603      	mov	r3, r0
 8004822:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8004826:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800482a:	2b00      	cmp	r3, #0
 800482c:	d126      	bne.n	800487c <f_open+0x1d4>
							res = move_window(fs, dw);
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004832:	4618      	mov	r0, r3
 8004834:	f7fe fc48 	bl	80030c8 <move_window>
 8004838:	4603      	mov	r3, r0
 800483a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004842:	3a01      	subs	r2, #1
 8004844:	60da      	str	r2, [r3, #12]
 8004846:	e019      	b.n	800487c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8004848:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800484c:	2b00      	cmp	r3, #0
 800484e:	d115      	bne.n	800487c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8004850:	7ebb      	ldrb	r3, [r7, #26]
 8004852:	f003 0310 	and.w	r3, r3, #16
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <f_open+0x1ba>
					res = FR_NO_FILE;
 800485a:	2304      	movs	r3, #4
 800485c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004860:	e00c      	b.n	800487c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8004862:	79fb      	ldrb	r3, [r7, #7]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d007      	beq.n	800487c <f_open+0x1d4>
 800486c:	7ebb      	ldrb	r3, [r7, #26]
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <f_open+0x1d4>
						res = FR_DENIED;
 8004876:	2307      	movs	r3, #7
 8004878:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800487c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004880:	2b00      	cmp	r3, #0
 8004882:	d128      	bne.n	80048d6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800488e:	79fb      	ldrb	r3, [r7, #7]
 8004890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004894:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800489e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80048a4:	79fb      	ldrb	r3, [r7, #7]
 80048a6:	f023 0301 	bic.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	bf14      	ite	ne
 80048ae:	2301      	movne	r3, #1
 80048b0:	2300      	moveq	r3, #0
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	461a      	mov	r2, r3
 80048b6:	f107 0314 	add.w	r3, r7, #20
 80048ba:	4611      	mov	r1, r2
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fe fad1 	bl	8002e64 <inc_lock>
 80048c2:	4602      	mov	r2, r0
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d102      	bne.n	80048d6 <f_open+0x22e>
 80048d0:	2302      	movs	r3, #2
 80048d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80048d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f040 8095 	bne.w	8004a0a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048e4:	4611      	mov	r1, r2
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff f8f3 	bl	8003ad2 <ld_clust>
 80048ec:	4602      	mov	r2, r0
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80048f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f4:	331c      	adds	r3, #28
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fe f94e 	bl	8002b98 <ld_dword>
 80048fc:	4602      	mov	r2, r0
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	88da      	ldrh	r2, [r3, #6]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	79fa      	ldrb	r2, [r7, #7]
 800491a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3330      	adds	r3, #48	; 0x30
 8004932:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004936:	2100      	movs	r1, #0
 8004938:	4618      	mov	r0, r3
 800493a:	f7fe f9b8 	bl	8002cae <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	f003 0320 	and.w	r3, r3, #32
 8004944:	2b00      	cmp	r3, #0
 8004946:	d060      	beq.n	8004a0a <f_open+0x362>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d05c      	beq.n	8004a0a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	895b      	ldrh	r3, [r3, #10]
 800495c:	025b      	lsls	r3, r3, #9
 800495e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	657b      	str	r3, [r7, #84]	; 0x54
 800496c:	e016      	b.n	800499c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004972:	4618      	mov	r0, r3
 8004974:	f7fe fc63 	bl	800323e <get_fat>
 8004978:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800497a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800497c:	2b01      	cmp	r3, #1
 800497e:	d802      	bhi.n	8004986 <f_open+0x2de>
 8004980:	2302      	movs	r3, #2
 8004982:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8004986:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498c:	d102      	bne.n	8004994 <f_open+0x2ec>
 800498e:	2301      	movs	r3, #1
 8004990:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004994:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	657b      	str	r3, [r7, #84]	; 0x54
 800499c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d103      	bne.n	80049ac <f_open+0x304>
 80049a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80049a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d8e0      	bhi.n	800496e <f_open+0x2c6>
				}
				fp->clust = clst;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049b0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80049b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d127      	bne.n	8004a0a <f_open+0x362>
 80049ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d022      	beq.n	8004a0a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fe fc19 	bl	8003200 <clust2sect>
 80049ce:	6478      	str	r0, [r7, #68]	; 0x44
 80049d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d103      	bne.n	80049de <f_open+0x336>
						res = FR_INT_ERR;
 80049d6:	2302      	movs	r3, #2
 80049d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80049dc:	e015      	b.n	8004a0a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80049de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049e0:	0a5a      	lsrs	r2, r3, #9
 80049e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049e4:	441a      	add	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	7858      	ldrb	r0, [r3, #1]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a1a      	ldr	r2, [r3, #32]
 80049f8:	2301      	movs	r3, #1
 80049fa:	f7fe f857 	bl	8002aac <disk_read>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <f_open+0x362>
 8004a04:	2301      	movs	r3, #1
 8004a06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004a0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <f_open+0x370>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8004a18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3760      	adds	r7, #96	; 0x60
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08e      	sub	sp, #56	; 0x38
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f107 0214 	add.w	r2, r7, #20
 8004a42:	4611      	mov	r1, r2
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7ff fdb3 	bl	80045b0 <validate>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004a50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d107      	bne.n	8004a68 <f_read+0x44>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	7d5b      	ldrb	r3, [r3, #21]
 8004a5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004a60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d002      	beq.n	8004a6e <f_read+0x4a>
 8004a68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a6c:	e115      	b.n	8004c9a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	7d1b      	ldrb	r3, [r3, #20]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <f_read+0x5a>
 8004a7a:	2307      	movs	r3, #7
 8004a7c:	e10d      	b.n	8004c9a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	f240 80fe 	bls.w	8004c90 <f_read+0x26c>
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8004a98:	e0fa      	b.n	8004c90 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f040 80c6 	bne.w	8004c34 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	0a5b      	lsrs	r3, r3, #9
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	8952      	ldrh	r2, [r2, #10]
 8004ab2:	3a01      	subs	r2, #1
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d12f      	bne.n	8004b1e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d103      	bne.n	8004ace <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	633b      	str	r3, [r7, #48]	; 0x30
 8004acc:	e013      	b.n	8004af6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	4619      	mov	r1, r3
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f7fe fe3d 	bl	800375c <clmt_clust>
 8004ae2:	6338      	str	r0, [r7, #48]	; 0x30
 8004ae4:	e007      	b.n	8004af6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	4619      	mov	r1, r3
 8004aee:	4610      	mov	r0, r2
 8004af0:	f7fe fba5 	bl	800323e <get_fat>
 8004af4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8004af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d804      	bhi.n	8004b06 <f_read+0xe2>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2202      	movs	r2, #2
 8004b00:	755a      	strb	r2, [r3, #21]
 8004b02:	2302      	movs	r3, #2
 8004b04:	e0c9      	b.n	8004c9a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0c:	d104      	bne.n	8004b18 <f_read+0xf4>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2201      	movs	r2, #1
 8004b12:	755a      	strb	r2, [r3, #21]
 8004b14:	2301      	movs	r3, #1
 8004b16:	e0c0      	b.n	8004c9a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b1c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	69db      	ldr	r3, [r3, #28]
 8004b24:	4619      	mov	r1, r3
 8004b26:	4610      	mov	r0, r2
 8004b28:	f7fe fb6a 	bl	8003200 <clust2sect>
 8004b2c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d104      	bne.n	8004b3e <f_read+0x11a>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2202      	movs	r2, #2
 8004b38:	755a      	strb	r2, [r3, #21]
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	e0ad      	b.n	8004c9a <f_read+0x276>
			sect += csect;
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	4413      	add	r3, r2
 8004b44:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	0a5b      	lsrs	r3, r3, #9
 8004b4a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8004b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d039      	beq.n	8004bc6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004b52:	69fa      	ldr	r2, [r7, #28]
 8004b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b56:	4413      	add	r3, r2
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	8952      	ldrh	r2, [r2, #10]
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d905      	bls.n	8004b6c <f_read+0x148>
					cc = fs->csize - csect;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	895b      	ldrh	r3, [r3, #10]
 8004b64:	461a      	mov	r2, r3
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	7858      	ldrb	r0, [r3, #1]
 8004b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b76:	f7fd ff99 	bl	8002aac <disk_read>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d004      	beq.n	8004b8a <f_read+0x166>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2201      	movs	r2, #1
 8004b84:	755a      	strb	r2, [r3, #21]
 8004b86:	2301      	movs	r3, #1
 8004b88:	e087      	b.n	8004c9a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	7d1b      	ldrb	r3, [r3, #20]
 8004b8e:	b25b      	sxtb	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	da14      	bge.n	8004bbe <f_read+0x19a>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6a1a      	ldr	r2, [r3, #32]
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d90d      	bls.n	8004bbe <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6a1a      	ldr	r2, [r3, #32]
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	025b      	lsls	r3, r3, #9
 8004bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bae:	18d0      	adds	r0, r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	3330      	adds	r3, #48	; 0x30
 8004bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bb8:	4619      	mov	r1, r3
 8004bba:	f7fe f857 	bl	8002c6c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8004bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc0:	025b      	lsls	r3, r3, #9
 8004bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8004bc4:	e050      	b.n	8004c68 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d02e      	beq.n	8004c2e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	7d1b      	ldrb	r3, [r3, #20]
 8004bd4:	b25b      	sxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	da18      	bge.n	8004c0c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	7858      	ldrb	r0, [r3, #1]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6a1a      	ldr	r2, [r3, #32]
 8004be8:	2301      	movs	r3, #1
 8004bea:	f7fd ff7f 	bl	8002aec <disk_write>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d004      	beq.n	8004bfe <f_read+0x1da>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	755a      	strb	r2, [r3, #21]
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e04d      	b.n	8004c9a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	7d1b      	ldrb	r3, [r3, #20]
 8004c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	7858      	ldrb	r0, [r3, #1]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004c16:	2301      	movs	r3, #1
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	f7fd ff47 	bl	8002aac <disk_read>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d004      	beq.n	8004c2e <f_read+0x20a>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2201      	movs	r2, #1
 8004c28:	755a      	strb	r2, [r3, #21]
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e035      	b.n	8004c9a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c3c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8004c40:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8004c42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d901      	bls.n	8004c4e <f_read+0x22a>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c5c:	4413      	add	r3, r2
 8004c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c60:	4619      	mov	r1, r3
 8004c62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c64:	f7fe f802 	bl	8002c6c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8004c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6c:	4413      	add	r3, r2
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	699a      	ldr	r2, [r3, #24]
 8004c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c76:	441a      	add	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	619a      	str	r2, [r3, #24]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c82:	441a      	add	r2, r3
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f47f af01 	bne.w	8004a9a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3738      	adds	r7, #56	; 0x38
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b08c      	sub	sp, #48	; 0x30
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	607a      	str	r2, [r7, #4]
 8004cae:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f107 0210 	add.w	r2, r7, #16
 8004cc0:	4611      	mov	r1, r2
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff fc74 	bl	80045b0 <validate>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004cce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d107      	bne.n	8004ce6 <f_write+0x44>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	7d5b      	ldrb	r3, [r3, #21]
 8004cda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004cde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <f_write+0x4a>
 8004ce6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004cea:	e14b      	b.n	8004f84 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	7d1b      	ldrb	r3, [r3, #20]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <f_write+0x5a>
 8004cf8:	2307      	movs	r3, #7
 8004cfa:	e143      	b.n	8004f84 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	699a      	ldr	r2, [r3, #24]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	441a      	add	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	f080 812d 	bcs.w	8004f68 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	43db      	mvns	r3, r3
 8004d14:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8004d16:	e127      	b.n	8004f68 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f040 80e3 	bne.w	8004eec <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	0a5b      	lsrs	r3, r3, #9
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	8952      	ldrh	r2, [r2, #10]
 8004d30:	3a01      	subs	r2, #1
 8004d32:	4013      	ands	r3, r2
 8004d34:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d143      	bne.n	8004dc4 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10c      	bne.n	8004d5e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8004d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d11a      	bne.n	8004d86 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2100      	movs	r1, #0
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fe fc69 	bl	800362c <create_chain>
 8004d5a:	62b8      	str	r0, [r7, #40]	; 0x28
 8004d5c:	e013      	b.n	8004d86 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d007      	beq.n	8004d76 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f7fe fcf5 	bl	800375c <clmt_clust>
 8004d72:	62b8      	str	r0, [r7, #40]	; 0x28
 8004d74:	e007      	b.n	8004d86 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4610      	mov	r0, r2
 8004d80:	f7fe fc54 	bl	800362c <create_chain>
 8004d84:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 80f2 	beq.w	8004f72 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8004d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d104      	bne.n	8004d9e <f_write+0xfc>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2202      	movs	r2, #2
 8004d98:	755a      	strb	r2, [r3, #21]
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	e0f2      	b.n	8004f84 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da4:	d104      	bne.n	8004db0 <f_write+0x10e>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2201      	movs	r2, #1
 8004daa:	755a      	strb	r2, [r3, #21]
 8004dac:	2301      	movs	r3, #1
 8004dae:	e0e9      	b.n	8004f84 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004db4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d102      	bne.n	8004dc4 <f_write+0x122>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dc2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	7d1b      	ldrb	r3, [r3, #20]
 8004dc8:	b25b      	sxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	da18      	bge.n	8004e00 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	7858      	ldrb	r0, [r3, #1]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6a1a      	ldr	r2, [r3, #32]
 8004ddc:	2301      	movs	r3, #1
 8004dde:	f7fd fe85 	bl	8002aec <disk_write>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d004      	beq.n	8004df2 <f_write+0x150>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2201      	movs	r2, #1
 8004dec:	755a      	strb	r2, [r3, #21]
 8004dee:	2301      	movs	r3, #1
 8004df0:	e0c8      	b.n	8004f84 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	7d1b      	ldrb	r3, [r3, #20]
 8004df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	4619      	mov	r1, r3
 8004e08:	4610      	mov	r0, r2
 8004e0a:	f7fe f9f9 	bl	8003200 <clust2sect>
 8004e0e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d104      	bne.n	8004e20 <f_write+0x17e>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2202      	movs	r2, #2
 8004e1a:	755a      	strb	r2, [r3, #21]
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e0b1      	b.n	8004f84 <f_write+0x2e2>
			sect += csect;
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	4413      	add	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	0a5b      	lsrs	r3, r3, #9
 8004e2c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d03c      	beq.n	8004eae <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	4413      	add	r3, r2
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	8952      	ldrh	r2, [r2, #10]
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d905      	bls.n	8004e4e <f_write+0x1ac>
					cc = fs->csize - csect;
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	895b      	ldrh	r3, [r3, #10]
 8004e46:	461a      	mov	r2, r3
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	7858      	ldrb	r0, [r3, #1]
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	69f9      	ldr	r1, [r7, #28]
 8004e58:	f7fd fe48 	bl	8002aec <disk_write>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d004      	beq.n	8004e6c <f_write+0x1ca>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2201      	movs	r2, #1
 8004e66:	755a      	strb	r2, [r3, #21]
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e08b      	b.n	8004f84 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a1a      	ldr	r2, [r3, #32]
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	6a3a      	ldr	r2, [r7, #32]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d915      	bls.n	8004ea6 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a1a      	ldr	r2, [r3, #32]
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	025b      	lsls	r3, r3, #9
 8004e8a:	69fa      	ldr	r2, [r7, #28]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e92:	4619      	mov	r1, r3
 8004e94:	f7fd feea 	bl	8002c6c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	7d1b      	ldrb	r3, [r3, #20]
 8004e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	025b      	lsls	r3, r3, #9
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8004eac:	e03f      	b.n	8004f2e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d016      	beq.n	8004ee6 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	699a      	ldr	r2, [r3, #24]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d210      	bcs.n	8004ee6 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	7858      	ldrb	r0, [r3, #1]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004ece:	2301      	movs	r3, #1
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	f7fd fdeb 	bl	8002aac <disk_read>
 8004ed6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d004      	beq.n	8004ee6 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	755a      	strb	r2, [r3, #21]
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e04e      	b.n	8004f84 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8004ef8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8004efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d901      	bls.n	8004f06 <f_write+0x264>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f14:	4413      	add	r3, r2
 8004f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f18:	69f9      	ldr	r1, [r7, #28]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fd fea6 	bl	8002c6c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	7d1b      	ldrb	r3, [r3, #20]
 8004f24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8004f2e:	69fa      	ldr	r2, [r7, #28]
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	4413      	add	r3, r2
 8004f34:	61fb      	str	r3, [r7, #28]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	699a      	ldr	r2, [r3, #24]
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	441a      	add	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	619a      	str	r2, [r3, #24]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	bf38      	it	cc
 8004f4e:	461a      	movcc	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	60da      	str	r2, [r3, #12]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	441a      	add	r2, r3
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f47f aed4 	bne.w	8004d18 <f_write+0x76>
 8004f70:	e000      	b.n	8004f74 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004f72:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	7d1b      	ldrb	r3, [r3, #20]
 8004f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f7c:	b2da      	uxtb	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3730      	adds	r7, #48	; 0x30
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f107 0208 	add.w	r2, r7, #8
 8004f9a:	4611      	mov	r1, r2
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff fb07 	bl	80045b0 <validate>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004fa6:	7dfb      	ldrb	r3, [r7, #23]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d168      	bne.n	800507e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	7d1b      	ldrb	r3, [r3, #20]
 8004fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d062      	beq.n	800507e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	7d1b      	ldrb	r3, [r3, #20]
 8004fbc:	b25b      	sxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	da15      	bge.n	8004fee <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	7858      	ldrb	r0, [r3, #1]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a1a      	ldr	r2, [r3, #32]
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	f7fd fd8b 	bl	8002aec <disk_write>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <f_sync+0x54>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e04f      	b.n	8005080 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	7d1b      	ldrb	r3, [r3, #20]
 8004fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8004fee:	f7fc ffcf 	bl	8001f90 <get_fattime>
 8004ff2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	4610      	mov	r0, r2
 8004ffe:	f7fe f863 	bl	80030c8 <move_window>
 8005002:	4603      	mov	r3, r0
 8005004:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005006:	7dfb      	ldrb	r3, [r7, #23]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d138      	bne.n	800507e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005010:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	330b      	adds	r3, #11
 8005016:	781a      	ldrb	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	330b      	adds	r3, #11
 800501c:	f042 0220 	orr.w	r2, r2, #32
 8005020:	b2d2      	uxtb	r2, r2
 8005022:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6818      	ldr	r0, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	461a      	mov	r2, r3
 800502e:	68f9      	ldr	r1, [r7, #12]
 8005030:	f7fe fd6e 	bl	8003b10 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f103 021c 	add.w	r2, r3, #28
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	4619      	mov	r1, r3
 8005040:	4610      	mov	r0, r2
 8005042:	f7fd fde7 	bl	8002c14 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	3316      	adds	r3, #22
 800504a:	6939      	ldr	r1, [r7, #16]
 800504c:	4618      	mov	r0, r3
 800504e:	f7fd fde1 	bl	8002c14 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	3312      	adds	r3, #18
 8005056:	2100      	movs	r1, #0
 8005058:	4618      	mov	r0, r3
 800505a:	f7fd fdc0 	bl	8002bde <st_word>
					fs->wflag = 1;
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	2201      	movs	r2, #1
 8005062:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	4618      	mov	r0, r3
 8005068:	f7fe f85c 	bl	8003124 <sync_fs>
 800506c:	4603      	mov	r3, r0
 800506e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	7d1b      	ldrb	r3, [r3, #20]
 8005074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005078:	b2da      	uxtb	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800507e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005080:	4618      	mov	r0, r3
 8005082:	3718      	adds	r7, #24
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f7ff ff7b 	bl	8004f8c <f_sync>
 8005096:	4603      	mov	r3, r0
 8005098:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800509a:	7bfb      	ldrb	r3, [r7, #15]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d118      	bne.n	80050d2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f107 0208 	add.w	r2, r7, #8
 80050a6:	4611      	mov	r1, r2
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff fa81 	bl	80045b0 <validate>
 80050ae:	4603      	mov	r3, r0
 80050b0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10c      	bne.n	80050d2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	4618      	mov	r0, r3
 80050be:	f7fd ff5f 	bl	8002f80 <dec_lock>
 80050c2:	4603      	mov	r3, r0
 80050c4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80050c6:	7bfb      	ldrb	r3, [r7, #15]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d102      	bne.n	80050d2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <f_opendir+0x14>
 80050ec:	2309      	movs	r3, #9
 80050ee:	e064      	b.n	80051ba <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80050f4:	f107 010c 	add.w	r1, r7, #12
 80050f8:	463b      	mov	r3, r7
 80050fa:	2200      	movs	r2, #0
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7ff f80b 	bl	8004118 <find_volume>
 8005102:	4603      	mov	r3, r0
 8005104:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005106:	7dfb      	ldrb	r3, [r7, #23]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d14f      	bne.n	80051ac <f_opendir+0xd0>
		obj->fs = fs;
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	4619      	mov	r1, r3
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7fe fef2 	bl	8003f00 <follow_path>
 800511c:	4603      	mov	r3, r0
 800511e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8005120:	7dfb      	ldrb	r3, [r7, #23]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d13d      	bne.n	80051a2 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800512c:	b25b      	sxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	db12      	blt.n	8005158 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	799b      	ldrb	r3, [r3, #6]
 8005136:	f003 0310 	and.w	r3, r3, #16
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	4619      	mov	r1, r3
 8005146:	4610      	mov	r0, r2
 8005148:	f7fe fcc3 	bl	8003ad2 <ld_clust>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	609a      	str	r2, [r3, #8]
 8005152:	e001      	b.n	8005158 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8005154:	2305      	movs	r3, #5
 8005156:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8005158:	7dfb      	ldrb	r3, [r7, #23]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d121      	bne.n	80051a2 <f_opendir+0xc6>
				obj->id = fs->id;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	88da      	ldrh	r2, [r3, #6]
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8005166:	2100      	movs	r1, #0
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7fe fb2b 	bl	80037c4 <dir_sdi>
 800516e:	4603      	mov	r3, r0
 8005170:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8005172:	7dfb      	ldrb	r3, [r7, #23]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d114      	bne.n	80051a2 <f_opendir+0xc6>
					if (obj->sclust) {
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00d      	beq.n	800519c <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8005180:	2100      	movs	r1, #0
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7fd fe6e 	bl	8002e64 <inc_lock>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d105      	bne.n	80051a2 <f_opendir+0xc6>
 8005196:	2312      	movs	r3, #18
 8005198:	75fb      	strb	r3, [r7, #23]
 800519a:	e002      	b.n	80051a2 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	2200      	movs	r2, #0
 80051a0:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80051a2:	7dfb      	ldrb	r3, [r7, #23]
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d101      	bne.n	80051ac <f_opendir+0xd0>
 80051a8:	2305      	movs	r3, #5
 80051aa:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80051ac:	7dfb      	ldrb	r3, [r7, #23]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <f_opendir+0xdc>
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	2200      	movs	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80051b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f107 0208 	add.w	r2, r7, #8
 80051d0:	4611      	mov	r1, r2
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7ff f9ec 	bl	80045b0 <validate>
 80051d8:	4603      	mov	r3, r0
 80051da:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d110      	bne.n	8005204 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d006      	beq.n	80051f8 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fd fec6 	bl	8002f80 <dec_lock>
 80051f4:	4603      	mov	r3, r0
 80051f6:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d102      	bne.n	8005204 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8005204:	7bfb      	ldrb	r3, [r7, #15]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f107 0208 	add.w	r2, r7, #8
 800521e:	4611      	mov	r1, r2
 8005220:	4618      	mov	r0, r3
 8005222:	f7ff f9c5 	bl	80045b0 <validate>
 8005226:	4603      	mov	r3, r0
 8005228:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800522a:	7bfb      	ldrb	r3, [r7, #15]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d126      	bne.n	800527e <f_readdir+0x70>
		if (!fno) {
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d106      	bne.n	8005244 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8005236:	2100      	movs	r1, #0
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7fe fac3 	bl	80037c4 <dir_sdi>
 800523e:	4603      	mov	r3, r0
 8005240:	73fb      	strb	r3, [r7, #15]
 8005242:	e01c      	b.n	800527e <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8005244:	2100      	movs	r1, #0
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7fe fc82 	bl	8003b50 <dir_read>
 800524c:	4603      	mov	r3, r0
 800524e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8005250:	7bfb      	ldrb	r3, [r7, #15]
 8005252:	2b04      	cmp	r3, #4
 8005254:	d101      	bne.n	800525a <f_readdir+0x4c>
 8005256:	2300      	movs	r3, #0
 8005258:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800525a:	7bfb      	ldrb	r3, [r7, #15]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10e      	bne.n	800527e <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8005260:	6839      	ldr	r1, [r7, #0]
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7fe fd58 	bl	8003d18 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8005268:	2100      	movs	r1, #0
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7fe fb25 	bl	80038ba <dir_next>
 8005270:	4603      	mov	r3, r0
 8005272:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8005274:	7bfb      	ldrb	r3, [r7, #15]
 8005276:	2b04      	cmp	r3, #4
 8005278:	d101      	bne.n	800527e <f_readdir+0x70>
 800527a:	2300      	movs	r3, #0
 800527c:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800527e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b092      	sub	sp, #72	; 0x48
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8005294:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005298:	f107 030c 	add.w	r3, r7, #12
 800529c:	2200      	movs	r2, #0
 800529e:	4618      	mov	r0, r3
 80052a0:	f7fe ff3a 	bl	8004118 <find_volume>
 80052a4:	4603      	mov	r3, r0
 80052a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80052aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f040 8099 	bne.w	80053e6 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80052b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80052ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052bc:	691a      	ldr	r2, [r3, #16]
 80052be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	3b02      	subs	r3, #2
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d804      	bhi.n	80052d2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80052c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ca:	691a      	ldr	r2, [r3, #16]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	e089      	b.n	80053e6 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80052d2:	2300      	movs	r3, #0
 80052d4:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80052d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d128      	bne.n	8005330 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80052de:	2302      	movs	r3, #2
 80052e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e4:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80052e6:	f107 0314 	add.w	r3, r7, #20
 80052ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7fd ffa6 	bl	800323e <get_fat>
 80052f2:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80052f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fa:	d103      	bne.n	8005304 <f_getfree+0x7c>
 80052fc:	2301      	movs	r3, #1
 80052fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005302:	e063      	b.n	80053cc <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8005304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005306:	2b01      	cmp	r3, #1
 8005308:	d103      	bne.n	8005312 <f_getfree+0x8a>
 800530a:	2302      	movs	r3, #2
 800530c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005310:	e05c      	b.n	80053cc <f_getfree+0x144>
					if (stat == 0) nfree++;
 8005312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005314:	2b00      	cmp	r3, #0
 8005316:	d102      	bne.n	800531e <f_getfree+0x96>
 8005318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800531a:	3301      	adds	r3, #1
 800531c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800531e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005320:	3301      	adds	r3, #1
 8005322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800532a:	429a      	cmp	r2, r3
 800532c:	d3db      	bcc.n	80052e6 <f_getfree+0x5e>
 800532e:	e04d      	b.n	80053cc <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8005330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800533c:	2300      	movs	r3, #0
 800533e:	637b      	str	r3, [r7, #52]	; 0x34
 8005340:	2300      	movs	r3, #0
 8005342:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8005344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005346:	2b00      	cmp	r3, #0
 8005348:	d113      	bne.n	8005372 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800534a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800534c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	63ba      	str	r2, [r7, #56]	; 0x38
 8005352:	4619      	mov	r1, r3
 8005354:	f7fd feb8 	bl	80030c8 <move_window>
 8005358:	4603      	mov	r3, r0
 800535a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800535e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005362:	2b00      	cmp	r3, #0
 8005364:	d131      	bne.n	80053ca <f_getfree+0x142>
							p = fs->win;
 8005366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005368:	3330      	adds	r3, #48	; 0x30
 800536a:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800536c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005370:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8005372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	2b02      	cmp	r3, #2
 8005378:	d10f      	bne.n	800539a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800537a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800537c:	f7fd fbf4 	bl	8002b68 <ld_word>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d102      	bne.n	800538c <f_getfree+0x104>
 8005386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005388:	3301      	adds	r3, #1
 800538a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800538c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538e:	3302      	adds	r3, #2
 8005390:	633b      	str	r3, [r7, #48]	; 0x30
 8005392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005394:	3b02      	subs	r3, #2
 8005396:	637b      	str	r3, [r7, #52]	; 0x34
 8005398:	e010      	b.n	80053bc <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800539a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800539c:	f7fd fbfc 	bl	8002b98 <ld_dword>
 80053a0:	4603      	mov	r3, r0
 80053a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d102      	bne.n	80053b0 <f_getfree+0x128>
 80053aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ac:	3301      	adds	r3, #1
 80053ae:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80053b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b2:	3304      	adds	r3, #4
 80053b4:	633b      	str	r3, [r7, #48]	; 0x30
 80053b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b8:	3b04      	subs	r3, #4
 80053ba:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80053bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053be:	3b01      	subs	r3, #1
 80053c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1bd      	bne.n	8005344 <f_getfree+0xbc>
 80053c8:	e000      	b.n	80053cc <f_getfree+0x144>
							if (res != FR_OK) break;
 80053ca:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053d0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80053d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053d6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80053d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053da:	791a      	ldrb	r2, [r3, #4]
 80053dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053de:	f042 0201 	orr.w	r2, r2, #1
 80053e2:	b2d2      	uxtb	r2, r2
 80053e4:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80053e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3748      	adds	r7, #72	; 0x48
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
	...

080053f4 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 80053f4:	b590      	push	{r4, r7, lr}
 80053f6:	b09d      	sub	sp, #116	; 0x74
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	607a      	str	r2, [r7, #4]
 80053fe:	603b      	str	r3, [r7, #0]
 8005400:	460b      	mov	r3, r1
 8005402:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8005404:	2301      	movs	r3, #1
 8005406:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8005408:	f44f 7300 	mov.w	r3, #512	; 0x200
 800540c:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800540e:	f107 030c 	add.w	r3, r7, #12
 8005412:	4618      	mov	r0, r3
 8005414:	f7fe fde5 	bl	8003fe2 <get_ldnumber>
 8005418:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800541a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800541c:	2b00      	cmp	r3, #0
 800541e:	da02      	bge.n	8005426 <f_mkfs+0x32>
 8005420:	230b      	movs	r3, #11
 8005422:	f000 bc0d 	b.w	8005c40 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8005426:	4a94      	ldr	r2, [pc, #592]	; (8005678 <f_mkfs+0x284>)
 8005428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800542a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d005      	beq.n	800543e <f_mkfs+0x4a>
 8005432:	4a91      	ldr	r2, [pc, #580]	; (8005678 <f_mkfs+0x284>)
 8005434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800543a:	2200      	movs	r2, #0
 800543c:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800543e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005440:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8005444:	2300      	movs	r3, #0
 8005446:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800544a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800544e:	4618      	mov	r0, r3
 8005450:	f7fd fb04 	bl	8002a5c <disk_initialize>
 8005454:	4603      	mov	r3, r0
 8005456:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800545a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <f_mkfs+0x76>
 8005466:	2303      	movs	r3, #3
 8005468:	e3ea      	b.n	8005c40 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800546a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800546e:	f003 0304 	and.w	r3, r3, #4
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <f_mkfs+0x86>
 8005476:	230a      	movs	r3, #10
 8005478:	e3e2      	b.n	8005c40 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800547a:	f107 0214 	add.w	r2, r7, #20
 800547e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005482:	2103      	movs	r1, #3
 8005484:	4618      	mov	r0, r3
 8005486:	f7fd fb51 	bl	8002b2c <disk_ioctl>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10c      	bne.n	80054aa <f_mkfs+0xb6>
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d009      	beq.n	80054aa <f_mkfs+0xb6>
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800549c:	d805      	bhi.n	80054aa <f_mkfs+0xb6>
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	1e5a      	subs	r2, r3, #1
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	4013      	ands	r3, r2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <f_mkfs+0xba>
 80054aa:	2301      	movs	r3, #1
 80054ac:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 80054ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054b2:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <f_mkfs+0xce>
 80054ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d309      	bcc.n	80054d6 <f_mkfs+0xe2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054c8:	d805      	bhi.n	80054d6 <f_mkfs+0xe2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	1e5a      	subs	r2, r3, #1
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4013      	ands	r3, r2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <f_mkfs+0xe6>
 80054d6:	2313      	movs	r3, #19
 80054d8:	e3b2      	b.n	8005c40 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 80054da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e2:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 80054e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80054ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 80054f4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80054f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f8:	fb02 f303 	mul.w	r3, r2, r3
 80054fc:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 80054fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <f_mkfs+0x114>
 8005504:	230e      	movs	r3, #14
 8005506:	e39b      	b.n	8005c40 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8005508:	f107 0210 	add.w	r2, r7, #16
 800550c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005510:	2101      	movs	r1, #1
 8005512:	4618      	mov	r0, r3
 8005514:	f7fd fb0a 	bl	8002b2c <disk_ioctl>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <f_mkfs+0x12e>
 800551e:	2301      	movs	r3, #1
 8005520:	e38e      	b.n	8005c40 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8005522:	7afb      	ldrb	r3, [r7, #11]
 8005524:	f003 0308 	and.w	r3, r3, #8
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <f_mkfs+0x13c>
 800552c:	2300      	movs	r3, #0
 800552e:	e000      	b.n	8005532 <f_mkfs+0x13e>
 8005530:	233f      	movs	r3, #63	; 0x3f
 8005532:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005538:	429a      	cmp	r2, r3
 800553a:	d901      	bls.n	8005540 <f_mkfs+0x14c>
 800553c:	230e      	movs	r3, #14
 800553e:	e37f      	b.n	8005c40 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	2b7f      	cmp	r3, #127	; 0x7f
 800554c:	d801      	bhi.n	8005552 <f_mkfs+0x15e>
 800554e:	230e      	movs	r3, #14
 8005550:	e376      	b.n	8005c40 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b80      	cmp	r3, #128	; 0x80
 8005556:	d901      	bls.n	800555c <f_mkfs+0x168>
 8005558:	2313      	movs	r3, #19
 800555a:	e371      	b.n	8005c40 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800555c:	7afb      	ldrb	r3, [r7, #11]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00d      	beq.n	8005582 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8005566:	7afb      	ldrb	r3, [r7, #11]
 8005568:	f003 0307 	and.w	r3, r3, #7
 800556c:	2b02      	cmp	r3, #2
 800556e:	d004      	beq.n	800557a <f_mkfs+0x186>
 8005570:	7afb      	ldrb	r3, [r7, #11]
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d103      	bne.n	8005582 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800557a:	2303      	movs	r3, #3
 800557c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005580:	e009      	b.n	8005596 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8005582:	7afb      	ldrb	r3, [r7, #11]
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <f_mkfs+0x19c>
 800558c:	2313      	movs	r3, #19
 800558e:	e357      	b.n	8005c40 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8005590:	2302      	movs	r3, #2
 8005592:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800559a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800559e:	2b03      	cmp	r3, #3
 80055a0:	d13c      	bne.n	800561c <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 80055a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d11b      	bne.n	80055e0 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	0c5b      	lsrs	r3, r3, #17
 80055ac:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80055ae:	2300      	movs	r3, #0
 80055b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80055b2:	2301      	movs	r3, #1
 80055b4:	653b      	str	r3, [r7, #80]	; 0x50
 80055b6:	e005      	b.n	80055c4 <f_mkfs+0x1d0>
 80055b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055ba:	3301      	adds	r3, #1
 80055bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80055be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	653b      	str	r3, [r7, #80]	; 0x50
 80055c4:	4a2d      	ldr	r2, [pc, #180]	; (800567c <f_mkfs+0x288>)
 80055c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d007      	beq.n	80055e0 <f_mkfs+0x1ec>
 80055d0:	4a2a      	ldr	r2, [pc, #168]	; (800567c <f_mkfs+0x288>)
 80055d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055d8:	461a      	mov	r2, r3
 80055da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055dc:	4293      	cmp	r3, r2
 80055de:	d2eb      	bcs.n	80055b8 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e8:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	3302      	adds	r3, #2
 80055ee:	009a      	lsls	r2, r3, #2
 80055f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055f2:	4413      	add	r3, r2
 80055f4:	1e5a      	subs	r2, r3, #1
 80055f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fc:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 80055fe:	2320      	movs	r3, #32
 8005600:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 8005602:	2300      	movs	r3, #0
 8005604:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800560c:	4293      	cmp	r3, r2
 800560e:	d903      	bls.n	8005618 <f_mkfs+0x224>
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	4a1b      	ldr	r2, [pc, #108]	; (8005680 <f_mkfs+0x28c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d952      	bls.n	80056be <f_mkfs+0x2ca>
 8005618:	230e      	movs	r3, #14
 800561a:	e311      	b.n	8005c40 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800561c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800561e:	2b00      	cmp	r3, #0
 8005620:	d11b      	bne.n	800565a <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	0b1b      	lsrs	r3, r3, #12
 8005626:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8005628:	2300      	movs	r3, #0
 800562a:	64bb      	str	r3, [r7, #72]	; 0x48
 800562c:	2301      	movs	r3, #1
 800562e:	653b      	str	r3, [r7, #80]	; 0x50
 8005630:	e005      	b.n	800563e <f_mkfs+0x24a>
 8005632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005634:	3301      	adds	r3, #1
 8005636:	64bb      	str	r3, [r7, #72]	; 0x48
 8005638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800563a:	005b      	lsls	r3, r3, #1
 800563c:	653b      	str	r3, [r7, #80]	; 0x50
 800563e:	4a11      	ldr	r2, [pc, #68]	; (8005684 <f_mkfs+0x290>)
 8005640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005642:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d007      	beq.n	800565a <f_mkfs+0x266>
 800564a:	4a0e      	ldr	r2, [pc, #56]	; (8005684 <f_mkfs+0x290>)
 800564c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800564e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005652:	461a      	mov	r2, r3
 8005654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005656:	4293      	cmp	r3, r2
 8005658:	d2eb      	bcs.n	8005632 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800565e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005662:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8005664:	6a3b      	ldr	r3, [r7, #32]
 8005666:	f640 72f5 	movw	r2, #4085	; 0xff5
 800566a:	4293      	cmp	r3, r2
 800566c:	d90c      	bls.n	8005688 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	3302      	adds	r3, #2
 8005672:	005b      	lsls	r3, r3, #1
 8005674:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005676:	e012      	b.n	800569e <f_mkfs+0x2aa>
 8005678:	200004d0 	.word	0x200004d0
 800567c:	08005f58 	.word	0x08005f58
 8005680:	0ffffff5 	.word	0x0ffffff5
 8005684:	08005f68 	.word	0x08005f68
				} else {
					fmt = FS_FAT12;
 8005688:	2301      	movs	r3, #1
 800568a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800568e:	6a3a      	ldr	r2, [r7, #32]
 8005690:	4613      	mov	r3, r2
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	4413      	add	r3, r2
 8005696:	3301      	adds	r3, #1
 8005698:	085b      	lsrs	r3, r3, #1
 800569a:	3303      	adds	r3, #3
 800569c:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800569e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80056a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056a2:	4413      	add	r3, r2
 80056a4:	1e5a      	subs	r2, r3, #1
 80056a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ac:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 80056ae:	2301      	movs	r3, #1
 80056b0:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 80056b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056bc:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 80056be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056c2:	4413      	add	r3, r2
 80056c4:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 80056c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056ca:	fb03 f202 	mul.w	r2, r3, r2
 80056ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056d0:	4413      	add	r3, r2
 80056d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056d4:	4413      	add	r3, r2
 80056d6:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	4413      	add	r3, r2
 80056de:	1e5a      	subs	r2, r3, #1
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	425b      	negs	r3, r3
 80056e4:	401a      	ands	r2, r3
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 80056ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80056f0:	2b03      	cmp	r3, #3
 80056f2:	d108      	bne.n	8005706 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 80056f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80056f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056f8:	4413      	add	r3, r2
 80056fa:	657b      	str	r3, [r7, #84]	; 0x54
 80056fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005700:	4413      	add	r3, r2
 8005702:	65bb      	str	r3, [r7, #88]	; 0x58
 8005704:	e006      	b.n	8005714 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8005706:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800570a:	fbb2 f3f3 	udiv	r3, r2, r3
 800570e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005710:	4413      	add	r3, r2
 8005712:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8005714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005716:	011a      	lsls	r2, r3, #4
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	441a      	add	r2, r3
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	1ad2      	subs	r2, r2, r3
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	429a      	cmp	r2, r3
 8005724:	d901      	bls.n	800572a <f_mkfs+0x336>
 8005726:	230e      	movs	r3, #14
 8005728:	e28a      	b.n	8005c40 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800572e:	1ad2      	subs	r2, r2, r3
 8005730:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005732:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005734:	fb01 f303 	mul.w	r3, r1, r3
 8005738:	1ad2      	subs	r2, r2, r3
 800573a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800573c:	1ad2      	subs	r2, r2, r3
 800573e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005740:	fbb2 f3f3 	udiv	r3, r2, r3
 8005744:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8005746:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800574a:	2b03      	cmp	r3, #3
 800574c:	d10f      	bne.n	800576e <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005754:	4293      	cmp	r3, r2
 8005756:	d80a      	bhi.n	800576e <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d105      	bne.n	800576a <f_mkfs+0x376>
 800575e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005760:	085b      	lsrs	r3, r3, #1
 8005762:	607b      	str	r3, [r7, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d144      	bne.n	80057f4 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800576a:	230e      	movs	r3, #14
 800576c:	e268      	b.n	8005c40 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800576e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005772:	2b02      	cmp	r3, #2
 8005774:	d133      	bne.n	80057de <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800577c:	4293      	cmp	r3, r2
 800577e:	d91e      	bls.n	80057be <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d107      	bne.n	8005796 <f_mkfs+0x3a2>
 8005786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	2b40      	cmp	r3, #64	; 0x40
 800578c:	d803      	bhi.n	8005796 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800578e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	607b      	str	r3, [r7, #4]
 8005794:	e033      	b.n	80057fe <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8005796:	7afb      	ldrb	r3, [r7, #11]
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d003      	beq.n	80057a8 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 80057a0:	2303      	movs	r3, #3
 80057a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80057a6:	e02a      	b.n	80057fe <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d105      	bne.n	80057ba <f_mkfs+0x3c6>
 80057ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	607b      	str	r3, [r7, #4]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b80      	cmp	r3, #128	; 0x80
 80057b8:	d91e      	bls.n	80057f8 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 80057ba:	230e      	movs	r3, #14
 80057bc:	e240      	b.n	8005c40 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d80a      	bhi.n	80057de <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d105      	bne.n	80057da <f_mkfs+0x3e6>
 80057ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	607b      	str	r3, [r7, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b80      	cmp	r3, #128	; 0x80
 80057d8:	d910      	bls.n	80057fc <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 80057da:	230e      	movs	r3, #14
 80057dc:	e230      	b.n	8005c40 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 80057de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d10c      	bne.n	8005800 <f_mkfs+0x40c>
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d907      	bls.n	8005800 <f_mkfs+0x40c>
 80057f0:	230e      	movs	r3, #14
 80057f2:	e225      	b.n	8005c40 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80057f4:	bf00      	nop
 80057f6:	e6ce      	b.n	8005596 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80057f8:	bf00      	nop
 80057fa:	e6cc      	b.n	8005596 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80057fc:	bf00      	nop
			pau = au;
 80057fe:	e6ca      	b.n	8005596 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8005800:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8005802:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005804:	461a      	mov	r2, r3
 8005806:	2100      	movs	r1, #0
 8005808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800580a:	f7fd fa50 	bl	8002cae <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800580e:	220b      	movs	r2, #11
 8005810:	49b2      	ldr	r1, [pc, #712]	; (8005adc <f_mkfs+0x6e8>)
 8005812:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005814:	f7fd fa2a 	bl	8002c6c <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8005818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581a:	330b      	adds	r3, #11
 800581c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800581e:	4611      	mov	r1, r2
 8005820:	4618      	mov	r0, r3
 8005822:	f7fd f9dc 	bl	8002bde <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8005826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005828:	330d      	adds	r3, #13
 800582a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800582c:	b2d2      	uxtb	r2, r2
 800582e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8005830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005832:	330e      	adds	r3, #14
 8005834:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005836:	b292      	uxth	r2, r2
 8005838:	4611      	mov	r1, r2
 800583a:	4618      	mov	r0, r3
 800583c:	f7fd f9cf 	bl	8002bde <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8005840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005842:	3310      	adds	r3, #16
 8005844:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005846:	b2d2      	uxtb	r2, r2
 8005848:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	f103 0211 	add.w	r2, r3, #17
 8005850:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005854:	2b03      	cmp	r3, #3
 8005856:	d002      	beq.n	800585e <f_mkfs+0x46a>
 8005858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800585a:	b29b      	uxth	r3, r3
 800585c:	e000      	b.n	8005860 <f_mkfs+0x46c>
 800585e:	2300      	movs	r3, #0
 8005860:	4619      	mov	r1, r3
 8005862:	4610      	mov	r0, r2
 8005864:	f7fd f9bb 	bl	8002bde <st_word>
		if (sz_vol < 0x10000) {
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800586e:	d208      	bcs.n	8005882 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8005870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005872:	3313      	adds	r3, #19
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	b292      	uxth	r2, r2
 8005878:	4611      	mov	r1, r2
 800587a:	4618      	mov	r0, r3
 800587c:	f7fd f9af 	bl	8002bde <st_word>
 8005880:	e006      	b.n	8005890 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8005882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005884:	3320      	adds	r3, #32
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	4611      	mov	r1, r2
 800588a:	4618      	mov	r0, r3
 800588c:	f7fd f9c2 	bl	8002c14 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8005890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005892:	3315      	adds	r3, #21
 8005894:	22f8      	movs	r2, #248	; 0xf8
 8005896:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8005898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589a:	3318      	adds	r3, #24
 800589c:	213f      	movs	r1, #63	; 0x3f
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fd f99d 	bl	8002bde <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 80058a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a6:	331a      	adds	r3, #26
 80058a8:	21ff      	movs	r1, #255	; 0xff
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fd f997 	bl	8002bde <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 80058b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b2:	331c      	adds	r3, #28
 80058b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7fd f9ac 	bl	8002c14 <st_dword>
		if (fmt == FS_FAT32) {
 80058bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80058c0:	2b03      	cmp	r3, #3
 80058c2:	d131      	bne.n	8005928 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 80058c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c6:	f103 0443 	add.w	r4, r3, #67	; 0x43
 80058ca:	f7fc fb61 	bl	8001f90 <get_fattime>
 80058ce:	4603      	mov	r3, r0
 80058d0:	4619      	mov	r1, r3
 80058d2:	4620      	mov	r0, r4
 80058d4:	f7fd f99e 	bl	8002c14 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 80058d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058da:	3324      	adds	r3, #36	; 0x24
 80058dc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fd f998 	bl	8002c14 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 80058e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e6:	332c      	adds	r3, #44	; 0x2c
 80058e8:	2102      	movs	r1, #2
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fd f992 	bl	8002c14 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 80058f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f2:	3330      	adds	r3, #48	; 0x30
 80058f4:	2101      	movs	r1, #1
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7fd f971 	bl	8002bde <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 80058fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fe:	3332      	adds	r3, #50	; 0x32
 8005900:	2106      	movs	r1, #6
 8005902:	4618      	mov	r0, r3
 8005904:	f7fd f96b 	bl	8002bde <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8005908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590a:	3340      	adds	r3, #64	; 0x40
 800590c:	2280      	movs	r2, #128	; 0x80
 800590e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8005910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005912:	3342      	adds	r3, #66	; 0x42
 8005914:	2229      	movs	r2, #41	; 0x29
 8005916:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8005918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591a:	3347      	adds	r3, #71	; 0x47
 800591c:	2213      	movs	r2, #19
 800591e:	4970      	ldr	r1, [pc, #448]	; (8005ae0 <f_mkfs+0x6ec>)
 8005920:	4618      	mov	r0, r3
 8005922:	f7fd f9a3 	bl	8002c6c <mem_cpy>
 8005926:	e020      	b.n	800596a <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8005928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592a:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800592e:	f7fc fb2f 	bl	8001f90 <get_fattime>
 8005932:	4603      	mov	r3, r0
 8005934:	4619      	mov	r1, r3
 8005936:	4620      	mov	r0, r4
 8005938:	f7fd f96c 	bl	8002c14 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800593c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593e:	3316      	adds	r3, #22
 8005940:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005942:	b292      	uxth	r2, r2
 8005944:	4611      	mov	r1, r2
 8005946:	4618      	mov	r0, r3
 8005948:	f7fd f949 	bl	8002bde <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800594c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594e:	3324      	adds	r3, #36	; 0x24
 8005950:	2280      	movs	r2, #128	; 0x80
 8005952:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8005954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005956:	3326      	adds	r3, #38	; 0x26
 8005958:	2229      	movs	r2, #41	; 0x29
 800595a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800595c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595e:	332b      	adds	r3, #43	; 0x2b
 8005960:	2213      	movs	r2, #19
 8005962:	4960      	ldr	r1, [pc, #384]	; (8005ae4 <f_mkfs+0x6f0>)
 8005964:	4618      	mov	r0, r3
 8005966:	f7fd f981 	bl	8002c6c <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800596a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005970:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005974:	4618      	mov	r0, r3
 8005976:	f7fd f932 	bl	8002bde <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800597a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800597e:	2301      	movs	r3, #1
 8005980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005982:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005984:	f7fd f8b2 	bl	8002aec <disk_write>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <f_mkfs+0x59e>
 800598e:	2301      	movs	r3, #1
 8005990:	e156      	b.n	8005c40 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8005992:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005996:	2b03      	cmp	r3, #3
 8005998:	d140      	bne.n	8005a1c <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	1d9a      	adds	r2, r3, #6
 800599e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80059a2:	2301      	movs	r3, #1
 80059a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059a6:	f7fd f8a1 	bl	8002aec <disk_write>
			mem_set(buf, 0, ss);
 80059aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80059ac:	461a      	mov	r2, r3
 80059ae:	2100      	movs	r1, #0
 80059b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059b2:	f7fd f97c 	bl	8002cae <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 80059b6:	494c      	ldr	r1, [pc, #304]	; (8005ae8 <f_mkfs+0x6f4>)
 80059b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059ba:	f7fd f92b 	bl	8002c14 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 80059be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80059c4:	4949      	ldr	r1, [pc, #292]	; (8005aec <f_mkfs+0x6f8>)
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fd f924 	bl	8002c14 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	3b01      	subs	r3, #1
 80059d6:	4619      	mov	r1, r3
 80059d8:	4610      	mov	r0, r2
 80059da:	f7fd f91b 	bl	8002c14 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 80059de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80059e4:	2102      	movs	r1, #2
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fd f914 	bl	8002c14 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80059f2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fd f8f1 	bl	8002bde <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	1dda      	adds	r2, r3, #7
 8005a00:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8005a04:	2301      	movs	r3, #1
 8005a06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a08:	f7fd f870 	bl	8002aec <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	1c5a      	adds	r2, r3, #1
 8005a10:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8005a14:	2301      	movs	r3, #1
 8005a16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a18:	f7fd f868 	bl	8002aec <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8005a1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a1e:	2100      	movs	r1, #0
 8005a20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a22:	f7fd f944 	bl	8002cae <mem_set>
		sect = b_fat;		/* FAT start sector */
 8005a26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a28:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a2e:	e04b      	b.n	8005ac8 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8005a30:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005a34:	2b03      	cmp	r3, #3
 8005a36:	d113      	bne.n	8005a60 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8005a38:	f06f 0107 	mvn.w	r1, #7
 8005a3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a3e:	f7fd f8e9 	bl	8002c14 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8005a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a44:	3304      	adds	r3, #4
 8005a46:	f04f 31ff 	mov.w	r1, #4294967295
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7fd f8e2 	bl	8002c14 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8005a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a52:	3308      	adds	r3, #8
 8005a54:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7fd f8db 	bl	8002c14 <st_dword>
 8005a5e:	e00b      	b.n	8005a78 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8005a60:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d101      	bne.n	8005a6c <f_mkfs+0x678>
 8005a68:	4b21      	ldr	r3, [pc, #132]	; (8005af0 <f_mkfs+0x6fc>)
 8005a6a:	e001      	b.n	8005a70 <f_mkfs+0x67c>
 8005a6c:	f06f 0307 	mvn.w	r3, #7
 8005a70:	4619      	mov	r1, r3
 8005a72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a74:	f7fd f8ce 	bl	8002c14 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8005a78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a7a:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8005a7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a80:	4293      	cmp	r3, r2
 8005a82:	bf28      	it	cs
 8005a84:	4613      	movcs	r3, r2
 8005a86:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8005a88:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8005a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a8e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005a90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a92:	f7fd f82b 	bl	8002aec <disk_write>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d001      	beq.n	8005aa0 <f_mkfs+0x6ac>
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e0cf      	b.n	8005c40 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8005aa0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aa8:	f7fd f901 	bl	8002cae <mem_set>
				sect += n; nsect -= n;
 8005aac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ab0:	4413      	add	r3, r2
 8005ab2:	667b      	str	r3, [r7, #100]	; 0x64
 8005ab4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8005abc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1dc      	bne.n	8005a7c <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8005ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d3af      	bcc.n	8005a30 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8005ad0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005ad4:	2b03      	cmp	r3, #3
 8005ad6:	d10d      	bne.n	8005af4 <f_mkfs+0x700>
 8005ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ada:	e00c      	b.n	8005af6 <f_mkfs+0x702>
 8005adc:	08005e94 	.word	0x08005e94
 8005ae0:	08005ea0 	.word	0x08005ea0
 8005ae4:	08005eb4 	.word	0x08005eb4
 8005ae8:	41615252 	.word	0x41615252
 8005aec:	61417272 	.word	0x61417272
 8005af0:	00fffff8 	.word	0x00fffff8
 8005af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005af6:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8005af8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afc:	4293      	cmp	r3, r2
 8005afe:	bf28      	it	cs
 8005b00:	4613      	movcs	r3, r2
 8005b02:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8005b04:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8005b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b0a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005b0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b0e:	f7fc ffed 	bl	8002aec <disk_write>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <f_mkfs+0x728>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e091      	b.n	8005c40 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8005b1c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b20:	4413      	add	r3, r2
 8005b22:	667b      	str	r3, [r7, #100]	; 0x64
 8005b24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8005b2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1e2      	bne.n	8005af8 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8005b32:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d103      	bne.n	8005b42 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8005b3a:	230c      	movs	r3, #12
 8005b3c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8005b40:	e010      	b.n	8005b64 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b48:	d303      	bcc.n	8005b52 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8005b4a:	2306      	movs	r3, #6
 8005b4c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8005b50:	e008      	b.n	8005b64 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8005b52:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d101      	bne.n	8005b5e <f_mkfs+0x76a>
 8005b5a:	2304      	movs	r3, #4
 8005b5c:	e000      	b.n	8005b60 <f_mkfs+0x76c>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8005b64:	7afb      	ldrb	r3, [r7, #11]
 8005b66:	f003 0308 	and.w	r3, r3, #8
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d15b      	bne.n	8005c26 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8005b6e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b70:	461a      	mov	r2, r3
 8005b72:	2100      	movs	r1, #0
 8005b74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b76:	f7fd f89a 	bl	8002cae <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005b80:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7fd f82a 	bl	8002bde <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005b90:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	2200      	movs	r2, #0
 8005b96:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	3302      	adds	r3, #2
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	3303      	adds	r3, #3
 8005bac:	2200      	movs	r2, #0
 8005bae:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8005bb8:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	441a      	add	r2, r3
 8005bc0:	4b21      	ldr	r3, [pc, #132]	; (8005c48 <f_mkfs+0x854>)
 8005bc2:	fba3 1302 	umull	r1, r3, r3, r2
 8005bc6:	1ad2      	subs	r2, r2, r3
 8005bc8:	0852      	lsrs	r2, r2, #1
 8005bca:	4413      	add	r3, r2
 8005bcc:	0b5b      	lsrs	r3, r3, #13
 8005bce:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	3305      	adds	r3, #5
 8005bd4:	22fe      	movs	r2, #254	; 0xfe
 8005bd6:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8005bd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bda:	089b      	lsrs	r3, r3, #2
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	3306      	adds	r3, #6
 8005be2:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8005be6:	b2d2      	uxtb	r2, r2
 8005be8:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	3307      	adds	r3, #7
 8005bee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	3308      	adds	r3, #8
 8005bf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fd f80a 	bl	8002c14 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	330c      	adds	r3, #12
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	4611      	mov	r1, r2
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7fd f803 	bl	8002c14 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8005c0e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8005c12:	2301      	movs	r3, #1
 8005c14:	2200      	movs	r2, #0
 8005c16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c18:	f7fc ff68 	bl	8002aec <disk_write>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <f_mkfs+0x832>
 8005c22:	2301      	movs	r3, #1
 8005c24:	e00c      	b.n	8005c40 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8005c26:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fc ff7c 	bl	8002b2c <disk_ioctl>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <f_mkfs+0x84a>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e000      	b.n	8005c40 <f_mkfs+0x84c>

	return FR_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3774      	adds	r7, #116	; 0x74
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd90      	pop	{r4, r7, pc}
 8005c48:	0515565b 	.word	0x0515565b

08005c4c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	4613      	mov	r3, r2
 8005c58:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005c62:	4b1f      	ldr	r3, [pc, #124]	; (8005ce0 <FATFS_LinkDriverEx+0x94>)
 8005c64:	7a5b      	ldrb	r3, [r3, #9]
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d131      	bne.n	8005cd0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005c6c:	4b1c      	ldr	r3, [pc, #112]	; (8005ce0 <FATFS_LinkDriverEx+0x94>)
 8005c6e:	7a5b      	ldrb	r3, [r3, #9]
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	461a      	mov	r2, r3
 8005c74:	4b1a      	ldr	r3, [pc, #104]	; (8005ce0 <FATFS_LinkDriverEx+0x94>)
 8005c76:	2100      	movs	r1, #0
 8005c78:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005c7a:	4b19      	ldr	r3, [pc, #100]	; (8005ce0 <FATFS_LinkDriverEx+0x94>)
 8005c7c:	7a5b      	ldrb	r3, [r3, #9]
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	4a17      	ldr	r2, [pc, #92]	; (8005ce0 <FATFS_LinkDriverEx+0x94>)
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005c8a:	4b15      	ldr	r3, [pc, #84]	; (8005ce0 <FATFS_LinkDriverEx+0x94>)
 8005c8c:	7a5b      	ldrb	r3, [r3, #9]
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	461a      	mov	r2, r3
 8005c92:	4b13      	ldr	r3, [pc, #76]	; (8005ce0 <FATFS_LinkDriverEx+0x94>)
 8005c94:	4413      	add	r3, r2
 8005c96:	79fa      	ldrb	r2, [r7, #7]
 8005c98:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005c9a:	4b11      	ldr	r3, [pc, #68]	; (8005ce0 <FATFS_LinkDriverEx+0x94>)
 8005c9c:	7a5b      	ldrb	r3, [r3, #9]
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	b2d1      	uxtb	r1, r2
 8005ca4:	4a0e      	ldr	r2, [pc, #56]	; (8005ce0 <FATFS_LinkDriverEx+0x94>)
 8005ca6:	7251      	strb	r1, [r2, #9]
 8005ca8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005caa:	7dbb      	ldrb	r3, [r7, #22]
 8005cac:	3330      	adds	r3, #48	; 0x30
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	223a      	movs	r2, #58	; 0x3a
 8005cba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	3302      	adds	r3, #2
 8005cc0:	222f      	movs	r2, #47	; 0x2f
 8005cc2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	3303      	adds	r3, #3
 8005cc8:	2200      	movs	r2, #0
 8005cca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	371c      	adds	r7, #28
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	200004f8 	.word	0x200004f8

08005ce4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005cee:	2200      	movs	r2, #0
 8005cf0:	6839      	ldr	r1, [r7, #0]
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7ff ffaa 	bl	8005c4c <FATFS_LinkDriverEx>
 8005cf8:	4603      	mov	r3, r0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
	...

08005d04 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8005d10:	2300      	movs	r3, #0
 8005d12:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8005d14:	2301      	movs	r3, #1
 8005d16:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8005d18:	4b15      	ldr	r3, [pc, #84]	; (8005d70 <FATFS_UnLinkDriverEx+0x6c>)
 8005d1a:	7a5b      	ldrb	r3, [r3, #9]
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d01e      	beq.n	8005d60 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	3b30      	subs	r3, #48	; 0x30
 8005d28:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 8005d2a:	7bbb      	ldrb	r3, [r7, #14]
 8005d2c:	4a10      	ldr	r2, [pc, #64]	; (8005d70 <FATFS_UnLinkDriverEx+0x6c>)
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d013      	beq.n	8005d60 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8005d38:	7bbb      	ldrb	r3, [r7, #14]
 8005d3a:	4a0d      	ldr	r2, [pc, #52]	; (8005d70 <FATFS_UnLinkDriverEx+0x6c>)
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	2200      	movs	r2, #0
 8005d42:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8005d44:	7bbb      	ldrb	r3, [r7, #14]
 8005d46:	4a0a      	ldr	r2, [pc, #40]	; (8005d70 <FATFS_UnLinkDriverEx+0x6c>)
 8005d48:	4413      	add	r3, r2
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 8005d4e:	4b08      	ldr	r3, [pc, #32]	; (8005d70 <FATFS_UnLinkDriverEx+0x6c>)
 8005d50:	7a5b      	ldrb	r3, [r3, #9]
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	3b01      	subs	r3, #1
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	4b05      	ldr	r3, [pc, #20]	; (8005d70 <FATFS_UnLinkDriverEx+0x6c>)
 8005d5a:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	200004f8 	.word	0x200004f8

08005d74 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7ff ffc0 	bl	8005d04 <FATFS_UnLinkDriverEx>
 8005d84:	4603      	mov	r3, r0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <memset>:
 8005d8e:	4402      	add	r2, r0
 8005d90:	4603      	mov	r3, r0
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d100      	bne.n	8005d98 <memset+0xa>
 8005d96:	4770      	bx	lr
 8005d98:	f803 1b01 	strb.w	r1, [r3], #1
 8005d9c:	e7f9      	b.n	8005d92 <memset+0x4>
	...

08005da0 <__libc_init_array>:
 8005da0:	b570      	push	{r4, r5, r6, lr}
 8005da2:	4d0d      	ldr	r5, [pc, #52]	; (8005dd8 <__libc_init_array+0x38>)
 8005da4:	4c0d      	ldr	r4, [pc, #52]	; (8005ddc <__libc_init_array+0x3c>)
 8005da6:	1b64      	subs	r4, r4, r5
 8005da8:	10a4      	asrs	r4, r4, #2
 8005daa:	2600      	movs	r6, #0
 8005dac:	42a6      	cmp	r6, r4
 8005dae:	d109      	bne.n	8005dc4 <__libc_init_array+0x24>
 8005db0:	4d0b      	ldr	r5, [pc, #44]	; (8005de0 <__libc_init_array+0x40>)
 8005db2:	4c0c      	ldr	r4, [pc, #48]	; (8005de4 <__libc_init_array+0x44>)
 8005db4:	f000 f826 	bl	8005e04 <_init>
 8005db8:	1b64      	subs	r4, r4, r5
 8005dba:	10a4      	asrs	r4, r4, #2
 8005dbc:	2600      	movs	r6, #0
 8005dbe:	42a6      	cmp	r6, r4
 8005dc0:	d105      	bne.n	8005dce <__libc_init_array+0x2e>
 8005dc2:	bd70      	pop	{r4, r5, r6, pc}
 8005dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dc8:	4798      	blx	r3
 8005dca:	3601      	adds	r6, #1
 8005dcc:	e7ee      	b.n	8005dac <__libc_init_array+0xc>
 8005dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dd2:	4798      	blx	r3
 8005dd4:	3601      	adds	r6, #1
 8005dd6:	e7f2      	b.n	8005dbe <__libc_init_array+0x1e>
 8005dd8:	08005f80 	.word	0x08005f80
 8005ddc:	08005f80 	.word	0x08005f80
 8005de0:	08005f80 	.word	0x08005f80
 8005de4:	08005f84 	.word	0x08005f84

08005de8 <memcpy>:
 8005de8:	440a      	add	r2, r1
 8005dea:	4291      	cmp	r1, r2
 8005dec:	f100 33ff 	add.w	r3, r0, #4294967295
 8005df0:	d100      	bne.n	8005df4 <memcpy+0xc>
 8005df2:	4770      	bx	lr
 8005df4:	b510      	push	{r4, lr}
 8005df6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dfe:	4291      	cmp	r1, r2
 8005e00:	d1f9      	bne.n	8005df6 <memcpy+0xe>
 8005e02:	bd10      	pop	{r4, pc}

08005e04 <_init>:
 8005e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e06:	bf00      	nop
 8005e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e0a:	bc08      	pop	{r3}
 8005e0c:	469e      	mov	lr, r3
 8005e0e:	4770      	bx	lr

08005e10 <_fini>:
 8005e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e12:	bf00      	nop
 8005e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e16:	bc08      	pop	{r3}
 8005e18:	469e      	mov	lr, r3
 8005e1a:	4770      	bx	lr
